from PySide6.QtWidgets import *
from PySide6.QtGui import *
from PySide6.QtCore import *
from PySide6.QtCore import Qt

import re

from .lua_syntax_highlighter import SimpleLuaHighlighter


class CodeTextEdit(QPlainTextEdit):
    def __init__(self):
        """
        Constructor for the CodeTextEdit class.
        Initializes the text edit and sets up the syntax highlighter.
        """

        super().__init__()

        self.font_size = 10
        self.line_numbers_padding = 5
        self.highlight_color = QColor(29, 233, 182)
        self.update_document_size()

        self.line_number_area = LineNumberArea(self)

        self.blockCountChanged.connect(self.update_line_number_area_width)
        self.updateRequest.connect(self.update_line_number_area)
        self.cursorPositionChanged.connect(self.highlight_current_line)

        self.update_line_number_area_width()

        SimpleLuaHighlighter(self.document())

        keywords = [   'UTILS._OneLineSerialize(tbl)',
    'UTILS.PrintTableToLog(table,indent)',
    'UTILS.TableShow(tbl,loc,indent,tableshow_tbls)',
    'UTILS.Gdump(fname)',
    'UTILS.DoString(s)',
    'UTILS.Round(num,idp)',
    'UTILS.DoString(s)',
    'UTILS.spairs(t,order)',
    'UTILS.kpairs(t,getkey,order)',
    'UTILS.rpairs(t)',
    'UTILS.GetMarkID()',
    'UTILS.RemoveMark(MarkID,Delay)',
    'UTILS.IsInRadius(InVec2,Vec2,Radius)',
    'UTILS.IsInSphere(InVec3,Vec3,Radius)',
    'UTILS.BeaufortScale(speed)',
    'UTILS.Split(str,sep)',
    'UTILS.GetCharacters(str)',
    'UTILS.SecondsToClock(seconds,short)',
    'UTILS.SecondsOfToday()',
    'UTILS.SecondsToMidnight()',
    'UTILS.ClockToSeconds(clock)',
    'UTILS.DisplayMissionTime(duration)',
    'UTILS.ReplaceIllegalCharacters(Text,ReplaceBy)',
    'UTILS.RandomGaussian(x0,sigma,xmin,xmax,imax)',
    'UTILS.Randomize(value,fac,lower,upper)',
    'UTILS.VecDot(a,b)',
    'UTILS.Vec2Dot(a,b)',
    'UTILS.VecNorm(a)',
    'UTILS.Vec2Norm(a)',
    'UTILS.VecDist2D(a,b)',
    'UTILS.VecDist3D(a,b)',
    'UTILS.VecCross(a,b)',
    'UTILS.VecSubstract(a,b)',
    'UTILS.VecSubtract(a,b)',
    'UTILS.Vec2Substract(a,b)',
    'UTILS.Vec2Subtract(a,b)',
    'UTILS.VecAdd(a,b)',
    'UTILS.Vec2Add(a,b)',
    'UTILS.VecAngle(a,b)',
    'UTILS.VecHdg(a)',
    'UTILS.Vec2Hdg(a)',
    'UTILS.HdgDiff(h1,h2)',
    'UTILS.HdgTo(a,b)',
    'UTILS.VecTranslate(a,distance,angle)',
    'UTILS.Vec2Translate(a,distance,angle)',
    'UTILS.Rotate2D(a,angle)',
    'UTILS.Vec2Rotate2D(a,angle)',
    'UTILS.TACANToFrequency(TACANChannel,TACANMode)',
    'UTILS.GetDCSMap()',
    'UTILS.GetDCSMissionDate()',
    'UTILS.GetMissionDay(Time)',
    'UTILS.GetMissionDayOfYear(Time)',
    'UTILS.GetMagneticDeclination(map)',
    'UTILS.FileExists(file)',
    'UTILS.CheckMemory(output)',
    'UTILS.GetCoalitionName(Coalition)',
    'UTILS.GetCoalitionEnemy(Coalition,Neutral)',
    'UTILS.GetModulationName(Modulation)',
    'UTILS.GetReportingName(Typename)',
    'UTILS.GetCallsignName(Callsign)',
    'UTILS.GMTToLocalTimeDifference()',
    'UTILS.GetDayOfYear(Year,Month,Day)',
    'UTILS.GetSunRiseAndSet(DayOfYear,Latitude,Longitude,Rising,Tlocal)',
    'UTILS.GetSunrise(Day,Month,Year,Latitude,Longitude,Tlocal)',
    'UTILS.GetSunset(Day,Month,Year,Latitude,Longitude,Tlocal)',
    'UTILS.GetOSTime()',
    'UTILS.ShuffleTable(t)',
    'UTILS.GetRandomTableElement(t,replace)',
    'UTILS.IsLoadingDoorOpen(unit_name)',
    'UTILS.GenerateFMFrequencies()',
    'UTILS.GenerateVHFrequencies()',
    'UTILS.GenerateUHFrequencies()',
    'UTILS.GenerateLaserCodes()',
    'UTILS.EnsureTable(Object,ReturnNil)',
    'UTILS.SaveToFile(Path,Filename,Data)',
    'UTILS.LoadFromFile(Path,Filename)',
    'UTILS.CheckFileExists(Path,Filename)',
    'UTILS.GetCountPerTypeName(Group)',
    'UTILS.SaveStationaryListOfGroups(List,Path,Filename,Structured)',
    'UTILS.SaveSetOfGroups(Set,Path,Filename,Structured)',
    'UTILS.SaveSetOfStatics(Set,Path,Filename)',
    'UTILS.SaveStationaryListOfStatics(List,Path,Filename)',
    'UTILS.LoadStationaryListOfGroups(Path,Filename,Reduce,Structured,Cinematic,Effect,Density)',
    'UTILS.LoadSetOfGroups(Path,Filename,Spawn,Structured,Cinematic,Effect,Density)',
    'UTILS.LoadSetOfStatics(Path,Filename)',
    'UTILS.LoadStationaryListOfStatics(Path,Filename,Reduce,Dead,Cinematic,Effect,Density)',
    'UTILS.BearingToCardinal(Heading)',
    'UTILS.ToStringBRAANATO(FromGrp,ToGrp)',
    'UTILS.IsInTable(Table,Object,Key)',
    'UTILS.IsAnyInTable(Table,Objects,Key)',
    'UTILS.PlotRacetrack(Coordinate,Altitude,Speed,Heading,Leg,Coalition,Color,Alpha,LineType,ReadOnly)',
    'UTILS.TimeNow()',
    'UTILS.TimeDifferenceInSeconds(start_time,end_time)',
    'UTILS.TimeLaterThan(time_string)',
    'UTILS.TimeBefore(time_string)',
    'UTILS.CombineTimeStrings(time_string_01,time_string_02)',
    'UTILS.SubtractTimeStrings(time_string_01,time_string_02)',
    'UTILS.TimeBetween(start_time,end_time)',
    'UTILS.PercentageChance(chance)',
    'UTILS.Clamp(value,min,max)',
    'UTILS.ClampAngle(value)',
    'UTILS.RemapValue(value,old_min,old_max,new_min,new_max)',
    'UTILS.RandomPointInTriangle(pt1,pt2,pt3)',
    'UTILS.AngleBetween(angle,min,max)',
    'UTILS.WriteJSON(data,file_path)',
    'UTILS.ReadJSON(file_path)',
    'UTILS.GetZoneProperties(zone_name)',
    'UTILS.RotatePointAroundPivot(point,pivot,angle)',
    'UTILS.UniqueName(base)',
    'string.startswith(str,value)',
    'string.endswith(str,value)',
    'string.split(input,separator)',
    'string.contains(str,value)',
    'table.contains(tbl,element)',
    'table.contains_key(tbl,key)',
    'table.insert_unique(tbl,element)',
    'table.remove_by_value(tbl,element)',
    'table.remove_key(table,key)',
    'table.index_of(table,element)',
    'table.length(T)',
    'table.slice(tbl,first,last)',
    'table.count_value(tbl,value)',
    'table.combine(t1,t2)',
    'table.merge(t1,t2)',
    'table.add(tbl,item)',
    'table.shuffle(tbl)',
    'table.find_key_value_pair(tbl,key,value)',
    'UTILS.DecimalToOctal(Number)',
    'UTILS.OctalToDecimal(Number)',
    'PROFILER.Start(Delay,Duration)',
    'PROFILER.Stop(Delay)',
    'PROFILER.Stop(Delay)',
    'PROFILER.hook(event)',
    'PROFILER.getData(func)',
    'PROFILER._flog(f,txt)',
    'PROFILER.showTable(data,f,runTimeGame)',
    'PROFILER.printCSV(data,runTimeGame)',
    'PROFILER.getfilename(ext)',
    'PROFILER.showInfo(runTimeGame,runTimeOS)',
    'TEMPLATE.GetGround(TypeName,GroupName,CountryID,Vec3,Nunits,Radius)',
    'TEMPLATE.GetNaval(TypeName,GroupName,CountryID,Vec3,Nunits,Radius)',
    'TEMPLATE.GetAirplane(TypeName,GroupName,CountryID,Vec3,Nunits,Radius)',
    'TEMPLATE.GetHelicopter(TypeName,GroupName,CountryID,Vec3,Nunits,Radius)',
    'TEMPLATE._GetAircraft(Airplane,TypeName,GroupName,CountryID,Vec3,Nunits,Radius)',
    'TEMPLATE.SetPositionFromVec2(Template,Vec2)',
    'TEMPLATE.SetPositionFromVec3(Template,Vec3)',
    'TEMPLATE.SetUnits(Template,N,Coordinate,Radius)',
    'TEMPLATE.SetAirbase(Template,AirBase,ParkingSpots,EngineOn)',
    'TEMPLATE.AddWaypoint(Template,Waypoint)',
    'STTS.uuid()',
    'STTS.round(x,n)',
    'STTS.getSpeechTime(length,speed,isGoogle)',
    'STTS.TextToSpeech(message,freqs,modulations,volume,name,coalition,point,speed,gender,culture,voice,googleTTS)',
    'STTS.PlayMP3(pathToMP3,freqs,modulations,volume,name,coalition,point)',
    'FIFO:New()',
    'FIFO:Clear()',
    'FIFO:Push(Object,UniqueID)',
    'FIFO:Pull()',
    'FIFO:PullByPointer(Pointer)',
    'FIFO:ReadByPointer(Pointer)',
    'FIFO:ReadByID(UniqueID)',
    'FIFO:PullByID(UniqueID)',
    'FIFO:Flatten()',
    'FIFO:IsEmpty()',
    'FIFO:GetSize()',
    'FIFO:Count()',
    'FIFO:IsNotEmpty()',
    'FIFO:GetPointerStack()',
    'FIFO:HasUniqueID(UniqueID)',
    'FIFO:GetIDStack()',
    'FIFO:GetIDStackSorted()',
    'FIFO:GetDataTable()',
    'FIFO:GetSortedDataTable()',
    'FIFO:ForEach(IteratorFunction,Arg,Function,FunctionArguments)',
    'FIFO:Flush()',
    'LIFO:New()',
    'LIFO:Clear()',
    'LIFO:Push(Object,UniqueID)',
    'LIFO:Pull()',
    'LIFO:PullByPointer(Pointer)',
    'LIFO:ReadByPointer(Pointer)',
    'LIFO:ReadByID(UniqueID)',
    'LIFO:PullByID(UniqueID)',
    'LIFO:Flatten()',
    'LIFO:IsEmpty()',
    'LIFO:GetSize()',
    'LIFO:Count()',
    'LIFO:IsNotEmpty()',
    'LIFO:GetPointerStack()',
    'LIFO:GetIDStack()',
    'LIFO:GetIDStackSorted()',
    'LIFO:HasUniqueID(UniqueID)',
    'LIFO:Flush()',
    'LIFO:GetDataTable()',
    'LIFO:GetSortedDataTable()',
    'LIFO:ForEach(IteratorFunction,Arg,Function,FunctionArguments)',
    'SOCKET:New(Port,Host)',
    'SOCKET:SetPort(Port)',
    'SOCKET:SetHost(Host)',
    'SOCKET:SendTable(Table)',
    'SOCKET:SendText(Text)',
    'SOCKET:SendTextToSpeech(Text,Provider,Voice,Culture,Gender,Volume)',
    'BASE:New()',
    'BASE:Inherit(Child,Parent)',
    'BASE:GetParent(Child,FromClass)',
    'BASE:IsInstanceOf(ClassName)',
    'BASE:GetClassNameAndID()',
    'BASE:GetClassName()',
    'BASE:GetClassID()',
    'BASE:EventDispatcher()',
    'BASE:GetEventPriority()',
    'BASE:SetEventPriority(EventPriority)',
    'BASE:EventRemoveAll()',
    'BASE:HandleEvent(EventID,EventFunction)',
    'BASE:UnHandleEvent(EventID)',
    'BASE:CreateEventBirth(EventTime,Initiator,IniUnitName,place,subplace)',
    'BASE:CreateEventCrash(EventTime,Initiator,IniObjectCategory)',
    'BASE:CreateEventUnitLost(EventTime,Initiator)',
    'BASE:CreateEventDead(EventTime,Initiator,IniObjectCategory)',
    'BASE:CreateEventRemoveUnit(EventTime,Initiator)',
    'BASE:CreateEventTakeoff(EventTime,Initiator)',
    'BASE:CreateEventPlayerEnterAircraft(PlayerUnit)',
    'BASE:onEvent(event)',
    'BASE:ScheduleOnce(Start,SchedulerFunction,...)',
    'BASE:ScheduleRepeat(Start,Repeat,RandomizeFactor,Stop,SchedulerFunction,...)',
    'BASE:ScheduleStop(SchedulerID)',
    'BASE:SetState(Object,Key,Value)',
    'BASE:GetState(Object,Key)',
    'BASE:ClearState(Object,StateName)',
    'BASE:TraceOn()',
    'BASE:TraceOff()',
    'BASE:TraceOnOff(TraceOnOff)',
    'BASE:IsTrace()',
    'BASE:TraceLevel(Level)',
    'BASE:TraceAll(TraceAll)',
    'BASE:TraceClass(Class)',
    'BASE:TraceClassMethod(Class,Method)',
    'BASE:_F(Arguments,DebugInfoCurrentParam,DebugInfoFromParam)',
    'BASE:F(Arguments)',
    'BASE:F2(Arguments)',
    'BASE:F3(Arguments)',
    'BASE:_T(Arguments,DebugInfoCurrentParam,DebugInfoFromParam)',
    'BASE:T(Arguments)',
    'BASE:T2(Arguments)',
    'BASE:T3(Arguments)',
    'BASE:E(Arguments)',
    'BASE:I(Arguments)',
    'ASTAR:New()',
    'ASTAR:SetStartCoordinate(Coordinate)',
    'ASTAR:SetEndCoordinate(Coordinate)',
    'ASTAR:GetNodeFromCoordinate(Coordinate)',
    'ASTAR:AddNode(Node)',
    'ASTAR:AddNodeFromCoordinate(Coordinate)',
    'ASTAR:CheckValidSurfaceType(Node,SurfaceTypes)',
    'ASTAR:SetValidNeighbourFunction(NeighbourFunction,...)',
    'ASTAR:SetValidNeighbourLoS(CorridorWidth)',
    'ASTAR:SetValidNeighbourDistance(MaxDistance)',
    'ASTAR:SetValidNeighbourRoad(MaxDistance)',
    'ASTAR:SetCostFunction(CostFunction,...)',
    'ASTAR:SetCostDist2D()',
    'ASTAR:SetCostDist3D()',
    'ASTAR:SetCostRoad()',
    'ASTAR:CreateGrid(ValidSurfaceTypes,BoxHY,SpaceX,deltaX,deltaY,MarkGrid)',
    'ASTAR.LoS(nodeA,nodeB,corridor)',
    'ASTAR.Road(nodeA,nodeB)',
    'ASTAR.DistMax(nodeA,nodeB,distmax)',
    'ASTAR.Dist2D(nodeA,nodeB)',
    'ASTAR.Dist3D(nodeA,nodeB)',
    'ASTAR.DistRoad(nodeA,nodeB)',
    'ASTAR:FindClosestNode(Coordinate)',
    'ASTAR:FindStartNode()',
    'ASTAR:FindEndNode()',
    'ASTAR:GetPath(ExcludeStartNode,ExcludeEndNode)',
    'ASTAR:_HeuristicCost(nodeA,nodeB)',
    'ASTAR:_IsValidNeighbour(node,neighbor)',
    'ASTAR:_DistNodes(nodeA,nodeB)',
    'ASTAR:_LowestFscore(set,f_score)',
    'ASTAR:_NeighbourNodes(theNode,nodes)',
    'ASTAR:_NotIn(set,theNode)',
    'ASTAR:_UnwindPath(flat_path,map,current_node)',
    'BEACON:New(Positionable)',
    'BEACON:ActivateTACAN(Channel,Mode,Message,Bearing,Duration)',
    'BEACON:ActivateICLS(Channel,Callsign,Duration)',
    'BEACON:ActivateLink4(Frequency,Morse,Duration)',
    'BEACON:AATACAN(TACANChannel,Message,Bearing,BeaconDuration)',
    'BEACON:StopAATACAN()',
    'BEACON:RadioBeacon(FileName,Frequency,Modulation,Power,BeaconDuration)',
    'BEACON:StopRadioBeacon()',
    'BEACON:_TACANToFrequency(TACANChannel,TACANMode)',
    'CONDITION:New(Name)',
    'CONDITION:SetAny(Any)',
    'CONDITION:SetNegateResult(Negate)',
    'CONDITION:SetNoneResult(ReturnValue)',
    'CONDITION:SetDefaultPersistence(IsPersistent)',
    'CONDITION:AddFunction(Function,...)',
    'CONDITION:AddFunctionAny(Function,...)',
    'CONDITION:AddFunctionAll(Function,...)',
    'CONDITION:RemoveFunction(ConditionFunction)',
    'CONDITION:RemoveNonPersistant()',
    'CONDITION:Evaluate(AnyTrue)',
    'CONDITION:_EvalConditionsAll(functions)',
    'CONDITION:_EvalConditionsAny(functions)',
    'CONDITION:_CreateCondition(Ftype,Function,...)',
    'CONDITION.IsTimeGreater(Time,Absolute)',
    'CONDITION.IsRandomSuccess(Probability)',
    'CONDITION.ReturnTrue()',
    'CONDITION.ReturnFalse()',
    'USERFLAG:New(UserFlagName)',
    'USERFLAG:GetName()',
    'USERFLAG:Set(Number,Delay)',
    'USERFLAG:Get()',
    'USERFLAG:Is(Number)',
    'REPORT:New(Title)',
    'REPORT:HasText()',
    'REPORT:SetIndent(Indent)',
    'REPORT:Add(Text)',
    'REPORT:AddIndent(Text,Separator)',
    'REPORT:Text(Delimiter)',
    'REPORT:SetTitle(Title)',
    'REPORT:GetCount()',
    'SCHEDULER:New(MasterObject,SchedulerFunction,SchedulerArguments,Start,Repeat,RandomizeFactor,Stop)',
    'SCHEDULER:Schedule(MasterObject,SchedulerFunction,SchedulerArguments,Start,Repeat,RandomizeFactor,Stop,TraceLevel,Fsm)',
    'SCHEDULER:Start(ScheduleID)',
    'SCHEDULER:Stop(ScheduleID)',
    'SCHEDULER:Remove(ScheduleID)',
    'SCHEDULER:Clear()',
    'SCHEDULER:ShowTrace()',
    'SCHEDULER:NoTrace()',
    'SCHEDULEDISPATCHER:New()',
    'SCHEDULEDISPATCHER:AddSchedule(Scheduler,ScheduleFunction,ScheduleArguments,Start,Repeat,Randomize,Stop,TraceLevel,Fsm)',
    'SCHEDULEDISPATCHER:RemoveSchedule(Scheduler,CallID)',
    'SCHEDULEDISPATCHER:Start(Scheduler,CallID,Info)',
    'SCHEDULEDISPATCHER:Stop(Scheduler,CallID)',
    'SCHEDULEDISPATCHER:Clear(Scheduler)',
    'SCHEDULEDISPATCHER:ShowTrace(Scheduler)',
    'SCHEDULEDISPATCHER:NoTrace(Scheduler)',
    'EVENT:New()',
    'EVENT:Init(EventID,EventClass)',
    'EVENT:RemoveEvent(EventClass,EventID)',
    'EVENT:Reset(EventObject)',
    'EVENT:RemoveAll(EventClass)',
    'EVENT:OnEventForTemplate(EventTemplate,EventFunction,EventClass,EventID)',
    'EVENT:OnEventGeneric(EventFunction,EventClass,EventID)',
    'EVENT:OnEventForUnit(UnitName,EventFunction,EventClass,EventID)',
    'EVENT:OnEventForGroup(GroupName,EventFunction,EventClass,EventID,...)',
    'EVENT:OnBirthForTemplate(EventTemplate,EventFunction,EventClass)',
    'EVENT:OnCrashForTemplate(EventTemplate,EventFunction,EventClass)',
    'EVENT:OnDeadForTemplate(EventTemplate,EventFunction,EventClass)',
    'EVENT:OnLandForTemplate(EventTemplate,EventFunction,EventClass)',
    'EVENT:OnTakeOffForTemplate(EventTemplate,EventFunction,EventClass)',
    'EVENT:OnEngineShutDownForTemplate(EventTemplate,EventFunction,EventClass)',
    'EVENT:CreateEventNewCargo(Cargo)',
    'EVENT:CreateEventDeleteCargo(Cargo)',
    'EVENT:CreateEventNewZone(Zone)',
    'EVENT:CreateEventDeleteZone(Zone)',
    'EVENT:CreateEventNewZoneGoal(ZoneGoal)',
    'EVENT:CreateEventDeleteZoneGoal(ZoneGoal)',
    'EVENT:CreateEventPlayerEnterUnit(PlayerUnit)',
    'EVENT:CreateEventPlayerEnterAircraft(PlayerUnit)',
    'EVENT:onEvent(Event)',
    'EVENTHANDLER:New()',
    'SETTINGS:Set(PlayerName)',
    'SETTINGS:SetMenutextShort(onoff)',
    'SETTINGS:SetMenuStatic(onoff)',
    'SETTINGS:SetMetric()',
    'SETTINGS:SetLocale(Locale)',
    'SETTINGS:GetLocale()',
    'SETTINGS:IsMetric()',
    'SETTINGS:SetImperial()',
    'SETTINGS:IsImperial()',
    'SETTINGS:SetLL_Accuracy(LL_Accuracy)',
    'SETTINGS:GetLL_DDM_Accuracy()',
    'SETTINGS:SetMGRS_Accuracy(MGRS_Accuracy)',
    'SETTINGS:GetMGRS_Accuracy()',
    'SETTINGS:SetMessageTime(MessageType,MessageTime)',
    'SETTINGS:GetMessageTime(MessageType)',
    'SETTINGS:SetA2G_LL_DMS()',
    'SETTINGS:SetA2G_LL_DDM()',
    'SETTINGS:IsA2G_LL_DMS()',
    'SETTINGS:IsA2G_LL_DDM()',
    'SETTINGS:SetA2G_MGRS()',
    'SETTINGS:IsA2G_MGRS()',
    'SETTINGS:SetA2G_BR()',
    'SETTINGS:IsA2G_BR()',
    'SETTINGS:SetA2A_BRAA()',
    'SETTINGS:IsA2A_BRAA()',
    'SETTINGS:SetA2A_BULLS()',
    'SETTINGS:IsA2A_BULLS()',
    'SETTINGS:SetA2A_LL_DMS()',
    'SETTINGS:SetA2A_LL_DDM()',
    'SETTINGS:IsA2A_LL_DMS()',
    'SETTINGS:IsA2A_LL_DDM()',
    'SETTINGS:SetA2A_MGRS()',
    'SETTINGS:IsA2A_MGRS()',
    'SETTINGS:SetSystemMenu(MenuGroup,RootMenu)',
    'SETTINGS:SetPlayerMenuOn()',
    'SETTINGS:SetPlayerMenuOff()',
    'SETTINGS:SetPlayerMenu(PlayerUnit)',
    'SETTINGS:RemovePlayerMenu(PlayerUnit)',
    'SETTINGS:A2GMenuSystem(MenuGroup,RootMenu,A2GSystem)',
    'SETTINGS:A2AMenuSystem(MenuGroup,RootMenu,A2ASystem)',
    'SETTINGS:MenuLL_DDM_Accuracy(MenuGroup,RootMenu,LL_Accuracy)',
    'SETTINGS:MenuMGRS_Accuracy(MenuGroup,RootMenu,MGRS_Accuracy)',
    'SETTINGS:MenuMWSystem(MenuGroup,RootMenu,MW)',
    'SETTINGS:MenuMessageTimingsSystem(MenuGroup,RootMenu,MessageType,MessageTime)',
    'SETTINGS:MenuGroupA2GSystem(PlayerUnit,PlayerGroup,PlayerName,A2GSystem)',
    'SETTINGS:MenuGroupA2ASystem(PlayerUnit,PlayerGroup,PlayerName,A2ASystem)',
    'SETTINGS:MenuGroupLL_DDM_AccuracySystem(PlayerUnit,PlayerGroup,PlayerName,LL_Accuracy)',
    'SETTINGS:MenuGroupMGRS_AccuracySystem(PlayerUnit,PlayerGroup,PlayerName,MGRS_Accuracy)',
    'SETTINGS:MenuGroupMWSystem(PlayerUnit,PlayerGroup,PlayerName,MW)',
    'SETTINGS:MenuGroupMessageTimingsSystem(PlayerUnit,PlayerGroup,PlayerName,MessageType,MessageTime)',
    'SETTINGS:SetEraWWII()',
    'SETTINGS:SetEraKorea()',
    'SETTINGS:SetEraCold()',
    'SETTINGS:SetEraModern()',
    'MENU_INDEX:ParentPath(ParentMenu,MenuText)',
    'MENU_INDEX:PrepareMission()',
    'MENU_INDEX:PrepareCoalition(CoalitionSide)',
    'MENU_INDEX:PrepareGroup(Group)',
    'MENU_INDEX:HasMissionMenu(Path)',
    'MENU_INDEX:SetMissionMenu(Path,Menu)',
    'MENU_INDEX:ClearMissionMenu(Path)',
    'MENU_INDEX:HasCoalitionMenu(Coalition,Path)',
    'MENU_INDEX:SetCoalitionMenu(Coalition,Path,Menu)',
    'MENU_INDEX:ClearCoalitionMenu(Coalition,Path)',
    'MENU_INDEX:HasGroupMenu(Group,Path)',
    'MENU_INDEX:SetGroupMenu(Group,Path,Menu)',
    'MENU_INDEX:ClearGroupMenu(Group,Path)',
    'MENU_INDEX:Refresh(Group)',
    'MENU_BASE:New(MenuText,ParentMenu)',
    'MENU_BASE:SetParentMenu(MenuText,Menu)',
    'MENU_BASE:ClearParentMenu(MenuText)',
    'MENU_BASE:SetRemoveParent(RemoveParent)',
    'MENU_BASE:GetMenu(MenuText)',
    'MENU_BASE:SetStamp(MenuStamp)',
    'MENU_BASE:GetStamp()',
    'MENU_BASE:SetTime(MenuStamp)',
    'MENU_BASE:SetTag(MenuTag)',
    'MENU_COMMAND_BASE:New(MenuText,ParentMenu,CommandMenuFunction,CommandMenuArguments)',
    'MENU_COMMAND_BASE:SetCommandMenuFunction(CommandMenuFunction)',
    'MENU_COMMAND_BASE:SetCommandMenuArguments(CommandMenuArguments)',
    'MENU_MISSION:New(MenuText,ParentMenu)',
    'MENU_MISSION:Refresh()',
    'MENU_MISSION:RemoveSubMenus()',
    'MENU_MISSION:Remove(MenuStamp,MenuTag)',
    'MENU_MISSION_COMMAND:New(MenuText,ParentMenu,CommandMenuFunction,...)',
    'MENU_MISSION_COMMAND:Refresh()',
    'MENU_MISSION_COMMAND:Remove()',
    'MENU_COALITION:New(Coalition,MenuText,ParentMenu)',
    'MENU_COALITION:Refresh()',
    'MENU_COALITION:RemoveSubMenus()',
    'MENU_COALITION:Remove(MenuStamp,MenuTag)',
    'MENU_COALITION_COMMAND:New(Coalition,MenuText,ParentMenu,CommandMenuFunction,...)',
    'MENU_COALITION_COMMAND:Refresh()',
    'MENU_COALITION_COMMAND:Remove(MenuStamp,MenuTag)',
    'MENU_GROUP:New(Group,MenuText,ParentMenu)',
    'MENU_GROUP:Refresh()',
    'MENU_GROUP:RefreshAndOrderByTag()',
    'MENU_GROUP:RemoveSubMenus(MenuStamp,MenuTag)',
    'MENU_GROUP:Remove(MenuStamp,MenuTag)',
    'MENU_GROUP_COMMAND:New(Group,MenuText,ParentMenu,CommandMenuFunction,...)',
    'MENU_GROUP_COMMAND:Refresh()',
    'MENU_GROUP_COMMAND:Remove(MenuStamp,MenuTag)',
    'MENU_GROUP_DELAYED:New(Group,MenuText,ParentMenu)',
    'MENU_GROUP_DELAYED:Set()',
    'MENU_GROUP_DELAYED:Refresh()',
    'MENU_GROUP_DELAYED:RemoveSubMenus(MenuStamp,MenuTag)',
    'MENU_GROUP_DELAYED:Remove(MenuStamp,MenuTag)',
    'MENU_GROUP_COMMAND_DELAYED:New(Group,MenuText,ParentMenu,CommandMenuFunction,...)',
    'MENU_GROUP_COMMAND_DELAYED:Set()',
    'MENU_GROUP_COMMAND_DELAYED:Refresh()',
    'MENU_GROUP_COMMAND_DELAYED:Remove(MenuStamp,MenuTag)',
    'ZONE_BASE:New(ZoneName)',
    'ZONE_BASE:GetName()',
    'ZONE_BASE:SetName(ZoneName)',
    'ZONE_BASE:IsVec2InZone(Vec2)',
    'ZONE_BASE:IsVec3InZone(Vec3)',
    'ZONE_BASE:IsCoordinateInZone(Coordinate)',
    'ZONE_BASE:IsPointVec2InZone(Coordinate)',
    'ZONE_BASE:IsPointVec3InZone(PointVec3)',
    'ZONE_BASE:GetVec2()',
    'ZONE_BASE:GetPointVec2()',
    'ZONE_BASE:GetVec3(Height)',
    'ZONE_BASE:GetPointVec3(Height)',
    'ZONE_BASE:GetCoordinate(Height)',
    'ZONE_BASE:Get2DDistance(Coordinate)',
    'ZONE_BASE:GetRandomVec2()',
    'ZONE_BASE:GetRandomPointVec2()',
    'ZONE_BASE:GetRandomPointVec3()',
    'ZONE_BASE:GetBoundingSquare()',
    'ZONE_BASE:GetSurfaceType()',
    'ZONE_BASE:BoundZone()',
    'ZONE_BASE:SetDrawCoalition(Coalition)',
    'ZONE_BASE:GetDrawCoalition()',
    'ZONE_BASE:SetColor(RGBcolor,Alpha)',
    'ZONE_BASE:GetColor()',
    'ZONE_BASE:GetColorRGB()',
    'ZONE_BASE:GetColorAlpha()',
    'ZONE_BASE:SetFillColor(RGBcolor,Alpha)',
    'ZONE_BASE:GetFillColor()',
    'ZONE_BASE:GetFillColorRGB()',
    'ZONE_BASE:GetFillColorAlpha()',
    'ZONE_BASE:UndrawZone(Delay)',
    'ZONE_BASE:GetDrawID()',
    'ZONE_BASE:SmokeZone(SmokeColor)',
    'ZONE_BASE:SetZoneProbability(ZoneProbability)',
    'ZONE_BASE:GetZoneProbability()',
    'ZONE_BASE:GetZoneMaybe()',
    'ZONE_BASE:SetCheckTime(seconds)',
    'ZONE_BASE:Trigger(Objects)',
    'ZONE_BASE:_TriggerCheck(fromstart)',
    'ZONE_BASE:onafterTriggerRunCheck(From,Event,To)',
    'ZONE_BASE:GetProperty(PropertyName)',
    'ZONE_BASE:GetAllProperties()',
    'ZONE_RADIUS:New(ZoneName,Vec2,Radius,DoNotRegisterZone)',
    'ZONE_RADIUS:UpdateFromVec2(Vec2,Radius)',
    'ZONE_RADIUS:UpdateFromVec3(Vec3,Radius)',
    'ZONE_RADIUS:MarkZone(Points)',
    'ZONE_RADIUS:DrawZone(Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly)',
    'ZONE_RADIUS:BoundZone(Points,CountryID,UnBound)',
    'ZONE_RADIUS:SmokeZone(SmokeColor,Points,AddHeight,AngleOffset)',
    'ZONE_RADIUS:FlareZone(FlareColor,Points,Azimuth,AddHeight)',
    'ZONE_RADIUS:GetRadius()',
    'ZONE_RADIUS:SetRadius(Radius)',
    'ZONE_RADIUS:GetVec2()',
    'ZONE_RADIUS:SetVec2(Vec2)',
    'ZONE_RADIUS:GetVec3(Height)',
    'ZONE_RADIUS:Scan(ObjectCategories,UnitCategories)',
    'ZONE_RADIUS:RemoveJunk()',
    'ZONE_RADIUS:GetScannedUnits()',
    'ZONE_RADIUS:GetScannedSetUnit()',
    'ZONE_RADIUS:GetScannedSetGroup()',
    'ZONE_RADIUS:CountScannedCoalitions()',
    'ZONE_RADIUS:CheckScannedCoalition(Coalition)',
    'ZONE_RADIUS:GetScannedCoalition(Coalition)',
    'ZONE_RADIUS:GetScannedSceneryType(SceneryType)',
    'ZONE_RADIUS:GetScannedScenery()',
    'ZONE_RADIUS:GetScannedSceneryObjects()',
    'ZONE_RADIUS:GetScannedSetScenery()',
    'ZONE_RADIUS:IsAllInZoneOfCoalition(Coalition)',
    'ZONE_RADIUS:IsAllInZoneOfOtherCoalition(Coalition)',
    'ZONE_RADIUS:IsSomeInZoneOfCoalition(Coalition)',
    'ZONE_RADIUS:IsNoneInZoneOfCoalition(Coalition)',
    'ZONE_RADIUS:IsNoneInZone()',
    'ZONE_RADIUS:SearchZone(EvaluateFunction,ObjectCategories)',
    'ZONE_RADIUS:IsVec2InZone(Vec2)',
    'ZONE_RADIUS:IsVec3InZone(Vec3)',
    'ZONE_RADIUS:GetRandomVec2(inner,outer,surfacetypes)',
    'ZONE_RADIUS:GetRandomPointVec2(inner,outer)',
    'ZONE_RADIUS:GetRandomVec3(inner,outer)',
    'ZONE_RADIUS:GetRandomPointVec3(inner,outer)',
    'ZONE_RADIUS:GetRandomCoordinate(inner,outer,surfacetypes)',
    'ZONE_RADIUS:GetRandomCoordinateWithoutBuildings(inner,outer,distance,markbuildings,markfinal)',
    'ZONE:New(ZoneName)',
    'ZONE:FindByName(ZoneName)',
    'ZONE_UNIT:New(ZoneName,ZoneUNIT,Radius,Offset)',
    'ZONE_UNIT:GetVec2()',
    'ZONE_UNIT:GetRandomVec2()',
    'ZONE_UNIT:GetVec3(Height)',
    'ZONE_GROUP:New(ZoneName,ZoneGROUP,Radius)',
    'ZONE_GROUP:GetVec2()',
    'ZONE_GROUP:GetRandomVec2()',
    'ZONE_GROUP:GetRandomPointVec2(inner,outer)',
    '_ZONE_TRIANGLE:New(p1,p2,p3)',
    '_ZONE_TRIANGLE:ContainsPoint(pt,points)',
    '_ZONE_TRIANGLE:GetRandomVec2(points)',
    '_ZONE_TRIANGLE:Draw(Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly)',
    '_ZONE_TRIANGLE:Fill(Coalition,FillColor,FillAlpha,ReadOnly)',
    'ZONE_POLYGON_BASE:New(ZoneName,PointsArray)',
    'ZONE_POLYGON_BASE:_Triangulate()',
    'ZONE_POLYGON_BASE:UpdateFromVec2(Vec2Array)',
    'ZONE_POLYGON_BASE:UpdateFromVec3(Vec3Array)',
    'ZONE_POLYGON_BASE:_CalculateSurfaceArea()',
    'ZONE_POLYGON_BASE:GetVec2()',
    'ZONE_POLYGON_BASE:GetVertexVec2(Index)',
    'ZONE_POLYGON_BASE:GetVertexVec3(Index)',
    'ZONE_POLYGON_BASE:GetVertexCoordinate(Index)',
    'ZONE_POLYGON_BASE:GetVerticiesVec2()',
    'ZONE_POLYGON_BASE:GetVerticiesVec3()',
    'ZONE_POLYGON_BASE:GetVerticiesCoordinates()',
    'ZONE_POLYGON_BASE:Flush()',
    'ZONE_POLYGON_BASE:BoundZone(UnBound)',
    'ZONE_POLYGON_BASE:DrawZone(Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly,IncludeTriangles)',
    'ZONE_POLYGON_BASE:ReFill(Color,Alpha)',
    'ZONE_POLYGON_BASE:ReDrawBorderline(Color,Alpha,LineType)',
    'ZONE_POLYGON_BASE:GetSurfaceArea()',
    'ZONE_POLYGON_BASE:GetRadius()',
    'ZONE_POLYGON_BASE:GetZoneRadius(ZoneName,DoNotRegisterZone)',
    'ZONE_POLYGON_BASE:GetZoneQuad(ZoneName,DoNotRegisterZone)',
    'ZONE_POLYGON_BASE:RemoveJunk(Height)',
    'ZONE_POLYGON_BASE:SmokeZone(SmokeColor,Segments)',
    'ZONE_POLYGON_BASE:FlareZone(FlareColor,Segments,Azimuth,AddHeight)',
    'ZONE_POLYGON_BASE:IsVec2InZone(Vec2)',
    'ZONE_POLYGON_BASE:IsVec3InZone(Vec3)',
    'ZONE_POLYGON_BASE:GetRandomVec2()',
    'ZONE_POLYGON_BASE:GetRandomPointVec2()',
    'ZONE_POLYGON_BASE:GetRandomPointVec3()',
    'ZONE_POLYGON_BASE:GetRandomCoordinate()',
    'ZONE_POLYGON_BASE:GetBoundingSquare()',
    'ZONE_POLYGON_BASE:GetBoundingVec2()',
    'ZONE_POLYGON_BASE:Boundary(Coalition,Color,Radius,Alpha,Segments,Closed)',
    'ZONE_POLYGON:New(ZoneName,ZoneGroup)',
    'ZONE_POLYGON:NewFromPointsArray(ZoneName,PointsArray)',
    'ZONE_POLYGON:NewFromGroupName(GroupName)',
    'ZONE_POLYGON:NewFromDrawing(DrawingName)',
    'ZONE_POLYGON:FindByName(ZoneName)',
    'ZONE_POLYGON:Scan(ObjectCategories,UnitCategories)',
    'ZONE_POLYGON:GetScannedUnits()',
    'ZONE_POLYGON:GetScannedSetUnit()',
    'ZONE_POLYGON:GetScannedSetGroup()',
    'ZONE_POLYGON:CountScannedCoalitions()',
    'ZONE_POLYGON:CheckScannedCoalition(Coalition)',
    'ZONE_POLYGON:GetScannedCoalition(Coalition)',
    'ZONE_POLYGON:GetScannedSceneryType(SceneryType)',
    'ZONE_POLYGON:GetScannedSceneryObjects()',
    'ZONE_POLYGON:GetScannedScenery()',
    'ZONE_POLYGON:GetScannedSetScenery()',
    'ZONE_POLYGON:IsAllInZoneOfCoalition(Coalition)',
    'ZONE_POLYGON:IsAllInZoneOfOtherCoalition(Coalition)',
    'ZONE_POLYGON:IsSomeInZoneOfCoalition(Coalition)',
    'ZONE_POLYGON:IsNoneInZoneOfCoalition(Coalition)',
    'ZONE_POLYGON:IsNoneInZone()',
    'ZONE_ELASTIC:New(ZoneName,Points)',
    'ZONE_ELASTIC:AddVertex2D(Vec2)',
    'ZONE_ELASTIC:AddVertex3D(Vec3)',
    'ZONE_ELASTIC:AddSetGroup(GroupSet)',
    'ZONE_ELASTIC:Update(Delay,Draw)',
    'ZONE_ELASTIC:StartUpdate(Tstart,dT,Tstop,Draw)',
    'ZONE_ELASTIC:StopUpdate(Delay)',
    'ZONE_ELASTIC:_ConvexHull(pl)',
    'ZONE_OVAL:New(name,vec2,major_axis,minor_axis,angle)',
    'ZONE_OVAL:NewFromDrawing(DrawingName)',
    'ZONE_OVAL:GetMajorAxis()',
    'ZONE_OVAL:GetMinorAxis()',
    'ZONE_OVAL:GetAngle()',
    'ZONE_OVAL:GetVec2()',
    'ZONE_OVAL:IsVec2InZone(vec2)',
    'ZONE_OVAL:GetBoundingSquare()',
    'ZONE_OVAL:PointsOnEdge(num_points)',
    'ZONE_OVAL:GetRandomVec2()',
    'ZONE_OVAL:GetRandomPointVec2()',
    'ZONE_OVAL:GetRandomPointVec3()',
    'ZONE_OVAL:DrawZone(Coalition,Color,Alpha,FillColor,FillAlpha,LineType)',
    'ZONE_OVAL:UndrawZone()',
    'ZONE_AIRBASE:New(AirbaseName,Radius)',
    'ZONE_AIRBASE:GetAirbase()',
    'ZONE_AIRBASE:GetVec2()',
    'ZONE_AIRBASE:GetRandomPointVec2(inner,outer)',
    'ZONE_DETECTION:New(ZoneName,Detection,Radius)',
    'ZONE_DETECTION:BoundZone(Points,CountryID,UnBound)',
    'ZONE_DETECTION:SmokeZone(SmokeColor,Points,AddHeight,AngleOffset)',
    'ZONE_DETECTION:FlareZone(FlareColor,Points,Azimuth,AddHeight)',
    'ZONE_DETECTION:GetRadius()',
    'ZONE_DETECTION:SetRadius(Radius)',
    'ZONE_DETECTION:IsVec2InZone(Vec2)',
    'ZONE_DETECTION:IsVec3InZone(Vec3)',
    'DATABASE:New()',
    'DATABASE:FindUnit(UnitName)',
    'DATABASE:AddUnit(DCSUnitName)',
    'DATABASE:DeleteUnit(DCSUnitName)',
    'DATABASE:AddStatic(DCSStaticName)',
    'DATABASE:DeleteStatic(DCSStaticName)',
    'DATABASE:FindStatic(StaticName)',
    'DATABASE:AddAirbase(AirbaseName)',
    'DATABASE:DeleteAirbase(AirbaseName)',
    'DATABASE:FindAirbase(AirbaseName)',
    'DATABASE:AddStorage(AirbaseName)',
    'DATABASE:DeleteStorage(AirbaseName)',
    'DATABASE:FindStorage(AirbaseName)',
    'DATABASE:FindZone(ZoneName)',
    'DATABASE:AddZone(ZoneName,Zone)',
    'DATABASE:DeleteZone(ZoneName)',
    'DATABASE:AddPathline(PathlineName,Pathline)',
    'DATABASE:FindPathline(PathlineName)',
    'DATABASE:DeletePathline(PathlineName)',
    'DATABASE:_RegisterZones()',
    'DATABASE:FindZoneGoal(ZoneName)',
    'DATABASE:AddZoneGoal(ZoneName,Zone)',
    'DATABASE:DeleteZoneGoal(ZoneName)',
    'DATABASE:FindOpsZone(ZoneName)',
    'DATABASE:AddOpsZone(OpsZone)',
    'DATABASE:DeleteOpsZone(ZoneName)',
    'DATABASE:AddCargo(Cargo)',
    'DATABASE:DeleteCargo(CargoName)',
    'DATABASE:FindCargo(CargoName)',
    'DATABASE:IsCargo(TemplateName)',
    'DATABASE:_RegisterCargos()',
    'DATABASE:FindClient(ClientName)',
    'DATABASE:AddClient(ClientName)',
    'DATABASE:FindGroup(GroupName)',
    'DATABASE:AddGroup(GroupName)',
    'DATABASE:AddPlayer(UnitName,PlayerName)',
    'DATABASE:DeletePlayer(UnitName,PlayerName)',
    'DATABASE:GetPlayers()',
    'DATABASE:GetPlayerUnits()',
    'DATABASE:GetPlayersJoined()',
    'DATABASE:Spawn(SpawnTemplate)',
    'DATABASE:SetStatusGroup(GroupName,Status)',
    'DATABASE:GetStatusGroup(GroupName)',
    'DATABASE:_RegisterGroupTemplate(GroupTemplate,CoalitionSide,CategoryID,CountryID,GroupName)',
    'DATABASE:GetGroupTemplate(GroupName)',
    'DATABASE:_RegisterStaticTemplate(StaticTemplate,CoalitionID,CategoryID,CountryID)',
    'DATABASE:GetStaticGroupTemplate(StaticName)',
    'DATABASE:GetStaticUnitTemplate(StaticName)',
    'DATABASE:GetGroupNameFromUnitName(UnitName)',
    'DATABASE:GetGroupTemplateFromUnitName(UnitName)',
    'DATABASE:GetUnitTemplateFromUnitName(UnitName)',
    'DATABASE:GetCoalitionFromClientTemplate(ClientName)',
    'DATABASE:GetCategoryFromClientTemplate(ClientName)',
    'DATABASE:GetCountryFromClientTemplate(ClientName)',
    'DATABASE:GetCoalitionFromAirbase(AirbaseName)',
    'DATABASE:GetCategoryFromAirbase(AirbaseName)',
    'DATABASE:_RegisterPlayers()',
    'DATABASE:_RegisterGroupsAndUnits()',
    'DATABASE:_RegisterClients()',
    'DATABASE:_RegisterStatics()',
    'DATABASE:_RegisterAirbases()',
    'DATABASE:_RegisterAirbase(airbase)',
    'DATABASE:_EventOnBirth(Event)',
    'DATABASE:_EventOnDeadOrCrash(Event)',
    'DATABASE:_EventOnPlayerEnterUnit(Event)',
    'DATABASE:_EventOnPlayerLeaveUnit(Event)',
    'DATABASE:ForEach(IteratorFunction,FinalizeFunction,arg,Set)',
    'DATABASE:ForEachStatic(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:ForEachUnit(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:ForEachGroup(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:ForEachPlayer(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:ForEachPlayerJoined(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:ForEachPlayerUnit(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:ForEachClient(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:ForEachCargo(IteratorFunction,FinalizeFunction,...)',
    'DATABASE:OnEventNewCargo(EventData)',
    'DATABASE:OnEventDeleteCargo(EventData)',
    'DATABASE:OnEventNewZone(EventData)',
    'DATABASE:OnEventDeleteZone(EventData)',
    'DATABASE:GetPlayerSettings(PlayerName)',
    'DATABASE:SetPlayerSettings(PlayerName,Settings)',
    'DATABASE:AddOpsGroup(opsgroup)',
    'DATABASE:GetOpsGroup(groupname)',
    'DATABASE:FindOpsGroup(groupname)',
    'DATABASE:FindOpsGroupFromUnit(unitname)',
    'DATABASE:AddFlightControl(flightcontrol)',
    'DATABASE:GetFlightControl(airbasename)',
    'DATABASE:_RegisterTemplates()',
    'DATABASE:AccountHits(Event)',
    'DATABASE:AccountDestroys(Event)',
    'SET_BASE:New(Database)',
    'SET_BASE:FilterFunction(ConditionFunction,...)',
    'SET_BASE:_EvalFilterFunctions(Object)',
    'SET_BASE:Clear(TriggerEvent)',
    'SET_BASE:_Find(ObjectName)',
    'SET_BASE:GetSet()',
    'SET_BASE:GetSetNames()',
    'SET_BASE:GetSetObjects()',
    'SET_BASE:Remove(ObjectName,NoTriggerEvent)',
    'SET_BASE:Add(ObjectName,Object)',
    'SET_BASE:AddObject(Object)',
    'SET_BASE:SortByName()',
    'SET_BASE:AddSet(SetToAdd)',
    'SET_BASE:GetSetUnion(SetB)',
    'SET_BASE:GetSetIntersection(SetB)',
    'SET_BASE:GetSetComplement(SetB)',
    'SET_BASE:CompareSets(SetA,SetB)',
    'SET_BASE:Get(ObjectName)',
    'SET_BASE:GetFirst()',
    'SET_BASE:GetLast()',
    'SET_BASE:GetRandom()',
    'SET_BASE:Count()',
    'SET_BASE:SetDatabase(BaseSet)',
    'SET_BASE:SetIteratorIntervals(YieldInterval,TimeInterval)',
    'SET_BASE:SetSomeIteratorLimit(Limit)',
    'SET_BASE:GetSomeIteratorLimit()',
    'SET_BASE:FilterOnce()',
    'SET_BASE:FilterClear()',
    'SET_BASE:_FilterStart()',
    'SET_BASE:FilterDeads()',
    'SET_BASE:FilterCrashes()',
    'SET_BASE:FilterStop()',
    'SET_BASE:FindNearestObjectFromPointVec2(PointVec2)',
    'SET_BASE:_EventOnBirth(Event)',
    'SET_BASE:_EventOnDeadOrCrash(Event)',
    'SET_BASE:ForEach(IteratorFunction,arg,Set,Function,FunctionArguments)',
    'SET_BASE:ForSome(IteratorFunction,arg,Set,Function,FunctionArguments)',
    'SET_BASE:IsIncludeObject(Object)',
    'SET_BASE:IsInSet(Object)',
    'SET_BASE:IsNotInSet(Object)',
    'SET_BASE:GetObjectNames()',
    'SET_BASE:Flush(MasterObject)',
    'SET_GROUP:New()',
    'SET_GROUP:GetAliveSet()',
    'SET_GROUP:GetUnitTypeNames()',
    'SET_GROUP:AddGroup(group,DontSetCargoBayLimit)',
    'SET_GROUP:AddGroupsByName(AddGroupNames)',
    'SET_GROUP:RemoveGroupsByName(RemoveGroupNames)',
    'SET_GROUP:FindGroup(GroupName)',
    'SET_GROUP:FindNearestGroupFromPointVec2(PointVec2)',
    'SET_GROUP:FilterZones(Zones,Clear)',
    'SET_GROUP:FilterCoalitions(Coalitions,Clear)',
    'SET_GROUP:FilterCategories(Categories,Clear)',
    'SET_GROUP:FilterCategoryGround()',
    'SET_GROUP:FilterCategoryAirplane()',
    'SET_GROUP:FilterCategoryHelicopter()',
    'SET_GROUP:FilterCategoryShip()',
    'SET_GROUP:FilterCategoryStructure()',
    'SET_GROUP:FilterCountries(Countries)',
    'SET_GROUP:FilterPrefixes(Prefixes)',
    'SET_GROUP:_ContinousZoneFilter()',
    'SET_GROUP:FilterActive(Active)',
    'SET_GROUP:FilterStart()',
    'SET_GROUP:FilterZoneTimer(Seconds)',
    'SET_GROUP:FilterStop()',
    'SET_GROUP:_EventOnDeadOrCrash(Event)',
    'SET_GROUP:AddInDatabase(Event)',
    'SET_GROUP:FindInDatabase(Event)',
    'SET_GROUP:ForEachGroup(IteratorFunction,...)',
    'SET_GROUP:ForSomeGroup(IteratorFunction,...)',
    'SET_GROUP:ForEachGroupAlive(IteratorFunction,...)',
    'SET_GROUP:ForSomeGroupAlive(IteratorFunction,...)',
    'SET_GROUP:Activate(Delay)',
    'SET_GROUP:ForEachGroupCompletelyInZone(ZoneObject,IteratorFunction,...)',
    'SET_GROUP:ForEachGroupPartlyInZone(ZoneObject,IteratorFunction,...)',
    'SET_GROUP:ForEachGroupNotInZone(ZoneObject,IteratorFunction,...)',
    'SET_GROUP:AllCompletelyInZone(Zone)',
    'SET_GROUP:ForEachGroupAnyInZone(ZoneObject,IteratorFunction,...)',
    'SET_GROUP:AnyCompletelyInZone(Zone)',
    'SET_GROUP:AnyInZone(Zone)',
    'SET_GROUP:AnyPartlyInZone(Zone)',
    'SET_GROUP:NoneInZone(Zone)',
    'SET_GROUP:CountInZone(Zone)',
    'SET_GROUP:CountUnitInZone(Zone)',
    'SET_GROUP:CountAlive()',
    'SET_GROUP:IsIncludeObject(MGroup)',
    'SET_GROUP:GetClosestGroup(Coordinate,Coalitions)',
    'SET_GROUP:SetCargoBayWeightLimit()',
    'SET_UNIT:New()',
    'SET_UNIT:AddUnit(Unit)',
    'SET_UNIT:AddUnitsByName(AddUnitNames)',
    'SET_UNIT:RemoveUnitsByName(RemoveUnitNames)',
    'SET_UNIT:FindUnit(UnitName)',
    'SET_UNIT:FilterCoalitions(Coalitions)',
    'SET_UNIT:FilterCategories(Categories)',
    'SET_UNIT:FilterTypes(Types)',
    'SET_UNIT:FilterCountries(Countries)',
    'SET_UNIT:FilterPrefixes(Prefixes)',
    'SET_UNIT:FilterZones(Zones)',
    'SET_UNIT:FilterActive(Active)',
    'SET_UNIT:FilterHasRadar(RadarTypes)',
    'SET_UNIT:FilterHasSEAD()',
    'SET_UNIT:CountAlive()',
    'SET_UNIT:GetAliveSet()',
    'SET_UNIT:_ContinousZoneFilter()',
    'SET_UNIT:FilterZoneTimer(Seconds)',
    'SET_UNIT:FilterStop()',
    'SET_UNIT:FilterStart()',
    'SET_UNIT:AddInDatabase(Event)',
    'SET_UNIT:FindInDatabase(Event)',
    'SET_UNIT:IsPartiallyInZone(ZoneTest)',
    'SET_UNIT:IsNotInZone(Zone)',
    'SET_UNIT:ForEachUnit(IteratorFunction,...)',
    'SET_UNIT:GetSetPerThreatLevel(FromThreatLevel,ToThreatLevel)',
    'SET_UNIT:ForEachUnitPerThreatLevel(FromThreatLevel,ToThreatLevel,IteratorFunction,...)',
    'SET_UNIT:ForEachUnitCompletelyInZone(ZoneObject,IteratorFunction,...)',
    'SET_UNIT:ForEachUnitNotInZone(ZoneObject,IteratorFunction,...)',
    'SET_UNIT:GetUnitTypes()',
    'SET_UNIT:GetUnitTypesText()',
    'SET_UNIT:GetUnitThreatLevels()',
    'SET_UNIT:CalculateThreatLevelA2G()',
    'SET_UNIT:GetCoordinate()',
    'SET_UNIT:GetVelocity()',
    'SET_UNIT:GetHeading()',
    'SET_UNIT:HasRadar(RadarType)',
    'SET_UNIT:HasSEAD()',
    'SET_UNIT:HasGroundUnits()',
    'SET_UNIT:HasAirUnits()',
    'SET_UNIT:HasFriendlyUnits(FriendlyCoalition)',
    'SET_UNIT:IsIncludeObject(MUnit)',
    'SET_UNIT:GetTypeNames(Delimiter)',
    'SET_UNIT:SetCargoBayWeightLimit()',
    'SET_STATIC:New()',
    'SET_STATIC:AddStatic(AddStatic)',
    'SET_STATIC:AddStaticsByName(AddStaticNames)',
    'SET_STATIC:RemoveStaticsByName(RemoveStaticNames)',
    'SET_STATIC:FindStatic(StaticName)',
    'SET_STATIC:FilterCoalitions(Coalitions)',
    'SET_STATIC:FilterZones(Zones)',
    'SET_STATIC:FilterCategories(Categories)',
    'SET_STATIC:FilterTypes(Types)',
    'SET_STATIC:FilterCountries(Countries)',
    'SET_STATIC:FilterPrefixes(Prefixes)',
    'SET_STATIC:FilterStart()',
    'SET_STATIC:CountAlive()',
    'SET_STATIC:AddInDatabase(Event)',
    'SET_STATIC:FindInDatabase(Event)',
    'SET_STATIC:IsPartiallyInZone(Zone)',
    'SET_STATIC:IsNotInZone(Zone)',
    'SET_STATIC:ForEachStaticInZone(IteratorFunction,...)',
    'SET_STATIC:ForEachStatic(IteratorFunction,...)',
    'SET_STATIC:ForEachStaticCompletelyInZone(ZoneObject,IteratorFunction,...)',
    'SET_STATIC:ForEachStaticNotInZone(ZoneObject,IteratorFunction,...)',
    'SET_STATIC:GetStaticTypes()',
    'SET_STATIC:GetStaticTypesText()',
    'SET_STATIC:GetCoordinate()',
    'SET_STATIC:GetVelocity()',
    'SET_STATIC:GetHeading()',
    'SET_STATIC:CalculateThreatLevelA2G()',
    'SET_STATIC:IsIncludeObject(MStatic)',
    'SET_STATIC:GetTypeNames(Delimiter)',
    'SET_STATIC:GetClosestStatic(Coordinate,Coalitions)',
    'SET_CLIENT:New()',
    'SET_CLIENT:AddClientsByName(AddClientNames)',
    'SET_CLIENT:RemoveClientsByName(RemoveClientNames)',
    'SET_CLIENT:FindClient(ClientName)',
    'SET_CLIENT:FilterCallsigns(Callsigns)',
    'SET_CLIENT:FilterPlayernames(Playernames)',
    'SET_CLIENT:FilterCoalitions(Coalitions)',
    'SET_CLIENT:FilterCategories(Categories)',
    'SET_CLIENT:FilterTypes(Types)',
    'SET_CLIENT:FilterCountries(Countries)',
    'SET_CLIENT:FilterPrefixes(Prefixes)',
    'SET_CLIENT:FilterActive(Active)',
    'SET_CLIENT:FilterZones(Zones)',
    'SET_CLIENT:_ContinousZoneFilter()',
    'SET_CLIENT:FilterZoneTimer(Seconds)',
    'SET_CLIENT:FilterStop()',
    'SET_CLIENT:FilterStart()',
    'SET_CLIENT:_EventPlayerEnterUnit(Event)',
    'SET_CLIENT:_EventPlayerLeaveUnit(Event)',
    'SET_CLIENT:AddInDatabase(Event)',
    'SET_CLIENT:FindInDatabase(Event)',
    'SET_CLIENT:ForEachClient(IteratorFunction,...)',
    'SET_CLIENT:ForEachClientInZone(ZoneObject,IteratorFunction,...)',
    'SET_CLIENT:ForEachClientNotInZone(ZoneObject,IteratorFunction,...)',
    'SET_CLIENT:CountAlive()',
    'SET_CLIENT:GetAliveSet()',
    'SET_CLIENT:IsIncludeObject(MClient)',
    'SET_PLAYER:New()',
    'SET_PLAYER:AddClientsByName(AddClientNames)',
    'SET_PLAYER:RemoveClientsByName(RemoveClientNames)',
    'SET_PLAYER:FindClient(PlayerName)',
    'SET_PLAYER:FilterCoalitions(Coalitions)',
    'SET_PLAYER:FilterZones(Zones)',
    'SET_PLAYER:FilterCategories(Categories)',
    'SET_PLAYER:FilterTypes(Types)',
    'SET_PLAYER:FilterCountries(Countries)',
    'SET_PLAYER:FilterPrefixes(Prefixes)',
    'SET_PLAYER:FilterStart()',
    'SET_PLAYER:AddInDatabase(Event)',
    'SET_PLAYER:FindInDatabase(Event)',
    'SET_PLAYER:ForEachPlayer(IteratorFunction,...)',
    'SET_PLAYER:ForEachPlayerInZone(ZoneObject,IteratorFunction,...)',
    'SET_PLAYER:ForEachPlayerNotInZone(ZoneObject,IteratorFunction,...)',
    'SET_PLAYER:IsIncludeObject(MClient)',
    'SET_AIRBASE:New()',
    'SET_AIRBASE:AddAirbase(airbase)',
    'SET_AIRBASE:AddAirbasesByName(AddAirbaseNames)',
    'SET_AIRBASE:RemoveAirbasesByName(RemoveAirbaseNames)',
    'SET_AIRBASE:FindAirbase(AirbaseName)',
    'SET_AIRBASE:FindAirbaseInRange(Coordinate,Range)',
    'SET_AIRBASE:GetRandomAirbase()',
    'SET_AIRBASE:FilterCoalitions(Coalitions)',
    'SET_AIRBASE:FilterCategories(Categories)',
    'SET_AIRBASE:FilterStart()',
    'SET_AIRBASE:OnEventBaseCaptured(EventData)',
    'SET_AIRBASE:OnEventDead(EventData)',
    'SET_AIRBASE:AddInDatabase(Event)',
    'SET_AIRBASE:FindInDatabase(Event)',
    'SET_AIRBASE:ForEachAirbase(IteratorFunction,...)',
    'SET_AIRBASE:FindNearestAirbaseFromPointVec2(PointVec2)',
    'SET_AIRBASE:IsIncludeObject(MAirbase)',
    'SET_CARGO:New()',
    'SET_CARGO:AddCargo(Cargo)',
    'SET_CARGO:AddCargosByName(AddCargoNames)',
    'SET_CARGO:RemoveCargosByName(RemoveCargoNames)',
    'SET_CARGO:FindCargo(CargoName)',
    'SET_CARGO:FilterCoalitions(Coalitions)',
    'SET_CARGO:FilterTypes(Types)',
    'SET_CARGO:FilterCountries(Countries)',
    'SET_CARGO:FilterPrefixes(Prefixes)',
    'SET_CARGO:FilterStart()',
    'SET_CARGO:FilterStop()',
    'SET_CARGO:AddInDatabase(Event)',
    'SET_CARGO:FindInDatabase(Event)',
    'SET_CARGO:ForEachCargo(IteratorFunction,...)',
    'SET_CARGO:FindNearestCargoFromPointVec2(PointVec2)',
    'SET_CARGO:FirstCargoWithState(State)',
    'SET_CARGO:FirstCargoWithStateAndNotDeployed(State)',
    'SET_CARGO:FirstCargoUnLoaded()',
    'SET_CARGO:FirstCargoUnLoadedAndNotDeployed()',
    'SET_CARGO:FirstCargoLoaded()',
    'SET_CARGO:FirstCargoDeployed()',
    'SET_CARGO:IsIncludeObject(MCargo)',
    'SET_CARGO:OnEventNewCargo(EventData)',
    'SET_CARGO:OnEventDeleteCargo(EventData)',
    'SET_ZONE:New()',
    'SET_ZONE:AddZonesByName(AddZoneNames)',
    'SET_ZONE:AddZone(Zone)',
    'SET_ZONE:RemoveZonesByName(RemoveZoneNames)',
    'SET_ZONE:FindZone(ZoneName)',
    'SET_ZONE:GetRandomZone(margin)',
    'SET_ZONE:SetZoneProbability(ZoneName,ZoneProbability)',
    'SET_ZONE:FilterPrefixes(Prefixes)',
    'SET_ZONE:FilterStart()',
    'SET_ZONE:FilterStop()',
    'SET_ZONE:AddInDatabase(Event)',
    'SET_ZONE:FindInDatabase(Event)',
    'SET_ZONE:ForEachZone(IteratorFunction,...)',
    'SET_ZONE:DrawZone(Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly)',
    'SET_ZONE:GetAverageCoordinate()',
    'SET_ZONE:IsIncludeObject(MZone)',
    'SET_ZONE:OnEventNewZone(EventData)',
    'SET_ZONE:OnEventDeleteZone(EventData)',
    'SET_ZONE:IsCoordinateInZone(Coordinate)',
    'SET_ZONE:GetClosestZone(Coordinate)',
    'SET_ZONE:SetCheckTime(seconds)',
    'SET_ZONE:Trigger(Objects)',
    'SET_ZONE:_TriggerCheck(fromstart)',
    'SET_ZONE:onafterTriggerRunCheck(From,Event,To)',
    'SET_ZONE_GOAL:New()',
    'SET_ZONE_GOAL:AddZone(Zone)',
    'SET_ZONE_GOAL:RemoveZonesByName(RemoveZoneNames)',
    'SET_ZONE_GOAL:FindZone(ZoneName)',
    'SET_ZONE_GOAL:GetRandomZone()',
    'SET_ZONE_GOAL:SetZoneProbability(ZoneName,ZoneProbability)',
    'SET_ZONE_GOAL:FilterPrefixes(Prefixes)',
    'SET_ZONE_GOAL:FilterStart()',
    'SET_ZONE_GOAL:FilterStop()',
    'SET_ZONE_GOAL:AddInDatabase(Event)',
    'SET_ZONE_GOAL:FindInDatabase(Event)',
    'SET_ZONE_GOAL:ForEachZone(IteratorFunction,...)',
    'SET_ZONE_GOAL:IsIncludeObject(MZone)',
    'SET_ZONE_GOAL:OnEventNewZoneGoal(EventData)',
    'SET_ZONE_GOAL:OnEventDeleteZoneGoal(EventData)',
    'SET_ZONE_GOAL:IsCoordinateInZone(Coordinate)',
    'SET_OPSZONE:New()',
    'SET_OPSZONE:AddZone(Zone)',
    'SET_OPSZONE:RemoveZonesByName(RemoveZoneNames)',
    'SET_OPSZONE:FindZone(ZoneName)',
    'SET_OPSZONE:GetRandomZone()',
    'SET_OPSZONE:SetZoneProbability(ZoneName,Probability)',
    'SET_OPSZONE:FilterPrefixes(Prefixes)',
    'SET_OPSZONE:FilterCoalitions(Coalitions)',
    'SET_OPSZONE:FilterOnce()',
    'SET_OPSZONE:FilterClear()',
    'SET_OPSZONE:FilterStart()',
    'SET_OPSZONE:FilterStop()',
    'SET_OPSZONE:AddInDatabase(Event)',
    'SET_OPSZONE:FindInDatabase(Event)',
    'SET_OPSZONE:ForEachZone(IteratorFunction,...)',
    'SET_OPSZONE:IsIncludeObject(MZone)',
    'SET_OPSZONE:OnEventNewZoneGoal(EventData)',
    'SET_OPSZONE:OnEventDeleteZoneGoal(EventData)',
    'SET_OPSZONE:Start()',
    'SET_OPSZONE:IsCoordinateInZone(Coordinate)',
    'SET_OPSZONE:GetClosestZone(Coordinate,Coalitions)',
    'SET_OPSGROUP:New()',
    'SET_OPSGROUP:GetAliveSet()',
    'SET_OPSGROUP:Add(ObjectName,Object)',
    'SET_OPSGROUP:AddObject(Object)',
    'SET_OPSGROUP:AddGroup(group)',
    'SET_OPSGROUP:AddGroupsByName(AddGroupNames)',
    'SET_OPSGROUP:RemoveGroupsByName(RemoveGroupNames)',
    'SET_OPSGROUP:FindGroup(GroupName)',
    'SET_OPSGROUP:FindFlightGroup(GroupName)',
    'SET_OPSGROUP:FindArmyGroup(GroupName)',
    'SET_OPSGROUP:FindNavyGroup(GroupName)',
    'SET_OPSGROUP:FilterCoalitions(Coalitions,Clear)',
    'SET_OPSGROUP:FilterCategories(Categories,Clear)',
    'SET_OPSGROUP:FilterCategoryGround()',
    'SET_OPSGROUP:FilterCategoryAirplane()',
    'SET_OPSGROUP:FilterCategoryAircraft()',
    'SET_OPSGROUP:FilterCategoryHelicopter()',
    'SET_OPSGROUP:FilterCategoryShip()',
    'SET_OPSGROUP:FilterCountries(Countries,Clear)',
    'SET_OPSGROUP:FilterPrefixes(Prefixes,Clear)',
    'SET_OPSGROUP:FilterActive(Active)',
    'SET_OPSGROUP:FilterStart()',
    'SET_OPSGROUP:Activate(Delay)',
    'SET_OPSGROUP:_EventOnDeadOrCrash(Event)',
    'SET_OPSGROUP:AddInDatabase(Event)',
    'SET_OPSGROUP:FindInDatabase(Event)',
    'SET_OPSGROUP:ForEachGroup(IteratorFunction,...)',
    'SET_OPSGROUP:IsIncludeObject(MGroup)',
    'SET_SCENERY:New(ZoneSet)',
    'SET_SCENERY:NewFromZone(Zone)',
    'SET_SCENERY:AddScenery(AddScenery)',
    'SET_SCENERY:AddSceneryByName(AddSceneryNames)',
    'SET_SCENERY:RemoveSceneryByName(RemoveSceneryNames)',
    'SET_SCENERY:FindScenery(SceneryName)',
    'SET_SCENERY:FilterZones(Zones)',
    'SET_SCENERY:FilterPrefixes(Prefixes)',
    'SET_SCENERY:FilterRoles(Role)',
    'SET_SCENERY:CountAlive()',
    'SET_SCENERY:GetAliveSet()',
    'SET_SCENERY:ForEachScenery(IteratorFunction,...)',
    'SET_SCENERY:GetCoordinate()',
    'SET_SCENERY:IsIncludeObject(MScenery)',
    'SET_SCENERY:FilterOnce()',
    'SET_SCENERY:GetLife0()',
    'SET_SCENERY:GetLife()',
    'SET_SCENERY:GetRelativeLife()',
    'COORDINATE:New(x,y,z)',
    'COORDINATE:NewFromCoordinate(Coordinate)',
    'COORDINATE:NewFromVec2(Vec2,LandHeightAdd)',
    'COORDINATE:NewFromVec3(Vec3)',
    'COORDINATE:NewFromWaypoint(Waypoint)',
    'COORDINATE:GetCoordinate()',
    'COORDINATE:GetVec3()',
    'COORDINATE:GetVec2()',
    'COORDINATE:UpdateFromVec3(Vec3)',
    'COORDINATE:UpdateFromCoordinate(Coordinate)',
    'COORDINATE:UpdateFromVec2(Vec2)',
    'COORDINATE:GetMagneticDeclination(Month,Year)',
    'COORDINATE:NewFromLLDD(latitude,longitude,altitude)',
    'COORDINATE:IsAtCoordinate2D(Coordinate,Precision)',
    'COORDINATE:ScanObjects(radius,scanunits,scanstatics,scanscenery)',
    'COORDINATE:ScanUnits(radius)',
    'COORDINATE:ScanStatics(radius)',
    'COORDINATE:FindClosestStatic(radius)',
    'COORDINATE:FindClosestUnit(radius)',
    'COORDINATE:ScanScenery(radius)',
    'COORDINATE:FindClosestScenery(radius)',
    'COORDINATE:DistanceFromPointVec2(PointVec2Reference)',
    'COORDINATE:Translate(Distance,Angle,Keepalt,Overwrite)',
    'COORDINATE:Rotate2D(Angle)',
    'COORDINATE:GetRandomVec2InRadius(OuterRadius,InnerRadius)',
    'COORDINATE:GetRandomCoordinateInRadius(OuterRadius,InnerRadius)',
    'COORDINATE:GetRandomVec3InRadius(OuterRadius,InnerRadius)',
    'COORDINATE:GetLandHeight()',
    'COORDINATE:SetHeading(Heading)',
    'COORDINATE:GetHeading()',
    'COORDINATE:SetVelocity(Velocity)',
    'COORDINATE:GetVelocity()',
    'COORDINATE:GetName()',
    'COORDINATE:GetMovingText(Settings)',
    'COORDINATE:GetDirectionVec3(TargetCoordinate)',
    'COORDINATE:GetNorthCorrectionRadians()',
    'COORDINATE:GetAngleRadians(DirectionVec3)',
    'COORDINATE:GetAngleDegrees(DirectionVec3)',
    'COORDINATE:GetIntermediateCoordinate(ToCoordinate,Fraction)',
    'COORDINATE:Get2DDistance(TargetCoordinate)',
    'COORDINATE:GetTemperature(height)',
    'COORDINATE:GetTemperatureText(height,Settings)',
    'COORDINATE:GetPressure(height)',
    'COORDINATE:GetPressureText(height,Settings)',
    'COORDINATE:HeadingTo(ToCoordinate)',
    'COORDINATE:GetWindVec3(height,turbulence)',
    'COORDINATE:GetWind(height,turbulence)',
    'COORDINATE:GetWindWithTurbulenceVec3(height)',
    'COORDINATE:GetWindText(height,Settings)',
    'COORDINATE:Get3DDistance(TargetCoordinate)',
    'COORDINATE:GetBearingText(AngleRadians,Precision,Settings,MagVar)',
    'COORDINATE:GetDistanceText(Distance,Settings,Language,Precision)',
    'COORDINATE:GetAltitudeText(Settings,Language)',
    'COORDINATE:GetVelocityText(Settings)',
    'COORDINATE:GetHeadingText(Settings)',
    'COORDINATE:GetBRText(AngleRadians,Distance,Settings,Language,MagVar)',
    'COORDINATE:GetBRAText(AngleRadians,Distance,Settings,Language,MagVar)',
    'COORDINATE:SetAltitude(altitude,asl)',
    'COORDINATE:SetAtLandheight()',
    'COORDINATE:WaypointAir(AltType,Type,Action,Speed,SpeedLocked,airbase,DCSTasks,description,timeReFuAr)',
    'COORDINATE:WaypointAirTurningPoint(AltType,Speed,DCSTasks,description)',
    'COORDINATE:WaypointAirFlyOverPoint(AltType,Speed)',
    'COORDINATE:WaypointAirTakeOffParkingHot(AltType,Speed)',
    'COORDINATE:WaypointAirTakeOffParking(AltType,Speed)',
    'COORDINATE:WaypointAirTakeOffRunway(AltType,Speed)',
    'COORDINATE:WaypointAirLanding(Speed,airbase,DCSTasks,description)',
    'COORDINATE:WaypointAirLandingReFu(Speed,airbase,timeReFuAr,DCSTasks,description)',
    'COORDINATE:WaypointGround(Speed,Formation,DCSTasks)',
    'COORDINATE:WaypointNaval(Speed,Depth,DCSTasks)',
    'COORDINATE:GetClosestAirbase(Category,Coalition)',
    'COORDINATE:GetClosestAirbase2(Category,Coalition)',
    'COORDINATE:GetClosestParkingSpot(airbase,terminaltype,free)',
    'COORDINATE:GetClosestFreeParkingSpot(airbase,terminaltype)',
    'COORDINATE:GetClosestOccupiedParkingSpot(airbase,terminaltype)',
    'COORDINATE:GetClosestPointToRoad(Railroad)',
    'COORDINATE:GetPathOnRoad(ToCoord,IncludeEndpoints,Railroad,MarkPath,SmokePath)',
    'COORDINATE:GetSurfaceType()',
    'COORDINATE:IsSurfaceTypeLand()',
    'COORDINATE:IsSurfaceTypeLand()',
    'COORDINATE:IsSurfaceTypeRoad()',
    'COORDINATE:IsSurfaceTypeRunway()',
    'COORDINATE:IsSurfaceTypeShallowWater()',
    'COORDINATE:IsSurfaceTypeWater()',
    'COORDINATE:Explosion(ExplosionIntensity,Delay)',
    'COORDINATE:IlluminationBomb(Power,Delay)',
    'COORDINATE:Smoke(SmokeColor)',
    'COORDINATE:SmokeGreen()',
    'COORDINATE:SmokeRed()',
    'COORDINATE:SmokeWhite()',
    'COORDINATE:SmokeOrange()',
    'COORDINATE:SmokeBlue()',
    'COORDINATE:BigSmokeAndFire(preset,density,name)',
    'COORDINATE:StopBigSmokeAndFire(name)',
    'COORDINATE:BigSmokeAndFireSmall(density,name)',
    'COORDINATE:BigSmokeAndFireMedium(density,name)',
    'COORDINATE:BigSmokeAndFireLarge(density,name)',
    'COORDINATE:BigSmokeAndFireHuge(density,name)',
    'COORDINATE:BigSmokeSmall(density,name)',
    'COORDINATE:BigSmokeMedium(density,name)',
    'COORDINATE:BigSmokeLarge(density,name)',
    'COORDINATE:BigSmokeHuge(density,name)',
    'COORDINATE:Flare(FlareColor,Azimuth)',
    'COORDINATE:FlareWhite(Azimuth)',
    'COORDINATE:FlareYellow(Azimuth)',
    'COORDINATE:FlareGreen(Azimuth)',
    'COORDINATE:FlareRed(Azimuth)',
    'COORDINATE:MarkToAll(MarkText,ReadOnly,Text)',
    'COORDINATE:MarkToCoalition(MarkText,Coalition,ReadOnly,Text)',
    'COORDINATE:MarkToCoalitionRed(MarkText,ReadOnly,Text)',
    'COORDINATE:MarkToCoalitionBlue(MarkText,ReadOnly,Text)',
    'COORDINATE:MarkToGroup(MarkText,MarkGroup,ReadOnly,Text)',
    'COORDINATE:RemoveMark(MarkID)',
    'COORDINATE:LineToAll(Endpoint,Coalition,Color,Alpha,LineType,ReadOnly,Text)',
    'COORDINATE:CircleToAll(Radius,Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly,Text)',
    'COORDINATE:RectToAll(Endpoint,Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly,Text)',
    'COORDINATE:QuadToAll(Coord2,Coord3,Coord4,Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly,Text)',
    'COORDINATE:MarkupToAllFreeForm(Coordinates,Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly,Text)',
    'COORDINATE:TextToAll(Text,Coalition,Color,Alpha,FillColor,FillAlpha,FontSize,ReadOnly)',
    'COORDINATE:ArrowToAll(Endpoint,Coalition,Color,Alpha,FillColor,FillAlpha,LineType,ReadOnly,Text)',
    'COORDINATE:IsLOS(ToCoordinate,Offset)',
    'COORDINATE:IsInRadius(Coordinate,Radius)',
    'COORDINATE:IsInSphere(Coordinate,Radius)',
    'COORDINATE:GetSunriseAtDate(Day,Month,Year,InSeconds)',
    'COORDINATE:GetSunriseAtDayOfYear(DayOfYear,InSeconds)',
    'COORDINATE:GetSunrise(InSeconds)',
    'COORDINATE:GetMinutesToSunrise(OnlyToday)',
    'COORDINATE:IsDay(Clock)',
    'COORDINATE:IsNight(Clock)',
    'COORDINATE:GetSunsetAtDate(Day,Month,Year,InSeconds)',
    'COORDINATE:GetSunset(InSeconds)',
    'COORDINATE:GetMinutesToSunset(OnlyToday)',
    'COORDINATE:ToStringBR(FromCoordinate,Settings,MagVar)',
    'COORDINATE:ToStringBRA(FromCoordinate,Settings,MagVar)',
    'COORDINATE:ToStringBRAANATO(FromCoordinate,Bogey,Spades,SSML,Angels,Zeros)',
    'COORDINATE.GetBullseyeCoordinate(Coalition)',
    'COORDINATE:ToStringBULLS(Coalition,Settings,MagVar)',
    'COORDINATE:ToStringAspect(TargetCoordinate)',
    'COORDINATE:GetLLDDM()',
    'COORDINATE:ToStringLLDMS(Settings)',
    'COORDINATE:ToStringLLDDM(Settings)',
    'COORDINATE:ToStringMGRS(Settings)',
    'COORDINATE:NewFromMGRSString(MGRSString)',
    'COORDINATE:NewFromMGRS(UTMZone,MGRSDigraph,Easting,Northing)',
    'COORDINATE:ToStringFromRP(ReferenceCoord,ReferenceName,Controllable,Settings,MagVar)',
    'COORDINATE:ToStringFromRPShort(ReferenceCoord,ReferenceName,Controllable,Settings,MagVar)',
    'COORDINATE:ToStringA2G(Controllable,Settings,MagVar)',
    'COORDINATE:ToStringA2A(Controllable,Settings,MagVar)',
    'COORDINATE:ToString(Controllable,Settings,Task)',
    'COORDINATE:ToStringPressure(Controllable,Settings)',
    'COORDINATE:ToStringWind(Controllable,Settings)',
    'COORDINATE:ToStringTemperature(Controllable,Settings)',
    'COORDINATE:IsInSteepArea(Radius,Minelevation)',
    'COORDINATE:IsInFlatArea(Radius,Minelevation)',
    'POINT_VEC3:New(x,y,z)',
    'POINT_VEC3:NewFromVec2(Vec2,LandHeightAdd)',
    'POINT_VEC3:NewFromVec3(Vec3)',
    'POINT_VEC3:GetX()',
    'POINT_VEC3:GetY()',
    'POINT_VEC3:GetZ()',
    'POINT_VEC3:SetX(x)',
    'POINT_VEC3:SetY(y)',
    'POINT_VEC3:SetZ(z)',
    'POINT_VEC3:AddX(x)',
    'POINT_VEC3:AddY(y)',
    'POINT_VEC3:AddZ(z)',
    'POINT_VEC3:GetRandomPointVec3InRadius(OuterRadius,InnerRadius)',
    'POINT_VEC2:New(x,y,LandHeightAdd)',
    'POINT_VEC2:NewFromVec2(Vec2,LandHeightAdd)',
    'POINT_VEC2:NewFromVec3(Vec3)',
    'POINT_VEC2:GetX()',
    'POINT_VEC2:GetY()',
    'POINT_VEC2:SetX(x)',
    'POINT_VEC2:SetY(y)',
    'POINT_VEC2:GetLat()',
    'POINT_VEC2:SetLat(x)',
    'POINT_VEC2:GetLon()',
    'POINT_VEC2:SetLon(z)',
    'POINT_VEC2:GetAlt()',
    'POINT_VEC2:SetAlt(Altitude)',
    'POINT_VEC2:AddX(x)',
    'POINT_VEC2:AddY(y)',
    'POINT_VEC2:AddAlt(Altitude)',
    'POINT_VEC2:GetRandomPointVec2InRadius(OuterRadius,InnerRadius)',
    'POINT_VEC2:DistanceFromPointVec2(PointVec2Reference)',
    'VELOCITY:New(VelocityMps)',
    'VELOCITY:Set(VelocityMps)',
    'VELOCITY:Get()',
    'VELOCITY:SetKmph(VelocityKmph)',
    'VELOCITY:GetKmph()',
    'VELOCITY:SetMiph(VelocityMiph)',
    'VELOCITY:GetMiph()',
    'VELOCITY:GetText(Settings)',
    'VELOCITY:ToString(VelocityGroup,Settings)',
    'VELOCITY_POSITIONABLE:New(Positionable)',
    'VELOCITY_POSITIONABLE:Get()',
    'VELOCITY_POSITIONABLE:GetKmph()',
    'VELOCITY_POSITIONABLE:GetMiph()',
    'VELOCITY_POSITIONABLE:ToString()',
    'MESSAGE:New(MessageText,MessageDuration,MessageCategory,ClearScreen)',
    'MESSAGE:NewType(MessageText,MessageType,ClearScreen)',
    'MESSAGE:Clear()',
    'MESSAGE:ToClient(Client,Settings)',
    'MESSAGE:ToGroup(Group,Settings)',
    'MESSAGE:ToUnit(Unit,Settings)',
    'MESSAGE:ToCountry(Country,Settings)',
    'MESSAGE:ToCountryIf(Country,Condition,Settings)',
    'MESSAGE:ToBlue()',
    'MESSAGE:ToRed()',
    'MESSAGE:ToCoalition(CoalitionSide,Settings)',
    'MESSAGE:ToCoalitionIf(CoalitionSide,Condition)',
    'MESSAGE:ToAll(Settings)',
    'MESSAGE:ToAllIf(Condition)',
    'MESSAGE:ToLog()',
    'MESSAGE:ToLogIf(Condition)',
    'MESSAGE.SetMSRS(PathToSRS,Port,PathToCredentials,Frequency,Modulation,Gender,Culture,Voice,Coalition,Volume,Label,Coordinate)',
    'MESSAGE:ToSRS(frequency,modulation,gender,culture,voice,coalition,volume,coordinate)',
    'MESSAGE:ToSRSBlue(frequency,modulation,gender,culture,voice,volume,coordinate)',
    'MESSAGE:ToSRSRed(frequency,modulation,gender,culture,voice,volume,coordinate)',
    'MESSAGE:ToSRSAll(frequency,modulation,gender,culture,voice,volume,coordinate)',
    'FSM:New()',
    'FSM:SetStartState(State)',
    'FSM:GetStartState()',
    'FSM:AddTransition(From,Event,To)',
    'FSM:GetTransitions()',
    'FSM:AddProcess(From,Event,Process,ReturnEvents)',
    'FSM:GetProcesses()',
    'FSM:GetProcess(From,Event)',
    'FSM:SetProcess(From,Event,Fsm)',
    'FSM:AddEndState(State)',
    'FSM:GetEndStates()',
    'FSM:AddScore(State,ScoreText,Score)',
    'FSM:AddScoreProcess(From,Event,State,ScoreText,Score)',
    'FSM:GetScores()',
    'FSM:GetSubs()',
    'FSM:LoadCallBacks(CallBackTable)',
    'FSM:_eventmap(Events,EventStructure)',
    'FSM:_submap(subs,sub,name)',
    'FSM:_call_handler(step,trigger,params,EventName)',
    'FSM._handler(self,EventName,...)',
    'FSM:_delayed_transition(EventName)',
    'FSM:_create_transition(EventName)',
    'FSM:_gosub(ParentFrom,ParentEvent)',
    'FSM:_isendstate(Current)',
    'FSM:_add_to_map(Map,Event)',
    'FSM:GetState()',
    'FSM:GetCurrentState()',
    'FSM:Is(State)',
    'FSM:is(state)',
    'FSM:can(e)',
    'FSM:cannot(e)',
    'FSM_CONTROLLABLE:New(Controllable)',
    'FSM_CONTROLLABLE:OnAfterStop(Controllable,From,Event,To)',
    'FSM_CONTROLLABLE:SetControllable(FSMControllable)',
    'FSM_CONTROLLABLE:GetControllable()',
    'FSM_CONTROLLABLE:_call_handler(step,trigger,params,EventName)',
    'FSM_PROCESS:New(Controllable,Task)',
    'FSM_PROCESS:Init(FsmProcess)',
    'FSM_PROCESS:_call_handler(step,trigger,params,EventName)',
    'FSM_PROCESS:Copy(Controllable,Task)',
    'FSM_PROCESS:Remove()',
    'FSM_PROCESS:SetTask(Task)',
    'FSM_PROCESS:GetTask()',
    'FSM_PROCESS:GetMission()',
    'FSM_PROCESS:GetCommandCenter()',
    'FSM_PROCESS:Message(Message)',
    'FSM_PROCESS:Assign(ProcessUnit,Task)',
    'FSM_PROCESS:onenterFailed(ProcessUnit,Task,From,Event,To)',
    'FSM_PROCESS:onstatechange(ProcessUnit,Task,From,Event,To)',
    'FSM_TASK:New(TaskName)',
    'FSM_TASK:_call_handler(step,trigger,params,EventName)',
    'FSM_SET:New(FSMSet)',
    'FSM_SET:Set(FSMSet)',
    'FSM_SET:Get()',
    'FSM_SET:_call_handler(step,trigger,params,EventName)',
    'SPAWN:New(SpawnTemplatePrefix)',
    'SPAWN:NewWithAlias(SpawnTemplatePrefix,SpawnAliasPrefix)',
    'SPAWN:NewFromTemplate(SpawnTemplate,SpawnTemplatePrefix,SpawnAliasPrefix,NoMooseNamingPostfix)',
    'SPAWN:InitLimit(SpawnMaxUnitsAlive,SpawnMaxGroups)',
    'SPAWN:InitKeepUnitNames(KeepUnitNames)',
    'SPAWN:InitLateActivated(LateActivated)',
    'SPAWN:InitAirbase(AirbaseName,Takeoff,TerminalType)',
    'SPAWN:InitHeading(HeadingMin,HeadingMax)',
    'SPAWN:InitGroupHeading(HeadingMin,HeadingMax,unitVar)',
    'SPAWN:InitCoalition(Coalition)',
    'SPAWN:InitCountry(Country)',
    'SPAWN:InitCategory(Category)',
    'SPAWN:InitLivery(Livery)',
    'SPAWN:InitSkill(Skill)',
    'SPAWN:InitRadioCommsOnOff(switch)',
    'SPAWN:InitRadioFrequency(frequency)',
    'SPAWN:InitRadioModulation(modulation)',
    'SPAWN:InitModex(modex,prefix,postfix)',
    'SPAWN:InitRandomizeRoute(SpawnStartPoint,SpawnEndPoint,SpawnRadius,SpawnHeight)',
    'SPAWN:InitRandomizePosition(RandomizePosition,OuterRadius,InnerRadius)',
    'SPAWN:InitRandomizeUnits(RandomizeUnits,OuterRadius,InnerRadius)',
    'SPAWN:InitSetUnitRelativePositions(Positions)',
    'SPAWN:InitSetUnitAbsolutePositions(Positions)',
    'SPAWN:InitRandomizeTemplate(SpawnTemplatePrefixTable)',
    'SPAWN:InitRandomizeTemplateSet(SpawnTemplateSet)',
    'SPAWN:InitRandomizeTemplatePrefixes(SpawnTemplatePrefixes)',
    'SPAWN:InitGrouping(Grouping)',
    'SPAWN:InitRandomizeZones(SpawnZoneTable)',
    'SPAWN:InitRandomizeCallsign()',
    'SPAWN:InitCallSign(ID,Name,Minor,Major)',
    'SPAWN:InitPositionCoordinate(Coordinate)',
    'SPAWN:InitPositionVec2(Vec2)',
    'SPAWN:InitRepeat()',
    'SPAWN:InitRepeatOnLanding()',
    'SPAWN:InitRepeatOnEngineShutDown()',
    'SPAWN:InitCleanUp(SpawnCleanUpInterval)',
    'SPAWN:InitArray(SpawnAngle,SpawnWidth,SpawnDeltaX,SpawnDeltaY)',
    'SPAWN:InitAIOnOff(AIOnOff)',
    'SPAWN:InitAIOn()',
    'SPAWN:InitAIOff()',
    'SPAWN:InitDelayOnOff(DelayOnOff)',
    'SPAWN:InitDelayOn()',
    'SPAWN:InitDelayOff()',
    'SPAWN:Spawn()',
    'SPAWN:ReSpawn(SpawnIndex)',
    'SPAWN:SetSpawnIndex(SpawnIndex)',
    'SPAWN:SpawnWithIndex(SpawnIndex,NoBirth)',
    'SPAWN:SpawnScheduled(SpawnTime,SpawnTimeVariation,WithDelay)',
    'SPAWN:SpawnScheduleStart()',
    'SPAWN:SpawnScheduleStop()',
    'SPAWN:OnSpawnGroup(SpawnCallBackFunction,...)',
    'SPAWN:SpawnAtAirbase(SpawnAirbase,Takeoff,TakeoffAltitude,TerminalType,EmergencyAirSpawn,Parkingdata)',
    'SPAWN:SpawnAtParkingSpot(Airbase,Spots,Takeoff)',
    'SPAWN:ParkAircraft(SpawnAirbase,TerminalType,Parkingdata,SpawnIndex)',
    'SPAWN:ParkAtAirbase(SpawnAirbase,TerminalType,Parkingdata)',
    'SPAWN:SpawnFromVec3(Vec3,SpawnIndex)',
    'SPAWN:SpawnFromCoordinate(Coordinate,SpawnIndex)',
    'SPAWN:SpawnFromPointVec3(PointVec3,SpawnIndex)',
    'SPAWN:SpawnFromVec2(Vec2,MinHeight,MaxHeight,SpawnIndex)',
    'SPAWN:SpawnFromPointVec2(PointVec2,MinHeight,MaxHeight,SpawnIndex)',
    'SPAWN:SpawnFromUnit(HostUnit,MinHeight,MaxHeight,SpawnIndex)',
    'SPAWN:SpawnFromStatic(HostStatic,MinHeight,MaxHeight,SpawnIndex)',
    'SPAWN:SpawnInZone(Zone,RandomizeGroup,MinHeight,MaxHeight,SpawnIndex)',
    'SPAWN:InitUnControlled(UnControlled)',
    'SPAWN:GetCoordinate()',
    'SPAWN:SpawnGroupName(SpawnIndex)',
    'SPAWN:GetFirstAliveGroup()',
    'SPAWN:GetNextAliveGroup(SpawnIndexStart)',
    'SPAWN:GetLastAliveGroup()',
    'SPAWN:GetGroupFromIndex(SpawnIndex)',
    'SPAWN:_GetPrefixFromGroup(SpawnGroup)',
    'SPAWN:_GetPrefixFromGroupName(SpawnGroupName)',
    'SPAWN:GetSpawnIndexFromGroup(SpawnGroup)',
    'SPAWN:_GetLastIndex()',
    'SPAWN:_InitializeSpawnGroups(SpawnIndex)',
    'SPAWN:_GetGroupCategoryID(SpawnPrefix)',
    'SPAWN:_GetGroupCoalitionID(SpawnPrefix)',
    'SPAWN:_GetGroupCountryID(SpawnPrefix)',
    'SPAWN:_GetTemplate(SpawnTemplatePrefix)',
    'SPAWN:_Prepare(SpawnTemplatePrefix,SpawnIndex)',
    'SPAWN:_RandomizeRoute(SpawnIndex)',
    'SPAWN:_RandomizeTemplate(SpawnIndex)',
    'SPAWN:_SetInitialPosition(SpawnIndex)',
    'SPAWN:_RandomizeZones(SpawnIndex)',
    'SPAWN:_TranslateRotate(SpawnIndex,SpawnRootX,SpawnRootY,SpawnX,SpawnY,SpawnAngle)',
    'SPAWN:_GetSpawnIndex(SpawnIndex)',
    'SPAWN:_OnBirth(EventData)',
    'SPAWN:_OnDeadOrCrash(EventData)',
    'SPAWN:_OnTakeOff(EventData)',
    'SPAWN:_OnLand(EventData)',
    'SPAWN:_OnEngineShutDown(EventData)',
    'SPAWN:_Scheduler()',
    'SPAWN:_SpawnCleanUpScheduler()',
    'SPAWNSTATIC:NewFromStatic(SpawnTemplateName,SpawnCountryID)',
    'SPAWNSTATIC:NewFromTemplate(SpawnTemplate,CountryID)',
    'SPAWNSTATIC:NewFromType(StaticType,StaticCategory,CountryID)',
    'SPAWNSTATIC:InitCoordinate(Coordinate)',
    'SPAWNSTATIC:InitHeading(Heading)',
    'SPAWNSTATIC:InitLivery(LiveryName)',
    'SPAWNSTATIC:InitType(StaticType)',
    'SPAWNSTATIC:InitShape(StaticShape)',
    'SPAWNSTATIC:InitFARP(CallsignID,Frequency,Modulation)',
    'SPAWNSTATIC:InitCargoMass(Mass)',
    'SPAWNSTATIC:InitCargo(IsCargo)',
    'SPAWNSTATIC:InitDead(IsDead)',
    'SPAWNSTATIC:InitCountry(CountryID)',
    'SPAWNSTATIC:InitNamePrefix(NamePrefix)',
    'SPAWNSTATIC:InitLinkToUnit(Unit,OffsetX,OffsetY,OffsetAngle)',
    'SPAWNSTATIC:Spawn(Heading,NewName)',
    'SPAWNSTATIC:SpawnFromPointVec2(PointVec2,Heading,NewName)',
    'SPAWNSTATIC:SpawnFromCoordinate(Coordinate,Heading,NewName)',
    'SPAWNSTATIC:SpawnFromZone(Zone,Heading,NewName)',
    'SPAWNSTATIC:_SpawnStatic(Template,CountryID)',
    'TIMER:New(Function,...)',
    'TIMER:Start(Tstart,dT,Duration)',
    'TIMER:StartIf(Condition,Tstart,dT,Duration)',
    'TIMER:Stop(Delay)',
    'TIMER:SetMaxFunctionCalls(Nmax)',
    'TIMER:SetTimeInterval(dT)',
    'TIMER:IsRunning()',
    'TIMER:_Function(time)',
    'GOAL:New()',
    'GOAL:AddPlayerContribution(PlayerName)',
    'GOAL:GetPlayerContribution(PlayerName)',
    'GOAL:GetPlayerContributions()',
    'GOAL:GetTotalContributions()',
    'GOAL:IsAchieved()',
    'SPOT:New(Recce)',
    'SPOT:onafterLaseOn(From,Event,To,Target,LaserCode,Duration)',
    'SPOT:onafterLaseOnCoordinate(From,Event,To,Coordinate,LaserCode,Duration)',
    'SPOT:OnEventDead(EventData)',
    'SPOT:onafterLasing(From,Event,To)',
    'SPOT:onafterLaseOff(From,Event,To)',
    'SPOT:IsLasing()',
    'SPOT:SetRelativeStartPosition(position)',
    'MARKEROPS_BASE:New(Tagname,Keywords,Casesensitive)',
    'MARKEROPS_BASE:OnEventMark(Event)',
    'MARKEROPS_BASE:_MatchTag(Eventtext)',
    'MARKEROPS_BASE:_MatchKeywords(Eventtext)',
    'MARKEROPS_BASE:onbeforeMarkAdded(From,Event,To,Text,Keywords,Coord)',
    'MARKEROPS_BASE:onbeforeMarkChanged(From,Event,To,Text,Keywords,Coord)',
    'MARKEROPS_BASE:onbeforeMarkDeleted(From,Event,To)',
    'MARKEROPS_BASE:onenterStopped(From,Event,To)',
    'TEXTANDSOUND:New(ClassName,Defaultlocale)',
    'TEXTANDSOUND:AddEntry(Locale,ID,Text,Soundfile,Soundlength,Subtitle)',
    'TEXTANDSOUND:GetEntry(ID,Locale)',
    'TEXTANDSOUND:GetDefaultLocale()',
    'TEXTANDSOUND:SetDefaultLocale(locale)',
    'TEXTANDSOUND:HasLocale(Locale)',
    'TEXTANDSOUND:FlushToLog()',
    'PATHLINE:New(Name)',
    'PATHLINE:NewFromVec2Array(Name,Vec2Array)',
    'PATHLINE:NewFromVec3Array(Name,Vec3Array)',
    'PATHLINE:FindByName(Name)',
    'PATHLINE:AddPointFromVec2(Vec2)',
    'PATHLINE:AddPointFromVec3(Vec3)',
    'PATHLINE:GetName()',
    'PATHLINE:GetNumberOfPoints()',
    'PATHLINE:GetPoints()',
    'PATHLINE:GetPoints3D()',
    'PATHLINE:GetPoints2D()',
    'PATHLINE:GetCoordinats()',
    'PATHLINE:GetPointFromIndex(n)',
    'PATHLINE:GetPoint3DFromIndex(n)',
    'PATHLINE:GetPoint2DFromIndex(n)',
    'PATHLINE:MarkPoints(Switch)',
    'PATHLINE:_CreatePoint(Vec)',
    'OBJECT:New(ObjectName)',
    'OBJECT:GetID()',
    'OBJECT:Destroy()',
    'IDENTIFIABLE:New(IdentifiableName)',
    'IDENTIFIABLE:IsAlive()',
    'IDENTIFIABLE:GetName()',
    'IDENTIFIABLE:GetTypeName()',
    'IDENTIFIABLE:GetCategory()',
    'IDENTIFIABLE:GetCategoryName()',
    'IDENTIFIABLE:GetCoalition()',
    'IDENTIFIABLE:GetCoalitionName()',
    'IDENTIFIABLE:GetCountry()',
    'IDENTIFIABLE:GetCountryName()',
    'IDENTIFIABLE:GetDesc()',
    'IDENTIFIABLE:HasAttribute(AttributeName)',
    'IDENTIFIABLE:GetCallsign()',
    'IDENTIFIABLE:GetThreatLevel()',
    'POSITIONABLE:New(PositionableName)',
    'POSITIONABLE:Destroy(GenerateEvent)',
    'POSITIONABLE:GetDCSObject()',
    'POSITIONABLE:GetPosition()',
    'POSITIONABLE:GetOrientation()',
    'POSITIONABLE:GetOrientationX()',
    'POSITIONABLE:GetOrientationY()',
    'POSITIONABLE:GetOrientationZ()',
    'POSITIONABLE:GetPositionVec3()',
    'POSITIONABLE:GetVec3()',
    'POSITIONABLE:GetVec2()',
    'POSITIONABLE:GetPointVec2()',
    'POSITIONABLE:GetPointVec3()',
    'POSITIONABLE:GetCoord()',
    'POSITIONABLE:GetCoordinate()',
    'POSITIONABLE:Explode(power,delay)',
    'POSITIONABLE:GetOffsetCoordinate(x,y,z)',
    'POSITIONABLE:GetRelativeCoordinate(x,y,z)',
    'POSITIONABLE:GetRandomVec3(Radius)',
    'POSITIONABLE:GetBoundingBox()',
    'POSITIONABLE:GetObjectSize()',
    'POSITIONABLE:GetBoundingRadius(MinDist)',
    'POSITIONABLE:GetAltitude()',
    'POSITIONABLE:IsAboveRunway()',
    'POSITIONABLE:GetSize()',
    'POSITIONABLE:GetHeading()',
    'POSITIONABLE:IsAir()',
    'POSITIONABLE:IsGround()',
    'POSITIONABLE:IsShip()',
    'POSITIONABLE:IsSubmarine()',
    'POSITIONABLE:InAir()',
    'POSITIONABLE:GetVelocity()',
    'POSITIONABLE:GetVelocityVec3()',
    'POSITIONABLE:GetRelativeVelocity(Positionable)',
    'POSITIONABLE:GetHeight()',
    'POSITIONABLE:GetVelocityKMH()',
    'POSITIONABLE:GetVelocityMPS()',
    'POSITIONABLE:GetVelocityKNOTS()',
    'POSITIONABLE:GetAirspeedTrue()',
    'POSITIONABLE:GetAirspeedIndicated(oatcorr)',
    'POSITIONABLE:GetGroundSpeed()',
    'POSITIONABLE:GetAoA()',
    'POSITIONABLE:GetClimbAngle()',
    'POSITIONABLE:GetPitch()',
    'POSITIONABLE:GetRoll()',
    'POSITIONABLE:GetYaw()',
    'POSITIONABLE:GetMessageText(Message,Name)',
    'POSITIONABLE:GetMessage(Message,Duration,Name)',
    'POSITIONABLE:GetMessageType(Message,MessageType,Name)',
    'POSITIONABLE:MessageToAll(Message,Duration,Name)',
    'POSITIONABLE:MessageToCoalition(Message,Duration,MessageCoalition,Name)',
    'POSITIONABLE:MessageTypeToCoalition(Message,MessageType,MessageCoalition,Name)',
    'POSITIONABLE:MessageToRed(Message,Duration,Name)',
    'POSITIONABLE:MessageToBlue(Message,Duration,Name)',
    'POSITIONABLE:MessageToClient(Message,Duration,Client,Name)',
    'POSITIONABLE:MessageToUnit(Message,Duration,MessageUnit,Name)',
    'POSITIONABLE:MessageToGroup(Message,Duration,MessageGroup,Name)',
    'POSITIONABLE:MessageToUnit(Message,Duration,MessageUnit,Name)',
    'POSITIONABLE:MessageTypeToGroup(Message,MessageType,MessageGroup,Name)',
    'POSITIONABLE:MessageToSetGroup(Message,Duration,MessageSetGroup,Name)',
    'POSITIONABLE:MessageToSetUnit(Message,Duration,MessageSetUnit,Name)',
    'POSITIONABLE:MessageToSetUnit(Message,Duration,MessageSetUnit,Name)',
    'POSITIONABLE:Message(Message,Duration,Name)',
    'POSITIONABLE:GetRadio()',
    'POSITIONABLE:GetBeacon()',
    'POSITIONABLE:LaseUnit(Target,LaserCode,Duration)',
    'POSITIONABLE:LaseCoordinate(Coordinate,LaserCode,Duration)',
    'POSITIONABLE:LaseOff()',
    'POSITIONABLE:IsLasing()',
    'POSITIONABLE:GetSpot()',
    'POSITIONABLE:GetLaserCode()',
    'POSITIONABLE:AddCargo(Cargo)',
    'POSITIONABLE:GetCargo()',
    'POSITIONABLE:RemoveCargo(Cargo)',
    'POSITIONABLE:HasCargo(Cargo)',
    'POSITIONABLE:ClearCargo()',
    'POSITIONABLE:IsCargoEmpty()',
    'POSITIONABLE:CargoItemCount()',
    'POSITIONABLE:GetTroopCapacity()',
    'POSITIONABLE:GetCargoBayFreeWeight()',
    'POSITIONABLE:SetCargoBayWeightLimit(WeightLimit)',
    'POSITIONABLE:GetCargoBayWeightLimit()',
    'POSITIONABLE:Flare(FlareColor)',
    'POSITIONABLE:FlareWhite()',
    'POSITIONABLE:FlareYellow()',
    'POSITIONABLE:FlareGreen()',
    'POSITIONABLE:FlareRed()',
    'POSITIONABLE:Smoke(SmokeColor,Range,AddHeight)',
    'POSITIONABLE:SmokeGreen()',
    'POSITIONABLE:SmokeRed()',
    'POSITIONABLE:SmokeWhite()',
    'POSITIONABLE:SmokeOrange()',
    'POSITIONABLE:SmokeBlue()',
    'POSITIONABLE:IsInZone(Zone)',
    'POSITIONABLE:IsNotInZone(Zone)',
    'CONTROLLABLE:New(ControllableName)',
    'CONTROLLABLE:_GetController()',
    'CONTROLLABLE:GetLife()',
    'CONTROLLABLE:GetLife0()',
    'CONTROLLABLE:GetFuelMin()',
    'CONTROLLABLE:GetFuelAve()',
    'CONTROLLABLE:GetFuel()',
    'CONTROLLABLE:ClearTasks()',
    'CONTROLLABLE:PopCurrentTask()',
    'CONTROLLABLE:PushTask(DCSTask,WaitTime)',
    'CONTROLLABLE:SetTask(DCSTask,WaitTime)',
    'CONTROLLABLE:HasTask()',
    'CONTROLLABLE:TaskCondition(time,userFlag,userFlagValue,condition,duration,lastWayPoint)',
    'CONTROLLABLE:TaskControlled(DCSTask,DCSStopCondition)',
    'CONTROLLABLE:TaskCombo(DCSTasks)',
    'CONTROLLABLE:TaskWrappedAction(DCSCommand,Index)',
    'CONTROLLABLE:TaskEmptyTask()',
    'CONTROLLABLE:SetTaskWaypoint(Waypoint,Task)',
    'CONTROLLABLE:SetCommand(DCSCommand)',
    'CONTROLLABLE:CommandSwitchWayPoint(FromWayPoint,ToWayPoint)',
    'CONTROLLABLE:CommandStopRoute(StopRoute)',
    'CONTROLLABLE:StartUncontrolled(delay)',
    'CONTROLLABLE:CommandActivateBeacon(Type,System,Frequency,UnitID,Channel,ModeChannel,AA,Callsign,Bearing,Delay)',
    'CONTROLLABLE:CommandActivateACLS(UnitID,Name,Delay)',
    'CONTROLLABLE:CommandDeactivateACLS(Delay)',
    'CONTROLLABLE:CommandActivateICLS(Channel,UnitID,Callsign,Delay)',
    'CONTROLLABLE:CommandActivateLink4(Frequency,UnitID,Callsign,Delay)',
    'CONTROLLABLE:CommandDeactivateBeacon(Delay)',
    'CONTROLLABLE:CommandDeactivateLink4(Delay)',
    'CONTROLLABLE:CommandDeactivateICLS(Delay)',
    'CONTROLLABLE:CommandSetCallsign(CallName,CallNumber,Delay)',
    'CONTROLLABLE:CommandEPLRS(SwitchOnOff,Delay)',
    'CONTROLLABLE:CommandSetUnlimitedFuel(OnOff,Delay)',
    'CONTROLLABLE:CommandSetFrequency(Frequency,Modulation,Delay)',
    'CONTROLLABLE:TaskEPLRS(SwitchOnOff,idx)',
    'CONTROLLABLE:TaskAttackGroup(AttackGroup,WeaponType,WeaponExpend,AttackQty,Direction,Altitude,AttackQtyLimit,GroupAttack)',
    'CONTROLLABLE:TaskAttackUnit(AttackUnit,GroupAttack,WeaponExpend,AttackQty,Direction,Altitude,WeaponType)',
    'CONTROLLABLE:TaskBombing(Vec2,GroupAttack,WeaponExpend,AttackQty,Direction,Altitude,WeaponType,Divebomb)',
    'CONTROLLABLE:TaskStrafing(Vec2,AttackQty,Length,WeaponType,WeaponExpend,Direction,GroupAttack)',
    'CONTROLLABLE:TaskAttackMapObject(Vec2,GroupAttack,WeaponExpend,AttackQty,Direction,Altitude,WeaponType)',
    'CONTROLLABLE:TaskCarpetBombing(Vec2,GroupAttack,WeaponExpend,AttackQty,Direction,Altitude,WeaponType,CarpetLength)',
    'CONTROLLABLE:TaskFollowBigFormation(FollowControllable,Vec3,LastWaypointIndex)',
    'CONTROLLABLE:TaskEmbarking(Coordinate,GroupSetForEmbarking,Duration,Distribution)',
    'CONTROLLABLE:TaskEmbarkToTransport(Coordinate,Radius,UnitType)',
    'CONTROLLABLE:TaskDisembarking(Coordinate,GroupSetToDisembark)',
    'CONTROLLABLE:TaskOrbitCircleAtVec2(Point,Altitude,Speed)',
    'CONTROLLABLE:TaskOrbit(Coord,Altitude,Speed,CoordRaceTrack)',
    'CONTROLLABLE:TaskOrbitCircle(Altitude,Speed,Coordinate)',
    'CONTROLLABLE:TaskHoldPosition()',
    'CONTROLLABLE:TaskBombingRunway(Airbase,WeaponType,WeaponExpend,AttackQty,Direction,GroupAttack)',
    'CONTROLLABLE:TaskRefueling()',
    'CONTROLLABLE:TaskRecoveryTanker(CarrierGroup,Speed,Altitude,LastWptNumber)',
    'CONTROLLABLE:TaskLandAtVec2(Vec2,Duration)',
    'CONTROLLABLE:TaskLandAtZone(Zone,Duration,RandomPoint)',
    'CONTROLLABLE:TaskFollow(FollowControllable,Vec3,LastWaypointIndex)',
    'CONTROLLABLE:TaskGroundEscort(FollowControllable,LastWaypointIndex,OrbitDistance,TargetTypes)',
    'CONTROLLABLE:TaskEscort(FollowControllable,Vec3,LastWaypointIndex,EngagementDistance,TargetTypes)',
    'CONTROLLABLE:TaskFireAtPoint(Vec2,Radius,AmmoCount,WeaponType,Altitude,ASL)',
    'CONTROLLABLE:TaskHold()',
    'CONTROLLABLE:TaskFAC_AttackGroup(AttackGroup,WeaponType,Designation,Datalink,Frequency,Modulation,CallsignName,CallsignNumber)',
    'CONTROLLABLE:EnRouteTaskEngageTargets(Distance,TargetTypes,Priority)',
    'CONTROLLABLE:EnRouteTaskEngageTargetsInZone(Vec2,Radius,TargetTypes,Priority)',
    'CONTROLLABLE:EnRouteTaskAntiShip(TargetTypes,Priority)',
    'CONTROLLABLE:EnRouteTaskSEAD(TargetTypes,Priority)',
    'CONTROLLABLE:EnRouteTaskCAP(TargetTypes,Priority)',
    'CONTROLLABLE:EnRouteTaskEngageGroup(AttackGroup,Priority,WeaponType,WeaponExpend,AttackQty,Direction,Altitude,AttackQtyLimit)',
    'CONTROLLABLE:EnRouteTaskEngageUnit(EngageUnit,Priority,GroupAttack,WeaponExpend,AttackQty,Direction,Altitude,Visible,ControllableAttack)',
    'CONTROLLABLE:EnRouteTaskAWACS()',
    'CONTROLLABLE:EnRouteTaskTanker()',
    'CONTROLLABLE:EnRouteTaskEWR()',
    'CONTROLLABLE:EnRouteTaskFAC_EngageGroup(AttackGroup,Priority,WeaponType,Designation,Datalink,Frequency,Modulation,CallsignID,CallsignNumber)',
    'CONTROLLABLE:EnRouteTaskFAC(Frequency,Modulation,CallsignID,CallsignNumber,Priority)',
    'CONTROLLABLE:TaskFunction(FunctionString,...)',
    'CONTROLLABLE:TaskMission(TaskMission)',
    'CONTROLLABLE:PatrolRoute()',
    'CONTROLLABLE:PatrolRouteRandom(Speed,Formation,ToWaypoint)',
    'CONTROLLABLE:PatrolZones(ZoneList,Speed,Formation,DelayMin,DelayMax)',
    'CONTROLLABLE:TaskRoute(Points)',
    'CONTROLLABLE:RouteToVec2(Point,Speed)',
    'CONTROLLABLE:RouteToVec3(Point,Speed)',
    'CONTROLLABLE:Route(Route,DelaySeconds)',
    'CONTROLLABLE:RoutePush(Route,DelaySeconds)',
    'CONTROLLABLE:RouteStop()',
    'CONTROLLABLE:RouteResume()',
    'CONTROLLABLE:RouteGroundTo(ToCoordinate,Speed,Formation,DelaySeconds,WaypointFunction,WaypointFunctionArguments)',
    'CONTROLLABLE:RouteGroundOnRoad(ToCoordinate,Speed,DelaySeconds,OffRoadFormation,WaypointFunction,WaypointFunctionArguments)',
    'CONTROLLABLE:RouteGroundOnRailRoads(ToCoordinate,Speed,DelaySeconds,WaypointFunction,WaypointFunctionArguments)',
    'CONTROLLABLE:TaskGroundOnRoad(ToCoordinate,Speed,OffRoadFormation,Shortcut,FromCoordinate,WaypointFunction,WaypointFunctionArguments)',
    'CONTROLLABLE:TaskGroundOnRailRoads(ToCoordinate,Speed,WaypointFunction,WaypointFunctionArguments)',
    'CONTROLLABLE.___PassingWaypoint(controllable,n,N,waypointfunction,...)',
    'CONTROLLABLE:RouteAirTo(ToCoordinate,AltType,Type,Action,Speed,DelaySeconds)',
    'CONTROLLABLE:TaskRouteToZone(Zone,Randomize,Speed,Formation)',
    'CONTROLLABLE:TaskRouteToVec2(Vec2,Speed,Formation)',
    'CONTROLLABLE:CommandDoScript(DoScript)',
    'CONTROLLABLE:GetTaskMission()',
    'CONTROLLABLE:GetTaskRoute()',
    'CONTROLLABLE:CopyRoute(Begin,End,Randomize,Radius)',
    'CONTROLLABLE:GetDetectedTargets(DetectVisual,DetectOptical,DetectRadar,DetectIRST,DetectRWR,DetectDLINK)',
    'CONTROLLABLE:IsTargetDetected(DCSObject,DetectVisual,DetectOptical,DetectRadar,DetectIRST,DetectRWR,DetectDLINK)',
    'CONTROLLABLE:IsUnitDetected(Unit,DetectVisual,DetectOptical,DetectRadar,DetectIRST,DetectRWR,DetectDLINK)',
    'CONTROLLABLE:IsGroupDetected(Group,DetectVisual,DetectOptical,DetectRadar,DetectIRST,DetectRWR,DetectDLINK)',
    'CONTROLLABLE:GetDetectedUnitSet(DetectVisual,DetectOptical,DetectRadar,DetectIRST,DetectRWR,DetectDLINK)',
    'CONTROLLABLE:GetDetectedGroupSet(DetectVisual,DetectOptical,DetectRadar,DetectIRST,DetectRWR,DetectDLINK)',
    'CONTROLLABLE:SetOption(OptionID,OptionValue)',
    'CONTROLLABLE:OptionROE(ROEvalue)',
    'CONTROLLABLE:OptionROEHoldFirePossible()',
    'CONTROLLABLE:OptionROEHoldFire()',
    'CONTROLLABLE:OptionROEReturnFirePossible()',
    'CONTROLLABLE:OptionROEReturnFire()',
    'CONTROLLABLE:OptionROEOpenFirePossible()',
    'CONTROLLABLE:OptionROEOpenFire()',
    'CONTROLLABLE:OptionROEOpenFireWeaponFreePossible()',
    'CONTROLLABLE:OptionROEOpenFireWeaponFree()',
    'CONTROLLABLE:OptionROEWeaponFreePossible()',
    'CONTROLLABLE:OptionROEWeaponFree()',
    'CONTROLLABLE:OptionROTNoReactionPossible()',
    'CONTROLLABLE:OptionROTNoReaction()',
    'CONTROLLABLE:OptionROT(ROTvalue)',
    'CONTROLLABLE:OptionROTPassiveDefensePossible()',
    'CONTROLLABLE:OptionROTPassiveDefense()',
    'CONTROLLABLE:OptionROTEvadeFirePossible()',
    'CONTROLLABLE:OptionROTEvadeFire()',
    'CONTROLLABLE:OptionROTVerticalPossible()',
    'CONTROLLABLE:OptionROTVertical()',
    'CONTROLLABLE:OptionAlarmStateAuto()',
    'CONTROLLABLE:OptionAlarmStateGreen()',
    'CONTROLLABLE:OptionAlarmStateRed()',
    'CONTROLLABLE:OptionRTBBingoFuel(RTB)',
    'CONTROLLABLE:OptionRTBAmmo(WeaponsFlag)',
    'CONTROLLABLE:OptionAllowJettisonWeaponsOnThreat()',
    'CONTROLLABLE:OptionKeepWeaponsOnThreat()',
    'CONTROLLABLE:OptionProhibitAfterburner(Prohibit)',
    'CONTROLLABLE:OptionECM(ECMvalue)',
    'CONTROLLABLE:OptionECM_Never()',
    'CONTROLLABLE:OptionECM_OnlyLockByRadar()',
    'CONTROLLABLE:OptionECM_DetectedLockByRadar()',
    'CONTROLLABLE:OptionECM_AlwaysOn()',
    'CONTROLLABLE:WayPointInitialize(WayPoints)',
    'CONTROLLABLE:GetWayPoints()',
    'CONTROLLABLE:WayPointFunction(WayPoint,WayPointIndex,WayPointFunction,...)',
    'CONTROLLABLE:WayPointExecute(WayPoint,WaitTime)',
    'CONTROLLABLE:IsAirPlane()',
    'CONTROLLABLE:IsHelicopter()',
    'CONTROLLABLE:OptionRestrictBurner(RestrictBurner)',
    'CONTROLLABLE:OptionAAAttackRange(range)',
    'CONTROLLABLE:OptionEngageRange(EngageRange)',
    'CONTROLLABLE:RelocateGroundRandomInRadius(speed,radius,onroad,shortcut,formation)',
    'CONTROLLABLE:OptionDisperseOnAttack(Seconds)',
    'CONTROLLABLE:IsSubmarine()',
    'CONTROLLABLE:SetSpeed(Speed,Keep)',
    'CONTROLLABLE:SetAltitude(Altitude,Keep,AltType)',
    'CONTROLLABLE:TaskAerobatics()',
    'CONTROLLABLE:TaskAerobaticsCandle(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately)',
    'CONTROLLABLE:TaskAerobaticsEdgeFlight(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,FlightTime,Side)',
    'CONTROLLABLE:TaskAerobaticsWingoverFlight(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,FlightTime)',
    'CONTROLLABLE:TaskAerobaticsLoop(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately)',
    'CONTROLLABLE:TaskAerobaticsHorizontalEight(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Side,RollDeg)',
    'CONTROLLABLE:TaskAerobaticsHammerhead(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Side)',
    'CONTROLLABLE:TaskAerobaticsSkewedLoop(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Side,RollDeg)',
    'CONTROLLABLE:TaskAerobaticsTurn(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Side,RollDeg,Pull,Angle)',
    'CONTROLLABLE:TaskAerobaticsDive(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Angle,FinalAltitude)',
    'CONTROLLABLE:TaskAerobaticsMilitaryTurn(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately)',
    'CONTROLLABLE:TaskAerobaticsImmelmann(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately)',
    'CONTROLLABLE:TaskAerobaticsStraightFlight(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,FlightTime)',
    'CONTROLLABLE:TaskAerobaticsClimb(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Angle,FinalAltitude)',
    'CONTROLLABLE:TaskAerobaticsSpiral(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,TurnAngle,Roll,Side,UpDown,Angle)',
    'CONTROLLABLE:TaskAerobaticsSplitS(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,FinalSpeed)',
    'CONTROLLABLE:TaskAerobaticsAileronRoll(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Side,RollRate,TurnAngle,FixAngle)',
    'CONTROLLABLE:TaskAerobaticsForcedTurn(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,TurnAngle,Side,FlightTime,MinSpeed)',
    'CONTROLLABLE:TaskAerobaticsBarrelRoll(TaskAerobatics,Repeats,InitAltitude,InitSpeed,UseSmoke,StartImmediately,Side,RollRate,TurnAngle)',
    'CONTROLLABLE:PatrolRaceTrack(Point1,Point2,Altitude,Speed,Formation,Delay)',
    'GROUP:NewTemplate(GroupTemplate,CoalitionSide,CategoryID,CountryID)',
    'GROUP:Register(GroupName)',
    'GROUP:Find(DCSGroup)',
    'GROUP:FindByName(GroupName)',
    'GROUP:FindByMatching(Pattern)',
    'GROUP:FindAllByMatching(Pattern)',
    'GROUP:GetDCSObject()',
    'GROUP:GetPositionVec3()',
    'GROUP:IsAlive()',
    'GROUP:IsActive()',
    'GROUP:Destroy(GenerateEvent,delay)',
    'GROUP:GetCategory()',
    'GROUP:GetCategoryName()',
    'GROUP:GetCoalition()',
    'GROUP:GetCountry()',
    'GROUP:HasAttribute(attribute,all)',
    'GROUP:GetSpeedMax()',
    'GROUP:GetRange()',
    'GROUP:GetUnits()',
    'GROUP:GetPlayerUnits()',
    'GROUP:IsPlayer()',
    'GROUP:GetUnit(UnitNumber)',
    'GROUP:GetDCSUnit(UnitNumber)',
    'GROUP:GetSize()',
    'GROUP:CountAliveUnits()',
    'GROUP:GetFirstUnitAlive()',
    'GROUP:GetFirstUnit()',
    'GROUP:GetVelocityVec3()',
    'GROUP:GetAltitude(FromGround)',
    'GROUP:GetHeight(FromGround)',
    'GROUP:GetInitialSize()',
    'GROUP:GetDCSUnits()',
    'GROUP:Activate(delay)',
    'GROUP:GetTypeName()',
    'GROUP:GetNatoReportingName()',
    'GROUP:GetPlayerName()',
    'GROUP:GetCallsign()',
    'GROUP:GetVec2()',
    'GROUP:GetVec3()',
    'GROUP:GetAverageVec3()',
    'GROUP:GetPointVec2()',
    'GROUP:GetAverageCoordinate()',
    'GROUP:GetCoordinate()',
    'GROUP:GetRandomVec3(Radius)',
    'GROUP:GetHeading()',
    'GROUP:GetFuelMin()',
    'GROUP:GetFuelAvg()',
    'GROUP:GetFuel()',
    'GROUP:GetAmmunition()',
    'GROUP:IsInZone(Zone)',
    'GROUP:IsCompletelyInZone(Zone)',
    'GROUP:IsPartlyInZone(Zone)',
    'GROUP:IsPartlyOrCompletelyInZone(Zone)',
    'GROUP:IsNotInZone(Zone)',
    'GROUP:IsAnyInZone(Zone)',
    'GROUP:CountInZone(Zone)',
    'GROUP:IsAir()',
    'GROUP:IsHelicopter()',
    'GROUP:IsAirPlane()',
    'GROUP:IsGround()',
    'GROUP:IsShip()',
    'GROUP:AllOnGround()',
    'GROUP:SetAIOnOff(AIOnOff)',
    'GROUP:SetAIOn()',
    'GROUP:SetAIOff()',
    'GROUP:GetMaxVelocity()',
    'GROUP:GetMinHeight()',
    'GROUP:GetMaxHeight()',
    'GROUP:GetTemplate()',
    'GROUP:GetTemplateRoutePoints()',
    'GROUP:SetTemplateControlled(Template,Controlled)',
    'GROUP:SetTemplateCountry(Template,CountryID)',
    'GROUP:SetTemplateCoalition(Template,CoalitionID)',
    'GROUP:InitHeading(Heading)',
    'GROUP:InitHeight(Height)',
    'GROUP:InitZone(Zone)',
    'GROUP:InitRandomizePositionZone(PositionZone)',
    'GROUP:InitRandomizePositionRadius(OuterRadius,InnerRadius)',
    'GROUP:InitCoordinate(coordinate)',
    'GROUP:InitRadioCommsOnOff(switch)',
    'GROUP:InitRadioFrequency(frequency)',
    'GROUP:InitRadioModulation(modulation)',
    'GROUP:InitModex(modex)',
    'GROUP:Respawn(Template,Reset)',
    'GROUP:RespawnAtCurrentAirbase(SpawnTemplate,Takeoff,Uncontrolled)',
    'GROUP:GetTaskMission()',
    'GROUP:GetTaskRoute()',
    'GROUP:CopyRoute(Begin,End,Randomize,Radius)',
    'GROUP:CalculateThreatLevelA2G()',
    'GROUP:GetThreatLevel()',
    'GROUP:InAir()',
    'GROUP:IsAirborne(AllUnits)',
    'GROUP:GetDCSDesc(n)',
    'GROUP:GetAttribute()',
    'GROUP:RouteRTB(RTBAirbase,Speed)',
    'GROUP:OnReSpawn(ReSpawnFunction)',
    'GROUP:HandleEvent(Event,EventFunction,...)',
    'GROUP:UnHandleEvent(Event)',
    'GROUP:ResetEvents()',
    'GROUP:GetPlayerNames()',
    'GROUP:GetPlayerCount()',
    'GROUP:EnableEmission(switch)',
    'GROUP:SetCommandInvisible(switch)',
    'GROUP:SetCommandImmortal(switch)',
    'GROUP:GetSkill()',
    'GROUP:GetHighestThreat()',
    'GROUP:GetCustomCallSign(ShortCallsign,Keepnumber,CallsignTranslations)',
    'GROUP:SetAsRecoveryTanker(CarrierGroup,Speed,ToKIAS,Altitude,Delay,LastWaypoint)',
    'GROUP:GetGroupSTN()',
    'UNIT:Register(UnitName)',
    'UNIT:Find(DCSUnit)',
    'UNIT:FindByName(UnitName)',
    'UNIT:FindByMatching(Pattern)',
    'UNIT:FindAllByMatching(Pattern)',
    'UNIT:Name()',
    'UNIT:GetDCSObject()',
    'UNIT:GetAltitude(FromGround)',
    'UNIT:ReSpawnAt(Coordinate,Heading)',
    'UNIT:IsActive()',
    'UNIT:IsExist()',
    'UNIT:IsAlive()',
    'UNIT:IsDead()',
    'UNIT:GetCallsign()',
    'UNIT:IsPlayer()',
    'UNIT:GetPlayerName()',
    'UNIT:IsClient()',
    'UNIT:GetClient()',
    'UNIT:GetNatoReportingName()',
    'UNIT:GetNumber()',
    'UNIT:GetSpeedMax()',
    'UNIT:GetRange()',
    'UNIT:IsRefuelable()',
    'UNIT:IsTanker()',
    'UNIT:IsAmmoSupply()',
    'UNIT:IsFuelSupply()',
    'UNIT:GetGroup()',
    'UNIT:GetPrefix()',
    'UNIT:GetAmmo()',
    'UNIT:SetUnitInternalCargo(mass)',
    'UNIT:GetAmmunition()',
    'UNIT:GetSensors()',
    'UNIT:HasSensors(...)',
    'UNIT:HasSEAD()',
    'UNIT:GetRadar()',
    'UNIT:GetFuel()',
    'UNIT:GetUnits()',
    'UNIT:GetLife()',
    'UNIT:GetLife0()',
    'UNIT:GetLifeRelative()',
    'UNIT:GetDamageRelative()',
    'UNIT:GetDrawArgumentValue(AnimationArgument)',
    'UNIT:GetUnitCategory()',
    'UNIT:GetCategoryName()',
    'UNIT:GetThreatLevel()',
    'UNIT:Explode(power,delay)',
    'UNIT:OtherUnitInRadius(AwaitUnit,Radius)',
    'UNIT:IsFriendly(FriendlyCoalition)',
    'UNIT:IsShip()',
    'UNIT:InAir(NoHeloCheck)',
    'UNIT:HandleEvent(EventID,EventFunction)',
    'UNIT:UnHandleEvent(EventID)',
    'UNIT:ResetEvents()',
    'UNIT:IsDetected(TargetUnit)',
    'UNIT:IsLOS(TargetUnit)',
    'UNIT:KnowUnit(TargetUnit,TypeKnown,DistanceKnown)',
    'UNIT:GetTemplate()',
    'UNIT:GetTemplatePayload()',
    'UNIT:GetTemplatePylons()',
    'UNIT:GetTemplateFuel()',
    'UNIT:EnableEmission(switch)',
    'UNIT:GetSkill()',
    'UNIT:GetSTN()',
    'CLIENT:Find(DCSUnit,Error)',
    'CLIENT:FindByPlayerName(Name)',
    'CLIENT:FindByName(ClientName,ClientBriefing,Error)',
    'CLIENT:Register(ClientName)',
    'CLIENT:Transport()',
    'CLIENT:AddBriefing(ClientBriefing)',
    'CLIENT:AddPlayer(PlayerName)',
    'CLIENT:GetPlayers()',
    'CLIENT:GetPlayer()',
    'CLIENT:RemovePlayer(PlayerName)',
    'CLIENT:RemovePlayers()',
    'CLIENT:ShowBriefing()',
    'CLIENT:ShowMissionBriefing(MissionBriefing)',
    'CLIENT:Reset(ClientName)',
    'CLIENT:IsMultiSeated()',
    'CLIENT:Alive(CallBackFunction,...)',
    'CLIENT:_AliveCheckScheduler(SchedulerName)',
    'CLIENT:GetDCSGroup()',
    'CLIENT:GetClientGroupID()',
    'CLIENT:GetClientGroupName()',
    'CLIENT:GetClientGroupUnit()',
    'CLIENT:GetClientGroupDCSUnit()',
    'CLIENT:IsTransport()',
    'CLIENT:ShowCargo()',
    'CLIENT:Message(Message,MessageDuration,MessageCategory,MessageInterval,MessageID)',
    'CLIENT:GetUCID()',
    'CLIENT:GetPlayerInfo(Attribute)',
    'STATIC:Register(StaticName)',
    'STATIC:GetLife0()',
    'STATIC:GetLife()',
    'STATIC:Find(DCSStatic)',
    'STATIC:FindByName(StaticName,RaiseError)',
    'STATIC:Destroy(GenerateEvent)',
    'STATIC:GetDCSObject()',
    'STATIC:GetUnits()',
    'STATIC:GetThreatLevel()',
    'STATIC:SpawnAt(Coordinate,Heading,Delay)',
    'STATIC:ReSpawn(CountryID,Delay)',
    'STATIC:ReSpawnAt(Coordinate,Heading,Delay)',
    'AIRBASE:Register(AirbaseName)',
    'AIRBASE:Find(DCSAirbase)',
    'AIRBASE:FindByName(AirbaseName)',
    'AIRBASE:FindByID(id)',
    'AIRBASE:GetDCSObject()',
    'AIRBASE:GetZone()',
    'AIRBASE:GetWarehouse()',
    'AIRBASE:GetStorage()',
    'AIRBASE:SetAutoCapture(Switch)',
    'AIRBASE:SetAutoCaptureON()',
    'AIRBASE:SetAutoCaptureOFF()',
    'AIRBASE:IsAutoCapture()',
    'AIRBASE:SetCoalition(Coal)',
    'AIRBASE.GetAllAirbases(coalition,category)',
    'AIRBASE.GetAllAirbaseNames(coalition,category)',
    'AIRBASE:GetID(unique)',
    'AIRBASE:SetParkingSpotWhitelist(TerminalIdWhitelist)',
    'AIRBASE:SetParkingSpotBlacklist(TerminalIdBlacklist)',
    'AIRBASE:SetRadioSilentMode(Silent)',
    'AIRBASE:GetRadioSilentMode()',
    'AIRBASE:GetAirbaseCategory()',
    'AIRBASE:IsAirdrome()',
    'AIRBASE:IsHelipad()',
    'AIRBASE:IsShip()',
    'AIRBASE:GetParkingData(available)',
    'AIRBASE:GetParkingSpotsNumber(termtype)',
    'AIRBASE:GetFreeParkingSpotsNumber(termtype,allowTOAC)',
    'AIRBASE:GetFreeParkingSpotsCoordinates(termtype,allowTOAC)',
    'AIRBASE:GetParkingSpotsCoordinates(termtype)',
    'AIRBASE:_InitParkingSpots()',
    'AIRBASE:_GetParkingSpotByID(TerminalID)',
    'AIRBASE:GetParkingSpotsTable(termtype)',
    'AIRBASE:GetFreeParkingSpotsTable(termtype,allowTOAC)',
    'AIRBASE:GetParkingSpotData(TerminalID)',
    'AIRBASE:MarkParkingSpots(termtype,mark)',
    'AIRBASE:FindFreeParkingSpotForAircraft(group,terminaltype,scanradius,scanunits,scanstatics,scanscenery,verysafe,nspots,parkingdata)',
    'AIRBASE:_CheckParkingLists(TerminalID)',
    'AIRBASE._CheckTerminalType(Term_Type,termtype)',
    'AIRBASE:GetRunways()',
    'AIRBASE:GetRunwayByName(Name)',
    'AIRBASE:_InitRunways(IncludeInverse)',
    'AIRBASE:GetRunwayData(magvar,mark)',
    'AIRBASE:SetActiveRunway(Name,PreferLeft)',
    'AIRBASE:SetActiveRunwayLanding(Name,PreferLeft)',
    'AIRBASE:GetActiveRunway()',
    'AIRBASE:GetActiveRunwayLanding()',
    'AIRBASE:GetActiveRunwayTakeoff()',
    'AIRBASE:SetActiveRunwayTakeoff(Name,PreferLeft)',
    'AIRBASE:GetRunwayIntoWind(PreferLeft)',
    'AIRBASE:GetRunwayName(Runway,LongLeftRight)',
    'AIRBASE:CheckOnRunWay(group,radius,despawn)',
    'AIRBASE:GetCategory()',
    'AIRBASE:GetCategoryName()',
    'SCENERY:Register(SceneryName,SceneryObject)',
    'SCENERY:GetProperty(PropertyName)',
    'SCENERY:GetAllProperties()',
    'SCENERY:SetProperty(PropertyName,PropertyValue)',
    'SCENERY:GetName()',
    'SCENERY:GetDCSObject()',
    'SCENERY:GetLife()',
    'SCENERY:GetLife0()',
    'SCENERY:IsAlive()',
    'SCENERY:IsDead()',
    'SCENERY:GetThreatLevel()',
    'SCENERY:FindByName(Name,Coordinate,Radius,Role)',
    'SCENERY:FindByNameInZone(Name,Zone,Radius)',
    'SCENERY:FindByZoneName(ZoneName)',
    'SCENERY:FindAllByZoneName(ZoneName)',
    'SCENERY:Destroy()',
    'MARKER:New(Coordinate,Text)',
    'MARKER:ReadOnly()',
    'MARKER:ReadWrite()',
    'MARKER:Message(Text)',
    'MARKER:ToAll(Delay)',
    'MARKER:ToCoalition(Coalition,Delay)',
    'MARKER:ToBlue(Delay)',
    'MARKER:ToRed(Delay)',
    'MARKER:ToNeutral(Delay)',
    'MARKER:ToGroup(Group,Delay)',
    'MARKER:UpdateText(Text,Delay)',
    'MARKER:UpdateCoordinate(Coordinate,Delay)',
    'MARKER:Refresh(Delay)',
    'MARKER:Remove(Delay)',
    'MARKER:GetCoordinate()',
    'MARKER:GetText()',
    'MARKER:SetText(Text)',
    'MARKER:IsVisible()',
    'MARKER:IsInvisible()',
    'MARKER:OnEventMarkAdded(EventData)',
    'MARKER:OnEventMarkRemoved(EventData)',
    'MARKER:OnEventMarkChange(EventData)',
    'MARKER:onafterAdded(From,Event,To,EventData)',
    'MARKER:onafterRemoved(From,Event,To,EventData)',
    'MARKER:onafterChanged(From,Event,To,EventData)',
    'MARKER:onafterTextUpdate(From,Event,To,Text)',
    'MARKER:onafterCoordUpdate(From,Event,To,Coordinate)',
    'WEAPON:New(WeaponObject)',
    'WEAPON:SetVerbosity(VerbosityLevel)',
    'WEAPON:SetTimeStepTrack(TimeStep)',
    'WEAPON:SetDistanceInterceptPoint(Distance)',
    'WEAPON:SetMarkImpact(Switch)',
    'WEAPON:SetSmokeImpact(Switch,SmokeColor)',
    'WEAPON:SetFuncTrack(FuncTrack,...)',
    'WEAPON:SetFuncImpact(FuncImpact,...)',
    'WEAPON:GetLauncher()',
    'WEAPON:GetTarget()',
    'WEAPON:GetTargetDistance(ConversionFunction)',
    'WEAPON:GetTargetName()',
    'WEAPON:GetVelocityVec3()',
    'WEAPON:GetSpeed(ConversionFunction)',
    'WEAPON:GetVec3()',
    'WEAPON:GetVec2()',
    'WEAPON:GetTypeName()',
    'WEAPON:GetCoalition()',
    'WEAPON:GetCountry()',
    'WEAPON:GetDCSObject()',
    'WEAPON:GetImpactVec3()',
    'WEAPON:GetImpactCoordinate()',
    'WEAPON:GetReleaseHeading(AccountForMagneticInclination)',
    'WEAPON:GetReleaseAltitudeASL()',
    'WEAPON:GetReleaseAltitudeAGL()',
    'WEAPON:GetReleaseCoordinate()',
    'WEAPON:GetReleasePitch()',
    'WEAPON:GetImpactHeading(AccountForMagneticInclination)',
    'WEAPON:InAir()',
    'WEAPON:IsExist()',
    'WEAPON:IsBomb()',
    'WEAPON:IsMissile()',
    'WEAPON:IsRocket()',
    'WEAPON:IsShell()',
    'WEAPON:IsTorpedo()',
    'WEAPON:Destroy(Delay)',
    'WEAPON:StartTrack(Delay)',
    'WEAPON:StopTrack(Delay)',
    'WEAPON:_TrackWeapon(time)',
    'WEAPON:_GetIP(Distance)',
    'NET:New()',
    'NET:IsAnyBlocked(UCID,Name,PlayerID,PlayerSide,PlayerSlot)',
    'NET:_EventHandler(EventData)',
    'NET:BlockPlayer(Client,PlayerName,Seconds,Message)',
    'NET:BlockPlayerSet(PlayerSet,Seconds,Message)',
    'NET:UnblockPlayerSet(PlayerSet,Message)',
    'NET:BlockUCID(ucid,Seconds)',
    'NET:UnblockUCID(ucid)',
    'NET:BlockSide(Side,Seconds)',
    'NET:UnblockSide(Side,Seconds)',
    'NET:BlockSlot(Slot,Seconds)',
    'NET:UnblockSlot(Slot)',
    'NET:UnblockPlayer(Client,PlayerName,Message)',
    'NET:SetBlockMessage(Text)',
    'NET:SetBlockTime(Seconds)',
    'NET:SetUnblockMessage(Text)',
    'NET:SendChat(Message,ToAll)',
    'NET:GetPlayerIDByName(Name)',
    'NET:GetPlayerIDFromClient(Client)',
    'NET:SendChatToClient(Message,ToClient,FromClient)',
    'NET:SendChatToPlayer(Message,ToPlayer,FromPlayer)',
    'NET:LoadMission(Path)',
    'NET:LoadNextMission()',
    'NET:GetPlayerList()',
    'NET:GetMyPlayerID()',
    'NET:GetServerID()',
    'NET:GetPlayerInfo(Client,Attribute)',
    'NET:GetPlayerUCID(Client,Name)',
    'NET:Kick(Client,Message)',
    'NET:GetPlayerStatistic(Client,StatisticID)',
    'NET:GetName(Client)',
    'NET:GetSlot(Client)',
    'NET:ForceSlot(Client,SideID,SlotID)',
    'NET:ReturnToSpectators(Client)',
    'NET.Lua2Json(Lua)',
    'NET.Lua2Json(Json)',
    'NET:DoStringIn(State,DoString)',
    'NET:Log(Message)',
    'NET:GetKnownPilotData(Client,Name)',
    'NET:onafterStatus(From,Event,To)',
    'NET:onafterRun(From,Event,To)',
    'NET:onafterStop(From,Event,To)',
    'STORAGE:New(AirbaseName)',
    'STORAGE:FindByName(AirbaseName)',
    'STORAGE:SetVerbosity(VerbosityLevel)',
    'STORAGE:AddItem(Name,Amount)',
    'STORAGE:SetItem(Name,Amount)',
    'STORAGE:GetItemAmount(Name)',
    'STORAGE:RemoveItem(Name,Amount)',
    'STORAGE:AddLiquid(Type,Amount)',
    'STORAGE:SetLiquid(Type,Amount)',
    'STORAGE:RemoveLiquid(Type,Amount)',
    'STORAGE:GetLiquidAmount(Type)',
    'STORAGE:GetLiquidName(Type)',
    'STORAGE:AddAmount(Type,Amount)',
    'STORAGE:RemoveAmount(Type,Amount)',
    'STORAGE:SetAmount(Type,Amount)',
    'STORAGE:GetAmount(Type)',
    'STORAGE:IsUnlimited(Type)',
    'STORAGE:IsLimited(Type)',
    'STORAGE:IsUnlimitedAircraft()',
    'STORAGE:IsUnlimitedLiquids()',
    'STORAGE:IsUnlimitedWeapons()',
    'STORAGE:IsLimitedAircraft()',
    'STORAGE:IsLimitedLiquids()',
    'STORAGE:IsLimitedWeapons()',
    'STORAGE:GetInventory(Item)',
    'CARGO:New(Type,Name,Weight,LoadRadius,NearRadius)',
    'CARGO:FindByName(CargoName)',
    'CARGO:GetX()',
    'CARGO:GetY()',
    'CARGO:GetHeading()',
    'CARGO:CanSlingload()',
    'CARGO:CanBoard()',
    'CARGO:CanUnboard()',
    'CARGO:CanLoad()',
    'CARGO:CanUnload()',
    'CARGO:Destroy()',
    'CARGO:GetName()',
    'CARGO:GetObject()',
    'CARGO:GetObjectName()',
    'CARGO:GetCount()',
    'CARGO:GetType()',
    'CARGO:GetTransportationMethod()',
    'CARGO:GetCoalition()',
    'CARGO:GetCoordinate()',
    'CARGO:IsDestroyed()',
    'CARGO:IsLoaded()',
    'CARGO:IsLoadedInCarrier(Carrier)',
    'CARGO:IsUnLoaded()',
    'CARGO:IsBoarding()',
    'CARGO:IsUnboarding()',
    'CARGO:IsAlive()',
    'CARGO:SetDeployed(Deployed)',
    'CARGO:IsDeployed()',
    'CARGO:Spawn(PointVec2)',
    'CARGO:Flare(FlareColor)',
    'CARGO:FlareWhite()',
    'CARGO:FlareYellow()',
    'CARGO:FlareGreen()',
    'CARGO:FlareRed()',
    'CARGO:Smoke(SmokeColor,Radius)',
    'CARGO:SmokeGreen()',
    'CARGO:SmokeRed()',
    'CARGO:SmokeWhite()',
    'CARGO:SmokeOrange()',
    'CARGO:SmokeBlue()',
    'CARGO:SetLoadRadius(LoadRadius)',
    'CARGO:GetLoadRadius()',
    'CARGO:IsInLoadRadius(Coordinate)',
    'CARGO:IsInReportRadius(Coordinate)',
    'CARGO:IsNear(Coordinate,NearRadius)',
    'CARGO:IsInZone(Zone)',
    'CARGO:GetPointVec2()',
    'CARGO:GetCoordinate()',
    'CARGO:GetWeight()',
    'CARGO:SetWeight(Weight)',
    'CARGO:GetVolume()',
    'CARGO:SetVolume(Volume)',
    'CARGO:MessageToGroup(Message,CarrierGroup,Name)',
    'CARGO:Report(ReportText,Action,CarrierGroup)',
    'CARGO:ReportFlare(FlareColor)',
    'CARGO:ReportSmoke(SmokeColor)',
    'CARGO:ReportReset(Action,CarrierGroup)',
    'CARGO:ReportResetAll(CarrierGroup)',
    'CARGO:RespawnOnDestroyed(RespawnDestroyed)',
    'CARGO_REPRESENTABLE:New(CargoObject,Type,Name,LoadRadius,NearRadius)',
    'CARGO_REPRESENTABLE:Destroy()',
    'CARGO_REPRESENTABLE:RouteTo(ToPointVec2,Speed)',
    'CARGO_REPRESENTABLE:MessageToGroup(Message,TaskGroup,Name)',
    'CARGO_REPORTABLE:New(Type,Name,Weight,LoadRadius,NearRadius)',
    'CARGO_REPORTABLE:MessageToGroup(Message,TaskGroup,Name)',
    'CARGO_PACKAGE:New(CargoCarrier,Type,Name,Weight,LoadRadius,NearRadius)',
    'CARGO_PACKAGE:onafterOnBoard(From,Event,To,CargoCarrier,Speed,BoardDistance,LoadDistance,Angle)',
    'CARGO_PACKAGE:IsNear(CargoCarrier)',
    'CARGO_PACKAGE:onafterOnBoarded(From,Event,To,CargoCarrier,Speed,BoardDistance,LoadDistance,Angle)',
    'CARGO_PACKAGE:onafterUnBoard(From,Event,To,CargoCarrier,Speed,UnLoadDistance,UnBoardDistance,Radius,Angle)',
    'CARGO_PACKAGE:onafterUnBoarded(From,Event,To,CargoCarrier,Speed)',
    'CARGO_PACKAGE:onafterLoad(From,Event,To,CargoCarrier,Speed,LoadDistance,Angle)',
    'CARGO_PACKAGE:onafterUnLoad(From,Event,To,CargoCarrier,Speed,Distance,Angle)',
    'CARGO_UNIT:New(CargoUnit,Type,Name,LoadRadius,NearRadius)',
    'CARGO_UNIT:onenterUnBoarding(From,Event,To,ToPointVec2,NearRadius)',
    'CARGO_UNIT:onleaveUnBoarding(From,Event,To,ToPointVec2,NearRadius)',
    'CARGO_UNIT:onafterUnBoarding(From,Event,To,ToPointVec2,NearRadius)',
    'CARGO_UNIT:onenterUnLoaded(From,Event,To,ToPointVec2)',
    'CARGO_UNIT:onafterBoard(From,Event,To,CargoCarrier,NearRadius,...)',
    'CARGO_UNIT:onafterBoarding(From,Event,To,CargoCarrier,NearRadius,...)',
    'CARGO_UNIT:onenterLoaded(From,Event,To,CargoCarrier)',
    'CARGO_UNIT:GetTransportationMethod()',
    'CARGO_SLINGLOAD:New(CargoStatic,Type,Name,LoadRadius,NearRadius)',
    'CARGO_SLINGLOAD:OnEventCargoDead(EventData)',
    'CARGO_SLINGLOAD:CanSlingload()',
    'CARGO_SLINGLOAD:CanBoard()',
    'CARGO_SLINGLOAD:CanUnboard()',
    'CARGO_SLINGLOAD:CanLoad()',
    'CARGO_SLINGLOAD:CanUnload()',
    'CARGO_SLINGLOAD:IsInReportRadius(Coordinate)',
    'CARGO_SLINGLOAD:IsInLoadRadius(Coordinate)',
    'CARGO_SLINGLOAD:GetCoordinate()',
    'CARGO_SLINGLOAD:IsAlive()',
    'CARGO_SLINGLOAD:RouteTo(Coordinate)',
    'CARGO_SLINGLOAD:IsNear(CargoCarrier,NearRadius)',
    'CARGO_SLINGLOAD:Respawn()',
    'CARGO_SLINGLOAD:onafterReset()',
    'CARGO_SLINGLOAD:GetTransportationMethod()',
    'CARGO_CRATE:New(CargoStatic,Type,Name,LoadRadius,NearRadius)',
    'CARGO_CRATE:OnEventCargoDead(EventData)',
    'CARGO_CRATE:onenterUnLoaded(From,Event,To,ToPointVec2)',
    'CARGO_CRATE:onenterLoaded(From,Event,To,CargoCarrier)',
    'CARGO_CRATE:CanBoard()',
    'CARGO_CRATE:CanUnboard()',
    'CARGO_CRATE:CanSlingload()',
    'CARGO_CRATE:IsInReportRadius(Coordinate)',
    'CARGO_CRATE:IsInLoadRadius(Coordinate)',
    'CARGO_CRATE:GetCoordinate()',
    'CARGO_CRATE:IsAlive()',
    'CARGO_CRATE:RouteTo(Coordinate)',
    'CARGO_CRATE:IsNear(CargoCarrier,NearRadius)',
    'CARGO_CRATE:Respawn()',
    'CARGO_CRATE:onafterReset()',
    'CARGO_CRATE:GetTransportationMethod()',
    'CARGO_GROUP:New(CargoGroup,Type,Name,LoadRadius,NearRadius)',
    'CARGO_GROUP:Respawn()',
    'CARGO_GROUP:Ungroup()',
    'CARGO_GROUP:Regroup()',
    'CARGO_GROUP:OnEventCargoDead(EventData)',
    'CARGO_GROUP:onafterBoard(From,Event,To,CargoCarrier,NearRadius,...)',
    'CARGO_GROUP:onafterLoad(From,Event,To,CargoCarrier,...)',
    'CARGO_GROUP:onafterBoarding(From,Event,To,CargoCarrier,NearRadius,...)',
    'CARGO_GROUP:onafterUnBoard(From,Event,To,ToPointVec2,NearRadius,...)',
    'CARGO_GROUP:onafterUnBoarding(From,Event,To,ToPointVec2,NearRadius,...)',
    'CARGO_GROUP:onafterUnLoad(From,Event,To,ToPointVec2,...)',
    'CARGO_GROUP:GetCoordinate()',
    'CARGO:GetX()',
    'CARGO:GetY()',
    'CARGO_GROUP:IsAlive()',
    'CARGO_GROUP:GetFirstAlive()',
    'CARGO_GROUP:GetCount()',
    'CARGO_GROUP:GetGroup(Cargo)',
    'CARGO_GROUP:RouteTo(Coordinate)',
    'CARGO_GROUP:IsNear(CargoCarrier,NearRadius)',
    'CARGO_GROUP:IsInLoadRadius(Coordinate)',
    'CARGO_GROUP:IsInReportRadius(Coordinate)',
    'CARGO_GROUP:Flare(FlareColor)',
    'CARGO_GROUP:Smoke(SmokeColor,Radius)',
    'CARGO_GROUP:IsInZone(Zone)',
    'CARGO_GROUP:GetTransportationMethod()',
    'SCORING:New(GameName)',
    'SCORING:SetDisplayMessagePrefix(DisplayMessagePrefix)',
    'SCORING:SetScaleDestroyScore(Scale)',
    'SCORING:SetScaleDestroyPenalty(Scale)',
    'SCORING:AddUnitScore(ScoreUnit,Score)',
    'SCORING:RemoveUnitScore(ScoreUnit)',
    'SCORING:AddStaticScore(ScoreStatic,Score)',
    'SCORING:RemoveStaticScore(ScoreStatic)',
    'SCORING:AddScoreGroup(ScoreGroup,Score)',
    'SCORING:AddZoneScore(ScoreZone,Score)',
    'SCORING:RemoveZoneScore(ScoreZone)',
    'SCORING:SetMessagesHit(OnOff)',
    'SCORING:IfMessagesHit()',
    'SCORING:SetMessagesDestroy(OnOff)',
    'SCORING:IfMessagesDestroy()',
    'SCORING:SetMessagesScore(OnOff)',
    'SCORING:IfMessagesScore()',
    'SCORING:SetMessagesZone(OnOff)',
    'SCORING:IfMessagesZone()',
    'SCORING:SetMessagesToAll()',
    'SCORING:IfMessagesToAll()',
    'SCORING:SetMessagesToCoalition()',
    'SCORING:IfMessagesToCoalition()',
    'SCORING:SetFratricide(Fratricide)',
    'SCORING:SwitchFratricide(OnOff)',
    'SCORING:SwitchTreason(OnOff)',
    'SCORING:SetCoalitionChangePenalty(CoalitionChangePenalty)',
    'SCORING:SetScoringMenu(ScoringGroup)',
    'SCORING:_AddPlayerFromUnit(UnitData)',
    'SCORING:AddGoalScorePlayer(PlayerName,GoalTag,Text,Score)',
    'SCORING:AddGoalScore(PlayerUnit,GoalTag,Text,Score)',
    'SCORING:_AddMissionTaskScore(Mission,PlayerUnit,Text,Score)',
    'SCORING:_AddMissionGoalScore(Mission,PlayerName,Text,Score)',
    'SCORING:_AddMissionScore(Mission,Text,Score)',
    'SCORING:OnEventBirth(Event)',
    'SCORING:OnEventPlayerLeaveUnit(Event)',
    'SCORING:_EventOnHit(Event)',
    'SCORING:_EventOnDeadOrCrash(Event)',
    'SCORING:ReportDetailedPlayerHits(PlayerName)',
    'SCORING:ReportDetailedPlayerDestroys(PlayerName)',
    'SCORING:ReportDetailedPlayerCoalitionChanges(PlayerName)',
    'SCORING:ReportDetailedPlayerGoals(PlayerName)',
    'SCORING:ReportDetailedPlayerMissions(PlayerName)',
    'SCORING:ReportScoreGroupSummary(PlayerGroup)',
    'SCORING:ReportScoreGroupDetailed(PlayerGroup)',
    'SCORING:ReportScoreAllSummary(PlayerGroup)',
    'SCORING:SecondsToClock(sSeconds)',
    'SCORING:OpenCSV(ScoringCSV)',
    'SCORING:ScoreCSV(PlayerName,TargetPlayerName,ScoreType,ScoreTimes,ScoreAmount,PlayerUnitName,PlayerUnitCoalition,PlayerUnitCategory,PlayerUnitType,TargetUnitName,TargetUnitCoalition,TargetUnitCategory,TargetUnitType)',
    'SCORING:CloseCSV()',
    'SCORING:SwitchAutoSave(OnOff)',
    'CLEANUP_AIRBASE:New(AirbaseNames)',
    'CLEANUP_AIRBASE:AddAirbase(AirbaseName)',
    'CLEANUP_AIRBASE:RemoveAirbase(AirbaseName)',
    'CLEANUP_AIRBASE:SetCleanMissiles(CleanMissiles)',
    'MOVEMENT:New(MovePrefixes,MoveMaximum)',
    'MOVEMENT:ScheduleStart()',
    'MOVEMENT:ScheduleStop()',
    'MOVEMENT:OnEventBirth(EventData)',
    'MOVEMENT:OnDeadOrCrash(Event)',
    'MOVEMENT:_Scheduler()',
    'SEAD:New(SEADGroupPrefixes,Padding)',
    'SEAD:UpdateSet(SEADGroupPrefixes)',
    'SEAD:SetEngagementRange(range)',
    'SEAD:SetPadding(Padding)',
    'SEAD:SwitchEmissions(Switch)',
    'SEAD:AddCallBack(Object)',
    'SEAD:_CheckHarms(WeaponName)',
    'SEAD:_GetDistance(_point1,_point2)',
    'SEAD:onafterCalculateHitZone(From,Event,To,SEADWeapon,pos0,height,SEADGroup,SEADWeaponName)',
    'SEAD:onafterManageEvasion(From,Event,To,_targetskill,_targetgroup,SEADPlanePos,SEADWeaponName,SEADGroup,timeoffset,Weapon)',
    'SEAD:HandleEventShot(EventData)',
    'ESCORT:New(EscortClient,EscortGroup,EscortName,EscortBriefing)',
    'ESCORT:SetDetection(Detection)',
    'ESCORT:TestSmokeDirectionVector(SmokeDirection)',
    'ESCORT:Menus()',
    'ESCORT:MenuFollowAt(Distance)',
    'ESCORT:MenuHoldAtEscortPosition(Height,Seconds,MenuTextFormat)',
    'ESCORT:MenuHoldAtLeaderPosition(Height,Seconds,MenuTextFormat)',
    'ESCORT:MenuScanForTargets(Height,Seconds,MenuTextFormat)',
    'ESCORT:MenuFlare(MenuTextFormat)',
    'ESCORT:MenuSmoke(MenuTextFormat)',
    'ESCORT:MenuReportTargets(Seconds)',
    'ESCORT:MenuAssistedAttack()',
    'ESCORT:MenuROE(MenuTextFormat)',
    'ESCORT:MenuEvasion(MenuTextFormat)',
    'ESCORT:MenuResumeMission()',
    'ESCORT:_HoldPosition(OrbitGroup,OrbitHeight,OrbitSeconds)',
    'ESCORT:_JoinUpAndFollow(Distance)',
    'ESCORT:JoinUpAndFollow(EscortGroup,EscortClient,Distance)',
    'ESCORT:_Flare(Color,Message)',
    'ESCORT:_Smoke(Color,Message)',
    'ESCORT:_ReportNearbyTargetsNow()',
    'ESCORT:_SwitchReportNearbyTargets(ReportTargets)',
    'ESCORT:_ScanTargets(ScanDuration)',
    'ESCORT:_AttackTarget(DetectedItem)',
    'ESCORT:_AssistTarget(EscortGroupAttack,DetectedItem)',
    'ESCORT:_ROE(EscortROEFunction,EscortROEMessage)',
    'ESCORT:_ROT(EscortROTFunction,EscortROTMessage)',
    'ESCORT:_ResumeMission(WayPoint)',
    'ESCORT:RegisterRoute()',
    'ESCORT:_FollowScheduler()',
    'ESCORT:_ReportTargetsScheduler()',
    'MISSILETRAINER._Alive(Client,self)',
    'MISSILETRAINER:New(Distance,Briefing)',
    'MISSILETRAINER:InitMessagesOnOff(MessagesOnOff)',
    'MISSILETRAINER:InitTrackingToAll(TrackingToAll)',
    'MISSILETRAINER:InitTrackingOnOff(TrackingOnOff)',
    'MISSILETRAINER:InitTrackingFrequency(TrackingFrequency)',
    'MISSILETRAINER:InitAlertsToAll(AlertsToAll)',
    'MISSILETRAINER:InitAlertsHitsOnOff(AlertsHitsOnOff)',
    'MISSILETRAINER:InitAlertsLaunchesOnOff(AlertsLaunchesOnOff)',
    'MISSILETRAINER:InitRangeOnOff(DetailsRangeOnOff)',
    'MISSILETRAINER:InitBearingOnOff(DetailsBearingOnOff)',
    'MISSILETRAINER:InitMenusOnOff(MenusOnOff)',
    'MISSILETRAINER._MenuMessages(MenuParameters)',
    'MISSILETRAINER:OnEventShot(EVentData)',
    'MISSILETRAINER:_AddRange(Client,TrainerWeapon)',
    'MISSILETRAINER:_AddBearing(Client,TrainerWeapon)',
    'MISSILETRAINER:_TrackMissiles()',
    'ATC_GROUND:New(Airbases,AirbaseList)',
    'ATC_GROUND:SmokeRunways(SmokeColor)',
    'ATC_GROUND:SetKickSpeed(KickSpeed,Airbase)',
    'ATC_GROUND:SetKickSpeedKmph(KickSpeed,Airbase)',
    'ATC_GROUND:SetKickSpeedMiph(KickSpeedMiph,Airbase)',
    'ATC_GROUND:SetMaximumKickSpeed(MaximumKickSpeed,Airbase)',
    'ATC_GROUND:SetMaximumKickSpeedKmph(MaximumKickSpeed,Airbase)',
    'ATC_GROUND:SetMaximumKickSpeedMiph(MaximumKickSpeedMiph,Airbase)',
    'ATC_GROUND:_AirbaseMonitor()',
    'ATC_GROUND_UNIVERSAL:New(AirbaseList)',
    'ATC_GROUND_UNIVERSAL:SetAirbaseBoundaries(Airbase,Zone)',
    'ATC_GROUND_UNIVERSAL:SmokeRunways(SmokeColor)',
    'ATC_GROUND_UNIVERSAL:DrawRunways(Color)',
    'ATC_GROUND_UNIVERSAL:DrawBoundaries(Color)',
    'ATC_GROUND_UNIVERSAL:SetKickSpeed(KickSpeed,Airbase)',
    'ATC_GROUND_UNIVERSAL:SetKickSpeedKmph(KickSpeed,Airbase)',
    'ATC_GROUND_UNIVERSAL:SetKickSpeedMiph(KickSpeedMiph,Airbase)',
    'ATC_GROUND_UNIVERSAL:SetMaximumKickSpeed(MaximumKickSpeed,Airbase)',
    'ATC_GROUND_UNIVERSAL:SetMaximumKickSpeedKmph(MaximumKickSpeed,Airbase)',
    'ATC_GROUND_UNIVERSAL:SetMaximumKickSpeedMiph(MaximumKickSpeedMiph,Airbase)',
    'ATC_GROUND_UNIVERSAL:_AirbaseMonitor()',
    'ATC_GROUND_UNIVERSAL:Start(RepeatScanSeconds)',
    'ATC_GROUND_CAUCASUS:New(AirbaseNames)',
    'ATC_GROUND_CAUCASUS:Start(RepeatScanSeconds)',
    'ATC_GROUND_NEVADA:New(AirbaseNames)',
    'ATC_GROUND_NEVADA:Start(RepeatScanSeconds)',
    'ATC_GROUND_NORMANDY:New(AirbaseNames)',
    'ATC_GROUND_NORMANDY:Start(RepeatScanSeconds)',
    'ATC_GROUND_PERSIANGULF:New(AirbaseNames)',
    'ATC_GROUND_PERSIANGULF:Start(RepeatScanSeconds)',
    'ATC_GROUND_MARIANAISLANDS:New(AirbaseNames)',
    'ATC_GROUND_MARIANAISLANDS:Start(RepeatScanSeconds)',
    'DETECTION_BASE:New(DetectionSet)',
    'DETECTION_BASE:onafterStart(From,Event,To)',
    'DETECTION_BASE:onafterDetect(From,Event,To)',
    'DETECTION_BASE:CountAliveRecce()',
    'DETECTION_BASE:ForEachAliveRecce(IteratorFunction,...)',
    'DETECTION_BASE:onafterDetection(From,Event,To,Detection,DetectionTimeStamp)',
    'DETECTION_BASE:CleanDetectionItem(DetectedItem,DetectedItemID)',
    'DETECTION_BASE:ForgetDetectedUnit(UnitName)',
    'DETECTION_BASE:CreateDetectionItems()',
    'DETECTION_BASE:InitDetectVisual(DetectVisual)',
    'DETECTION_BASE:InitDetectOptical(DetectOptical)',
    'DETECTION_BASE:InitDetectRadar(DetectRadar)',
    'DETECTION_BASE:InitDetectIRST(DetectIRST)',
    'DETECTION_BASE:InitDetectRWR(DetectRWR)',
    'DETECTION_BASE:InitDetectDLINK(DetectDLINK)',
    'DETECTION_BASE:FilterCategories(FilterCategories)',
    'DETECTION_BASE:SetRadarBlur(minheight,thresheight,thresblur,closing)',
    'DETECTION_BASE:SetRefreshTimeInterval(RefreshTimeInterval)',
    'DETECTION_BASE:SetFriendliesRange(FriendliesRange)',
    'DETECTION_BASE:SetIntercept(Intercept,InterceptDelay)',
    'DETECTION_BASE:SetAcceptRange(AcceptRange)',
    'DETECTION_BASE:SetAcceptZones(AcceptZones)',
    'DETECTION_BASE:SetRejectZones(RejectZones)',
    'DETECTION_BASE:SetDistanceProbability(DistanceProbability)',
    'DETECTION_BASE:SetAlphaAngleProbability(AlphaAngleProbability)',
    'DETECTION_BASE:SetZoneProbability(ZoneArray)',
    'DETECTION_BASE:AcceptChanges(DetectedItem)',
    'DETECTION_BASE:AddChangeItem(DetectedItem,ChangeCode,ItemUnitType)',
    'DETECTION_BASE:AddChangeUnit(DetectedItem,ChangeCode,ChangeUnitType)',
    'DETECTION_BASE:SetFriendlyPrefixes(FriendlyPrefixes)',
    'DETECTION_BASE:IsFriendliesNearBy(DetectedItem,Category)',
    'DETECTION_BASE:GetFriendliesNearBy(DetectedItem,Category)',
    'DETECTION_BASE:IsFriendliesNearIntercept(DetectedItem)',
    'DETECTION_BASE:GetFriendliesNearIntercept(DetectedItem)',
    'DETECTION_BASE:GetFriendliesDistance(DetectedItem)',
    'DETECTION_BASE:IsPlayersNearBy(DetectedItem)',
    'DETECTION_BASE:GetPlayersNearBy(DetectedItem)',
    'DETECTION_BASE:ReportFriendliesNearBy(TargetData)',
    'DETECTION_BASE:IsDetectedObjectIdentified(DetectedObject)',
    'DETECTION_BASE:IdentifyDetectedObject(DetectedObject)',
    'DETECTION_BASE:UnIdentifyDetectedObject(DetectedObject)',
    'DETECTION_BASE:UnIdentifyAllDetectedObjects()',
    'DETECTION_BASE:GetDetectedObject(ObjectName)',
    'DETECTION_BASE:GetDetectedUnitTypeName(DetectedUnit)',
    'DETECTION_BASE:AddDetectedItem(ItemPrefix,DetectedItemKey,Set)',
    'DETECTION_BASE:AddDetectedItemZone(ItemPrefix,DetectedItemKey,Set,Zone)',
    'DETECTION_BASE:RemoveDetectedItem(DetectedItemKey)',
    'DETECTION_BASE:GetDetectedItems()',
    'DETECTION_BASE:GetDetectedItemsByIndex()',
    'DETECTION_BASE:GetDetectedItemsCount()',
    'DETECTION_BASE:GetDetectedItemByKey(Key)',
    'DETECTION_BASE:GetDetectedItemByIndex(Index)',
    'DETECTION_BASE:GetDetectedItemID(DetectedItem)',
    'DETECTION_BASE:GetDetectedID(Index)',
    'DETECTION_BASE:GetDetectedItemSet(DetectedItem)',
    'DETECTION_BASE:UpdateDetectedItemDetection(DetectedItem)',
    'DETECTION_BASE:IsDetectedItemDetected(DetectedItem)',
    'DETECTION_BASE:GetDetectedItemZone(DetectedItem)',
    'DETECTION_BASE:LockDetectedItems()',
    'DETECTION_BASE:UnlockDetectedItems()',
    'DETECTION_BASE:IsDetectedItemLocked(DetectedItem)',
    'DETECTION_BASE:LockDetectedItem(DetectedItem)',
    'DETECTION_BASE:UnlockDetectedItem(DetectedItem)',
    'DETECTION_BASE:SetDetectedItemCoordinate(DetectedItem,Coordinate,DetectedItemUnit)',
    'DETECTION_BASE:GetDetectedItemCoordinate(DetectedItem)',
    'DETECTION_BASE:GetDetectedItemCoordinates()',
    'DETECTION_BASE:SetDetectedItemThreatLevel(DetectedItem)',
    'DETECTION_BASE:GetDetectedItemThreatLevel(DetectedItem)',
    'DETECTION_BASE:DetectedItemReportSummary(DetectedItem,AttackGroup,Settings)',
    'DETECTION_BASE:DetectedReportDetailed(AttackGroup)',
    'DETECTION_BASE:GetDetectionSet()',
    'DETECTION_BASE:NearestRecce(DetectedItem)',
    'DETECTION_BASE:Schedule(DelayTime,RepeatInterval)',
    'DETECTION_UNITS:New(DetectionSetGroup)',
    'DETECTION_UNITS:GetChangeText(DetectedItem)',
    'DETECTION_UNITS:CreateDetectionItems()',
    'DETECTION_UNITS:DetectedItemReportSummary(DetectedItem,AttackGroup,Settings,ForceA2GCoordinate)',
    'DETECTION_UNITS:DetectedReportDetailed(AttackGroup)',
    'DETECTION_TYPES:New(DetectionSetGroup)',
    'DETECTION_TYPES:GetChangeText(DetectedItem)',
    'DETECTION_TYPES:CreateDetectionItems()',
    'DETECTION_TYPES:DetectedItemReportSummary(DetectedItem,AttackGroup,Settings)',
    'DETECTION_TYPES:DetectedReportDetailed(AttackGroup)',
    'DETECTION_AREAS:New(DetectionSetGroup,DetectionZoneRange)',
    'DETECTION_AREAS:GetDetectionZones()',
    'DETECTION_AREAS:GetDetectionZoneByID(ID)',
    'DETECTION_AREAS:GetDetectionZoneCount()',
    'DETECTION_AREAS:DetectedItemReportMenu(DetectedItem,AttackGroup,Settings)',
    'DETECTION_AREAS:DetectedItemReportSummary(DetectedItem,AttackGroup,Settings)',
    'DETECTION_AREAS:DetectedReportDetailed(AttackGroup)',
    'DETECTION_AREAS:CalculateIntercept(DetectedItem)',
    'DETECTION_AREAS:SmokeDetectedUnits()',
    'DETECTION_AREAS:FlareDetectedUnits()',
    'DETECTION_AREAS:SmokeDetectedZones()',
    'DETECTION_AREAS:FlareDetectedZones()',
    'DETECTION_AREAS:BoundDetectedZones()',
    'DETECTION_AREAS:GetChangeText(DetectedItem)',
    'DETECTION_AREAS:CreateDetectionItems()',
    'DETECTION_ZONES:New(DetectionSetZone,DetectionCoalition)',
    'DETECTION_ZONES:CountAliveRecce()',
    'DETECTION_ZONES:ForEachAliveRecce(IteratorFunction,...)',
    'DETECTION_ZONES:DetectedItemReportSummary(DetectedItem,AttackGroup,Settings)',
    'DETECTION_ZONES:DetectedReportDetailed(AttackGroup)',
    'DETECTION_ZONES:CalculateIntercept(DetectedItem)',
    'DETECTION_ZONES:SmokeDetectedUnits()',
    'DETECTION_ZONES:FlareDetectedUnits()',
    'DETECTION_ZONES:SmokeDetectedZones()',
    'DETECTION_ZONES:FlareDetectedZones()',
    'DETECTION_ZONES:BoundDetectedZones()',
    'DETECTION_ZONES:GetChangeText(DetectedItem)',
    'DETECTION_ZONES:CreateDetectionItems()',
    'DETECTION_ZONES:onafterDetection(From,Event,To,Detection,DetectionTimeStamp)',
    'DETECTION_ZONES:UpdateDetectedItemDetection(DetectedItem)',
    'DESIGNATE:New(CC,Detection,AttackSet,Mission)',
    'DESIGNATE:SetFlashStatusMenu(FlashMenu)',
    'DESIGNATE:SetFlashDetectionMessages(FlashDetectionMessage)',
    'DESIGNATE:SetMaximumDesignations(MaximumDesignations)',
    'DESIGNATE:SetMaximumDistanceGroundDesignation(MaximumDistanceGroundDesignation)',
    'DESIGNATE:SetMaximumDistanceAirDesignation(MaximumDistanceAirDesignation)',
    'DESIGNATE:SetMaximumDistanceDesignations(MaximumDistanceDesignations)',
    'DESIGNATE:SetMaximumMarkings(MaximumMarkings)',
    'DESIGNATE:SetLaserCodes(LaserCodes)',
    'DESIGNATE:AddMenuLaserCode(LaserCode,MenuText)',
    'DESIGNATE:RemoveMenuLaserCode(LaserCode)',
    'DESIGNATE:SetDesignateName(DesignateName)',
    'DESIGNATE:SetLaseDuration(LaseDuration)',
    'DESIGNATE:GenerateLaserCodes()',
    'DESIGNATE:SetAutoLase(AutoLase,Message)',
    'DESIGNATE:SetThreatLevelPrioritization(Prioritize)',
    'DESIGNATE:SetMission(Mission)',
    'DESIGNATE:onafterDetect()',
    'DESIGNATE:DesignationScope()',
    'DESIGNATE:CoordinateLase()',
    'DESIGNATE:SendStatus(MenuAttackGroup)',
    'DESIGNATE:SetMenu(AttackGroup)',
    'DESIGNATE:SetDesignateMenu()',
    'DESIGNATE:MenuStatus(AttackGroup)',
    'DESIGNATE:MenuFlashStatus(AttackGroup,Flash)',
    'DESIGNATE:MenuForget(Index)',
    'DESIGNATE:MenuAutoLase(AutoLase)',
    'DESIGNATE:MenuSmoke(Index,Color)',
    'DESIGNATE:MenuIlluminate(Index)',
    'DESIGNATE:MenuLaseOn(Index,Duration)',
    'DESIGNATE:MenuLaseCode(Index,Duration,LaserCode)',
    'DESIGNATE:MenuLaseOff(Index,Duration)',
    'DESIGNATE:onafterLaseOn(From,Event,To,Index,Duration,LaserCode)',
    'DESIGNATE:onafterLasing(From,Event,To,Index,Duration,LaserCodeRequested)',
    'Spot:OnAfterDestroyed(From,Event,To)',
    'DESIGNATE:onafterLaseOff(From,Event,To,Index)',
    'DESIGNATE:onafterSmoke(From,Event,To,Index,Color)',
    'DESIGNATE:onafterIlluminate(From,Event,To,Index)',
    'DESIGNATE:onafterDoneSmoking(From,Event,To,Index)',
    'DESIGNATE:onafterDoneIlluminating(From,Event,To,Index)',
    'RAT:New(groupname,alias)',
    'RAT:Spawn(naircraft)',
    'RAT:_CheckConsistency()',
    'RAT:SetCoalition(friendly)',
    'RAT:SetCoalitionAircraft(color)',
    'RAT:SetCountry(id)',
    'RAT:SetTerminalType(termtype)',
    'RAT:SetParkingScanRadius(radius)',
    'RAT:SetParkingScanSceneryON()',
    'RAT:SetParkingScanSceneryOFF()',
    'RAT:SetParkingSpotSafeON()',
    'RAT:SetParkingSpotSafeOFF()',
    'RAT:SetDespawnAirOFF()',
    'RAT:SetTakeoff(type)',
    'RAT:SetTakeoffCold()',
    'RAT:SetTakeoffHot()',
    'RAT:SetTakeoffRunway()',
    'RAT:SetTakeoffColdOrHot()',
    'RAT:SetTakeoffAir()',
    'RAT:SetDeparture(departurenames)',
    'RAT:SetDestination(destinationnames)',
    'RAT:DestinationZone()',
    'RAT:ReturnZone()',
    'RAT:SetDestinationsFromZone(zone)',
    'RAT:SetDeparturesFromZone(zone)',
    'RAT:AddFriendlyAirportsToDepartures()',
    'RAT:AddFriendlyAirportsToDestinations()',
    'RAT:ExcludedAirports(ports)',
    'RAT:SetAISkill(skill)',
    'RAT:Livery(skins)',
    'RAT:ChangeAircraft(actype)',
    'RAT:ContinueJourney()',
    'RAT:Commute(starshape)',
    'RAT:SetSpawnDelay(delay)',
    'RAT:SetSpawnInterval(interval)',
    'RAT:RespawnAfterLanding(delay)',
    'RAT:SetRespawnDelay(delay)',
    'RAT:NoRespawn()',
    'RAT:SetMaxRespawnTriedWhenSpawnedOnRunway(n)',
    'RAT:RespawnAfterTakeoff()',
    'RAT:RespawnAfterCrashON()',
    'RAT:RespawnAfterCrashOFF()',
    'RAT:RespawnInAirAllowed()',
    'RAT:RespawnInAirNotAllowed()',
    'RAT:CheckOnRunway(switch,distance)',
    'RAT:CheckOnTop(switch,radius)',
    'RAT:ParkingSpotDB(switch)',
    'RAT:RadioON()',
    'RAT:RadioOFF()',
    'RAT:RadioFrequency(frequency)',
    'RAT:RadioModulation(modulation)',
    'RAT:RadioMenuON()',
    'RAT:RadioMenuOFF()',
    'RAT:Invisible()',
    'RAT:SetEPLRS(switch)',
    'RAT:Immortal()',
    'RAT:Uncontrolled()',
    'RAT:ActivateUncontrolled(maxactivated,delay,delta,frand)',
    'RAT:TimeDestroyInactive(time)',
    'RAT:SetMaxCruiseSpeed(speed)',
    'RAT:SetClimbRate(rate)',
    'RAT:SetDescentAngle(angle)',
    'RAT:SetROE(roe)',
    'RAT:SetROT(rot)',
    'RAT:MenuName(name)',
    'RAT:EnableATC(switch)',
    'RAT:ATC_Messages(switch)',
    'RAT:ATC_Clearance(n)',
    'RAT:ATC_Delay(time)',
    'RAT:SetMinDistance(dist)',
    'RAT:SetMaxDistance(dist)',
    'RAT:_Debug(switch)',
    'RAT:Debugmode()',
    'RAT:StatusReports(switch)',
    'RAT:PlaceMarkers(switch)',
    'RAT:SetFL(FL)',
    'RAT:SetFLmax(FL)',
    'RAT:SetMaxCruiseAltitude(alt)',
    'RAT:SetFLmin(FL)',
    'RAT:SetMinCruiseAltitude(alt)',
    'RAT:SetFLcruise(FL)',
    'RAT:SetCruiseAltitude(alt)',
    'RAT:SetOnboardNum(tailnumprefix,zero)',
    'RAT:_InitAircraft(DCSgroup)',
    'RAT:_SpawnWithRoute(_departure,_destination,_takeoff,_landing,_livery,_waypoint,_lastpos,_nrespawn,parkingdata)',
    'RAT:ClearForLanding(name)',
    'RAT:_Respawn(index,lastpos,delay)',
    'RAT._SpawnWithRouteTimer(arg)',
    'RAT:_SetRoute(takeoff,landing,_departure,_destination,_waypoint)',
    'RAT:_PickDeparture(takeoff)',
    'RAT:_PickDestination(departure,q,minrange,maxrange,random,landing)',
    'RAT:_GetAirportsInZone(zone)',
    'RAT:_Excluded(port)',
    'RAT:_IsFriendly(port)',
    'RAT:_GetAirportsOfMap()',
    'RAT:_GetAirportsOfCoalition()',
    'RAT:Status(message,forID)',
    'RAT:_GetLife(group)',
    'RAT:_SetStatus(group,status)',
    'RAT:GetStatus(group)',
    'RAT:_OnBirth(EventData)',
    'RAT:_OnEngineStartup(EventData)',
    'RAT:_OnTakeoff(EventData)',
    'RAT:_OnLand(EventData)',
    'RAT:_OnEngineShutdown(EventData)',
    'RAT:_OnHit(EventData)',
    'RAT:_OnDeadOrCrash(EventData)',
    'RAT:_OnDead(EventData)',
    'RAT:_OnCrash(EventData)',
    'RAT:_Despawn(group,delay)',
    'RAT:_Destroy(group)',
    'RAT:_CreateEventDead(EventTime,Initiator)',
    'RAT:_Waypoint(index,description,Type,Coord,Speed,Altitude,Airport)',
    'RAT:_Routeinfo(waypoints,comment)',
    'RAT:_TaskHolding(P1,Altitude,Speed,Duration)',
    'RAT._WaypointFunction(group,rat,wp)',
    'RAT:_TaskFunction(FunctionString,...)',
    'RAT:_AnticipatedGroupName(index)',
    'RAT:_ActivateUncontrolled()',
    'RAT:_CommandStartUncontrolled(group)',
    'RAT:_CommandInvisible(group,switch)',
    'RAT:_CommandImmortal(group,switch)',
    'RAT:_GetObjectSize(unit)',
    'RAT:_CheckOnTop(group,distmin)',
    'RAT:_MinDistance(alpha,beta,ha,hb)',
    'RAT:_AddFriendlyAirports(ports)',
    'RAT:_NameInList(liste,name)',
    'RAT:_AirportExists(name)',
    'RAT:_ZoneExists(name)',
    'RAT:_SetROE(group,roe)',
    'RAT:_SetROT(group,rot)',
    'RAT:_SetCoalitionTable()',
    'RAT:_Course(a,b)',
    'RAT:_Heading(course)',
    'RAT:_Randomize(value,fac,lower,upper)',
    'RAT:_PlaceMarkers(waypoints,index)',
    'RAT:_SetMarker(text,wp,index)',
    'RAT:_DeleteMarkers()',
    'RAT:_ModifySpawnTemplate(waypoints,livery,spawnplace,departure,takeoff,parkingdata)',
    'RAT:_ATCInit(airports_map)',
    'RAT:_ATCAddFlight(name,dest)',
    'RAT:_ATCDelFlight(t,entry)',
    'RAT:_ATCRegisterFlight(name,time)',
    'RAT:_ATCStatus()',
    'RAT:_ATCCheck()',
    'RAT:_ATCClearForLanding(airport,flight)',
    'RAT:_ATCFlightLanded(name)',
    'RAT:_ATCQueue()',
    'RATMANAGER:New(ntot)',
    'RATMANAGER:Add(ratobject,min)',
    'RATMANAGER:Start(delay)',
    'RATMANAGER:_Start()',
    'RATMANAGER:Stop(delay)',
    'RATMANAGER:_Stop()',
    'RATMANAGER:SetTcheck(dt)',
    'RATMANAGER:SetTspawn(dt)',
    'RATMANAGER:_Manage()',
    'RATMANAGER:_Spawn(i)',
    'RATMANAGER:_Count()',
    'RATMANAGER:_RollDice(nrat,ntot,min,alive)',
    'RANGE:New(RangeName,Coalition)',
    'RANGE:onafterStart()',
    'RANGE:SetMaxStrafeAlt(maxalt)',
    'RANGE:SetBombtrackTimestep(dt)',
    'RANGE:SetMessageTimeDuration(time)',
    'RANGE:SetAutosaveOn()',
    'RANGE:SetAutosaveOff()',
    'RANGE:SetTargetSheet(path,prefix)',
    'RANGE:SetFunkManOn(Port,Host)',
    'RANGE:SetMessageToExaminer(examinergroupname,exclusively)',
    'RANGE:SetDisplayedMaxPlayerResults(nmax)',
    'RANGE:SetRangeRadius(radius)',
    'RANGE:SetDefaultPlayerSmokeBomb(switch)',
    'RANGE:SetBombtrackThreshold(distance)',
    'RANGE:SetRangeLocation(coordinate)',
    'RANGE:SetRangeZone(zone)',
    'RANGE:SetBombTargetSmokeColor(colorid)',
    'RANGE:SetScoreBombDistance(distance)',
    'RANGE:SetStrafeTargetSmokeColor(colorid)',
    'RANGE:SetStrafePitSmokeColor(colorid)',
    'RANGE:SetSmokeTimeDelay(delay)',
    'RANGE:DebugON()',
    'RANGE:DebugOFF()',
    'RANGE:SetMessagesOFF()',
    'RANGE:SetMessagesON()',
    'RANGE:TrackBombsON()',
    'RANGE:TrackBombsOFF()',
    'RANGE:TrackRocketsON()',
    'RANGE:TrackRocketsOFF()',
    'RANGE:TrackMissilesON()',
    'RANGE:TrackMissilesOFF()',
    'RANGE:SetSRS(PathToSRS,Port,Coalition,Frequency,Modulation,Volume,PathToGoogleKey)',
    'RANGE:SetSRSRangeControl(frequency,modulation,voice,culture,gender,relayunitname)',
    'RANGE:SetSRSRangeInstructor(frequency,modulation,voice,culture,gender,relayunitname)',
    'RANGE:SetRangeControl(frequency,relayunitname)',
    'RANGE:SetInstructorRadio(frequency,relayunitname)',
    'RANGE:SetSoundfilesPath(path)',
    'RANGE:AddStrafePit(targetnames,boxlength,boxwidth,heading,inverseheading,goodpass,foulline)',
    'RANGE:AddStrafePitGroup(group,boxlength,boxwidth,heading,inverseheading,goodpass,foulline)',
    'RANGE:AddBombingTargets(targetnames,goodhitrange,randommove)',
    'RANGE:AddBombingTargetUnit(unit,goodhitrange,randommove)',
    'RANGE:AddBombingTargetCoordinate(coord,name,goodhitrange)',
    'RANGE:AddBombingTargetScenery(scenery,goodhitrange)',
    'RANGE:AddBombingTargetGroup(group,goodhitrange,randommove)',
    'RANGE:GetFoullineDistance(namepit,namefoulline)',
    'RANGE:OnEventBirth(EventData)',
    'RANGE:OnEventHit(EventData)',
    'RANGE._OnImpact(weapon,self,playerData,attackHdg,attackAlt,attackVel)',
    'RANGE:OnEventShot(EventData)',
    'RANGE:onafterStatus(From,Event,To)',
    'RANGE:onafterEnterRange(From,Event,To,player)',
    'RANGE:onafterExitRange(From,Event,To,player)',
    'RANGE:onafterImpact(From,Event,To,result,player)',
    'RANGE:onafterStrafeResult(From,Event,To,player,result)',
    'RANGE:onbeforeSave(From,Event,To)',
    'RANGE:onafterSave(From,Event,To)',
    'RANGE:onbeforeLoad(From,Event,To)',
    'RANGE:onafterLoad(From,Event,To)',
    'RANGE:_SaveTargetSheet(_playername,result)',
    'RANGE._DelayedSmoke(_args)',
    'RANGE:_DisplayMyStrafePitResults(_unitName)',
    'RANGE:_DisplayStrafePitResults(_unitName)',
    'RANGE:_DisplayMyBombingResults(_unitName)',
    'RANGE:_DisplayBombingResults(_unitName)',
    'RANGE:_DisplayRangeInfo(_unitname)',
    'RANGE:_DisplayBombTargets(_unitname)',
    'RANGE:_DisplayStrafePits(_unitname)',
    'RANGE:_DisplayRangeWeather(_unitname)',
    'RANGE:_CheckPlayers()',
    'RANGE:_CheckInZone(_unitName)',
    'RANGE:_AddF10Commands(_unitName)',
    'RANGE:_GetBombTargetCoordinate(target)',
    'RANGE:_GetAmmo(unitname)',
    'RANGE:_MarkTargetsOnMap(_unitName)',
    'RANGE:_IlluminateBombTargets(_unitName)',
    'RANGE:_ResetRangeStats(_unitName)',
    'RANGE:_DisplayMessageToGroup(_unit,_text,_time,_clear,display,_togroup)',
    'RANGE:_SmokeBombImpactOnOff(unitname)',
    'RANGE:_SmokeBombDelayOnOff(unitname)',
    'RANGE:_MessagesToPlayerOnOff(unitname)',
    'RANGE:_TargetsheetOnOff(_unitname)',
    'RANGE:_FlareDirectHitsOnOff(unitname)',
    'RANGE:_SmokeBombTargets(unitname)',
    'RANGE:_SmokeStrafeTargets(unitname)',
    'RANGE:_SmokeStrafeTargetBoxes(unitname)',
    'RANGE:_playersmokecolor(_unitName,color)',
    'RANGE:_playerflarecolor(_unitName,color)',
    'RANGE:_smokecolor2text(color)',
    'RANGE:_flarecolor2text(color)',
    'RANGE:_CheckStatic(name)',
    'RANGE:_GetSpeed(controllable)',
    'RANGE:_GetPlayerUnitAndName(_unitName)',
    'RANGE:_myname(unitname)',
    'ZONE_GOAL:New(Zone)',
    'ZONE_GOAL:GetZone()',
    'ZONE_GOAL:GetZoneName()',
    'ZONE_GOAL:SetSmokeZone(switch)',
    'ZONE_GOAL:Smoke(SmokeColor)',
    'ZONE_GOAL:Flare(FlareColor)',
    'ZONE_GOAL:onafterGuard()',
    'ZONE_GOAL:StatusSmoke()',
    'ZONE_GOAL:__Destroyed(EventData)',
    'ZONE_GOAL:MonitorDestroyedUnits()',
    'ZONE_GOAL_COALITION:New(Zone,Coalition,UnitCategories)',
    'ZONE_GOAL_COALITION:SetCoalition(Coalition)',
    'ZONE_GOAL_COALITION:SetUnitCategories(UnitCategories)',
    'ZONE_GOAL_COALITION:SetObjectCategories(ObjectCategories)',
    'ZONE_GOAL_COALITION:GetCoalition()',
    'ZONE_GOAL_COALITION:GetPreviousCoalition()',
    'ZONE_GOAL_COALITION:GetCoalitionName()',
    'ZONE_GOAL_COALITION:StatusZone()',
    'ZONE_CAPTURE_COALITION:New(Zone,Coalition,UnitCategories,ObjectCategories)',
    'ZONE_CAPTURE_COALITION:Start(StartInterval,RepeatInterval)',
    'ZONE_CAPTURE_COALITION:Stop()',
    'ZONE_CAPTURE_COALITION:SetMonitorHits(Switch,TimeAttackOver)',
    'ZONE_CAPTURE_COALITION:SetMarkZone(Switch)',
    'ZONE_CAPTURE_COALITION:OnEventHit(EventData)',
    'ZONE_CAPTURE_COALITION:onafterGuard()',
    'ZONE_CAPTURE_COALITION:onenterGuarded()',
    'ZONE_CAPTURE_COALITION:onenterCaptured()',
    'ZONE_CAPTURE_COALITION:onenterEmpty()',
    'ZONE_CAPTURE_COALITION:onenterAttacked()',
    'ZONE_CAPTURE_COALITION:IsEmpty()',
    'ZONE_CAPTURE_COALITION:IsGuarded()',
    'ZONE_CAPTURE_COALITION:IsCaptured()',
    'ZONE_CAPTURE_COALITION:IsAttacked()',
    'ZONE_CAPTURE_COALITION:StatusZone()',
    'ZONE_CAPTURE_COALITION:Mark()',
    'ARTY:New(group,alias)',
    'ARTY:NewFromCargoGroup(cargogroup,alias)',
    'ARTY:AssignTargetCoord(coord,prio,radius,nshells,maxengage,time,weapontype,name,unique)',
    'ARTY:AssignAttackGroup(group,prio,radius,nshells,maxengage,time,weapontype,name,unique)',
    'ARTY:AssignMoveCoord(coord,time,speed,onroad,cancel,name,unique)',
    'ARTY:SetAlias(alias)',
    'ARTY:AddToCluster(clusters)',
    'ARTY:SetMinFiringRange(range)',
    'ARTY:SetMaxFiringRange(range)',
    'ARTY:SetStatusInterval(interval)',
    'ARTY:SetTrackInterval(interval)',
    'ARTY:SetWaitForShotTime(waittime)',
    'ARTY:SetRearmingDistance(distance)',
    'ARTY:SetRearmingGroup(group)',
    'ARTY:SetRearmingGroupSpeed(speed)',
    'ARTY:SetRearmingGroupOnRoad(onroad)',
    'ARTY:SetRearmingArtyOnRoad(onroad)',
    'ARTY:SetRearmingPlace(coord)',
    'ARTY:SetAutoRelocateToFiringRange(maxdistance,onroad)',
    'ARTY:SetAutoRelocateAfterEngagement(rmax,rmin)',
    'ARTY:SetReportON()',
    'ARTY:SetReportOFF()',
    'ARTY:SetRespawnOnDeath(delay)',
    'ARTY:SetDebugON()',
    'ARTY:SetDebugOFF()',
    'ARTY:SetSpeed(speed)',
    'ARTY:RemoveTarget(name)',
    'ARTY:RemoveMove(name)',
    'ARTY:RemoveAllTargets()',
    'ARTY:SetShellTypes(tableofnames)',
    'ARTY:SetRocketTypes(tableofnames)',
    'ARTY:SetMissileTypes(tableofnames)',
    'ARTY:SetTacNukeShells(n)',
    'ARTY:SetTacNukeWarhead(strength)',
    'ARTY:SetIlluminationShells(n,power)',
    'ARTY:SetIlluminationMinMaxAlt(minalt,maxalt)',
    'ARTY:SetSmokeShells(n,color)',
    'ARTY:SetTacNukeFires(nfires,range)',
    'ARTY:SetMarkAssignmentsOn(key,readonly)',
    'ARTY:SetMarkTargetsOff()',
    'ARTY:onafterStart(Controllable,From,Event,To)',
    'ARTY:_CheckDB(displayname)',
    'ARTY:_StatusReport(display)',
    'ARTY._FuncTrack(weapon,self,target)',
    'ARTY._FuncImpact(weapon,self,target)',
    'ARTY:OnEventShot(EventData)',
    'ARTY:onEvent(Event)',
    'ARTY:_OnEventMarkRemove(Event)',
    'ARTY:_OnEventMarkChange(Event)',
    'ARTY:OnEventDead(EventData)',
    'ARTY:onafterStatus(Controllable,From,Event,To)',
    'ARTY:onbeforeLoaded(Controllable,From,Event,To)',
    'ARTY:onafterUnLoaded(Controllable,From,Event,To)',
    'ARTY:onenterCombatReady(Controllable,From,Event,To)',
    'ARTY:onbeforeOpenFire(Controllable,From,Event,To,target)',
    'ARTY:onafterOpenFire(Controllable,From,Event,To,target)',
    'ARTY:onafterCeaseFire(Controllable,From,Event,To,target)',
    'ARTY:onafterWinchester(Controllable,From,Event,To)',
    'ARTY:onbeforeRearm(Controllable,From,Event,To)',
    'ARTY:onafterRearm(Controllable,From,Event,To)',
    'ARTY:onafterRearmed(Controllable,From,Event,To)',
    'ARTY:_CheckRearmed()',
    'ARTY:onbeforeMove(Controllable,From,Event,To,move)',
    'ARTY:onafterMove(Controllable,From,Event,To,move)',
    'ARTY:onafterArrived(Controllable,From,Event,To)',
    'ARTY:onafterNewTarget(Controllable,From,Event,To,target)',
    'ARTY:onafterNewMove(Controllable,From,Event,To,move)',
    'ARTY:onafterDead(Controllable,From,Event,To,Unitname)',
    'ARTY:onafterRespawn(Controllable,From,Event,To)',
    'ARTY:onafterStop(Controllable,From,Event,To)',
    'ARTY:_FireAtCoord(coord,radius,nshells,weapontype)',
    'ARTY:_AttackGroup(target)',
    'ARTY:_NuclearBlast(_coord)',
    'ARTY:_Move(group,ToCoord,Speed,OnRoad)',
    'ARTY._PassingWaypoint(group,arty,i,final)',
    'ARTY:_Relocate()',
    'ARTY:GetAmmo(display)',
    'ARTY:_MissileCategoryName(categorynumber)',
    'ARTY:_MarkerKeyAuthentification(text)',
    'ARTY:_Markertext(text)',
    'ARTY:_MarkRequestAmmo()',
    'ARTY:_MarkRequestStatus()',
    'ARTY:_MarkRequestMoves()',
    'ARTY:_MarkRequestTargets()',
    'ARTY:_MarkTargetName(markerid)',
    'ARTY:_MarkMoveName(markerid)',
    'ARTY:_GetMarkIDfromName(name)',
    'ARTY:_SortTargetQueuePrio()',
    'ARTY:_SortQueueTime(queue)',
    'ARTY:_GetHeading(a,b)',
    'ARTY:_CheckTargetsInRange()',
    'ARTY:_CheckNormalTargets()',
    'ARTY:_CheckTimedTargets()',
    'ARTY:_CheckMoves()',
    'ARTY:_CheckShootingStarted()',
    'ARTY:_GetTargetIndexByName(name)',
    'ARTY:_GetMoveIndexByName(name)',
    'ARTY:_CheckOutOfAmmo(targets)',
    'ARTY:_CheckWeaponTypeAvailable(target)',
    'ARTY:_CheckWeaponTypePossible(target)',
    'ARTY:_CheckName(givennames,name,makeunique)',
    'ARTY:_TargetInRange(target,message)',
    'ARTY:_WeaponTypeName(tnumber)',
    'ARTY:_VicinityCoord(coord,rmin,rmax)',
    'ARTY:_EventFromTo(BA,Event,From,To)',
    'ARTY:_split(str,sep)',
    'ARTY:_TargetInfo(target)',
    'ARTY:_MoveInfo(move)',
    'ARTY:_LLDMS2DD(l1,l2)',
    'ARTY:_SecondsToClock(seconds)',
    'ARTY:_ClockToSeconds(clock)',
    'SUPPRESSION:New(group)',
    'SUPPRESSION:SetSuppressionTime(Tave,Tmin,Tmax)',
    'SUPPRESSION:SetRetreatZone(zone)',
    'SUPPRESSION:DebugOn()',
    'SUPPRESSION:FlareOn()',
    'SUPPRESSION:SmokeOn()',
    'SUPPRESSION:SetFormation(formation)',
    'SUPPRESSION:SetSpeed(speed)',
    'SUPPRESSION:Fallback(switch)',
    'SUPPRESSION:SetFallbackDistance(distance)',
    'SUPPRESSION:SetFallbackWait(time)',
    'SUPPRESSION:Takecover(switch)',
    'SUPPRESSION:SetTakecoverWait(time)',
    'SUPPRESSION:SetTakecoverRange(range)',
    'SUPPRESSION:SetTakecoverPlace(Hideout)',
    'SUPPRESSION:SetMinimumFleeProbability(probability)',
    'SUPPRESSION:SetMaximumFleeProbability(probability)',
    'SUPPRESSION:SetRetreatDamage(damage)',
    'SUPPRESSION:SetRetreatWait(time)',
    'SUPPRESSION:SetDefaultAlarmState(alarmstate)',
    'SUPPRESSION:SetDefaultROE(roe)',
    'SUPPRESSION:MenuOn(switch)',
    'SUPPRESSION:_CreateMenuGroup()',
    'SUPPRESSION:OrderFallBack()',
    'SUPPRESSION:OrderTakeCover()',
    'SUPPRESSION:OrderRetreat()',
    'SUPPRESSION:StatusReport(message)',
    'SUPPRESSION:onafterStart(Controllable,From,Event,To)',
    'SUPPRESSION:onafterStatus(Controllable,From,Event,To)',
    'SUPPRESSION:onafterHit(Controllable,From,Event,To,Unit,AttackUnit)',
    'SUPPRESSION:onbeforeRecovered(Controllable,From,Event,To)',
    'SUPPRESSION:onafterRecovered(Controllable,From,Event,To)',
    'SUPPRESSION:onafterFightBack(Controllable,From,Event,To)',
    'SUPPRESSION:onbeforeFallBack(Controllable,From,Event,To,AttackUnit)',
    'SUPPRESSION:onafterFallBack(Controllable,From,Event,To,AttackUnit)',
    'SUPPRESSION:onbeforeTakeCover(Controllable,From,Event,To,Hideout)',
    'SUPPRESSION:onafterTakeCover(Controllable,From,Event,To,Hideout)',
    'SUPPRESSION:onafterOutOfAmmo(Controllable,From,Event,To)',
    'SUPPRESSION:onbeforeRetreat(Controllable,From,Event,To)',
    'SUPPRESSION:onafterRetreat(Controllable,From,Event,To)',
    'SUPPRESSION:onbeforeRetreated(Controllable,From,Event,To)',
    'SUPPRESSION:onafterRetreated(Controllable,From,Event,To)',
    'SUPPRESSION:onafterDead(Controllable,From,Event,To)',
    'SUPPRESSION:onafterStop(Controllable,From,Event,To)',
    'SUPPRESSION:onEvent(Event)',
    'SUPPRESSION:_OnEventHit(EventData)',
    'SUPPRESSION:_OnEventDead(EventData)',
    'SUPPRESSION:_Suppress()',
    'SUPPRESSION:_Run(fin,speed,formation,wait)',
    'SUPPRESSION._Passing_Waypoint(group,Fsm,i,final)',
    'SUPPRESSION:_SearchHideout()',
    'SUPPRESSION:_GetLife()',
    'SUPPRESSION:_Heading(a,b)',
    'SUPPRESSION:_Random_Gaussian(x0,sigma,xmin,xmax)',
    'SUPPRESSION:_SetROE(roe)',
    'SUPPRESSION:_SetAlarmState(state)',
    'SUPPRESSION:_EventFromTo(BA,Event,From,To)',
    'PSEUDOATC:New()',
    'PSEUDOATC:Start()',
    'PSEUDOATC:DebugOn()',
    'PSEUDOATC:DebugOff()',
    'PSEUDOATC:ChattyOn()',
    'PSEUDOATC:ChattyOff()',
    'PSEUDOATC:SetMessageDuration(duration)',
    'PSEUDOATC:SetReportPlayername()',
    'PSEUDOATC:SetMenuRefresh(interval)',
    'PSEUDOATC:SetEventsMoose(switch)',
    'PSEUDOATC:SetReportAltInterval(interval)',
    'PSEUDOATC:_OnBirth(EventData)',
    'PSEUDOATC:_PlayerLeft(EventData)',
    'PSEUDOATC:_PlayerLanded(EventData)',
    'PSEUDOATC:_PlayerTakeOff(EventData)',
    'PSEUDOATC:PlayerEntered(unit)',
    'PSEUDOATC:PlayerLanded(unit,place)',
    'PSEUDOATC:PlayerTakeOff(unit,place)',
    'PSEUDOATC:PlayerLeft(unit)',
    'PSEUDOATC:MenuRefresh(GID,UID)',
    'PSEUDOATC:MenuCreatePlayer(GID,UID)',
    'PSEUDOATC:MenuClear(GID,UID)',
    'PSEUDOATC:MenuAirports(GID,UID)',
    'PSEUDOATC:MenuWaypoints(GID,UID)',
    'PSEUDOATC:ReportWeather(GID,UID,position,location)',
    'PSEUDOATC:ReportBR(GID,UID,position,location)',
    'PSEUDOATC:ReportHeight(GID,UID,dt,_clear)',
    'PSEUDOATC:AltidudeTimerToggle(GID,UID)',
    'PSEUDOATC:AltitudeTimeStart(GID,UID)',
    'PSEUDOATC:AltitudeTimerStop(GID,UID)',
    'PSEUDOATC:LocalAirports(GID,UID)',
    'PSEUDOATC:_GetPlayerUnitAndName(_unitName)',
    'PSEUDOATC:_DisplayMessageToGroup(_unit,_text,_time,_clear)',
    'PSEUDOATC:_myname(unitname)',
    'WAREHOUSE:New(warehouse,alias)',
    'WAREHOUSE:SetDebugOn()',
    'WAREHOUSE:SetDebugOff()',
    'WAREHOUSE:SetReportOn()',
    'WAREHOUSE:SetReportOff()',
    'WAREHOUSE:SetSafeParkingOn()',
    'WAREHOUSE:SetSafeParkingOff()',
    'WAREHOUSE:SetAllowSpawnOnClientParking()',
    'WAREHOUSE:SetLowFuelThreshold(threshold)',
    'WAREHOUSE:SetStatusUpdate(timeinterval)',
    'WAREHOUSE:SetVerbosityLevel(VerbosityLevel)',
    'WAREHOUSE:SetSpawnZone(zone,maxdist)',
    'WAREHOUSE:GetSpawnZone()',
    'WAREHOUSE:SetWarehouseZone(zone)',
    'WAREHOUSE:GetWarehouseZone()',
    'WAREHOUSE:SetAutoDefenceOn()',
    'WAREHOUSE:SetAutoDefenceOff()',
    'WAREHOUSE:SetParkingIDs(ParkingIDs)',
    'WAREHOUSE:_CheckParkingValid(spot)',
    'WAREHOUSE:_CheckParkingAsset(spot,asset)',
    'WAREHOUSE:SetSaveOnMissionEnd(path,filename)',
    'WAREHOUSE:SetMarker(switch)',
    'WAREHOUSE:SetRespawnAfterDestroyed(delay)',
    'WAREHOUSE:SetAirbase(airbase)',
    'WAREHOUSE:SetRoadConnection(coordinate)',
    'WAREHOUSE:SetRailConnection(coordinate)',
    'WAREHOUSE:SetPortZone(zone)',
    'WAREHOUSE:SetHarborZone(zone)',
    'WAREHOUSE:AddShippingLane(remotewarehouse,group,oneway)',
    'WAREHOUSE:AddOffRoadPath(remotewarehouse,group,oneway)',
    'WAREHOUSE:_NewLane(group,startcoord,finalcoord)',
    'WAREHOUSE:IsNotReadyYet()',
    'WAREHOUSE:IsLoaded()',
    'WAREHOUSE:IsRunning()',
    'WAREHOUSE:IsPaused()',
    'WAREHOUSE:IsAttacked()',
    'WAREHOUSE:IsDestroyed()',
    'WAREHOUSE:IsStopped()',
    'WAREHOUSE:HasConnectionRoad(warehouse,markpath,smokepath)',
    'WAREHOUSE:HasConnectionRail(warehouse,markpath,smokepath)',
    'WAREHOUSE:HasConnectionNaval(warehouse,markpath,smokepath)',
    'WAREHOUSE:HasConnectionOffRoad(warehouse,markpath,smokepath)',
    'WAREHOUSE:GetNumberOfAssets(Descriptor,DescriptorValue,OnlyMobile)',
    'WAREHOUSE:GetCoordinate()',
    'WAREHOUSE:GetVec3()',
    'WAREHOUSE:GetVec2()',
    'WAREHOUSE:GetCoalition()',
    'WAREHOUSE:GetCoalitionName()',
    'WAREHOUSE:GetCountry()',
    'WAREHOUSE:GetCountryName()',
    'WAREHOUSE:GetAirbase()',
    'WAREHOUSE:GetAirbaseName()',
    'WAREHOUSE:GetAirbaseCategory()',
    'WAREHOUSE:GetAssignment(request)',
    'WAREHOUSE:FindWarehouseInDB(uid)',
    'WAREHOUSE:FindNearestWarehouse(MinAssets,Descriptor,DescriptorValue,Coalition,RefCoordinate)',
    'WAREHOUSE:FindAssetInDB(group)',
    'WAREHOUSE:IsRunwayOperational()',
    'WAREHOUSE:SetRunwayRepairtime(RepairTime)',
    'WAREHOUSE:GetRunwayRepairtime()',
    'WAREHOUSE:IsUnit()',
    'WAREHOUSE:IsStatic()',
    'WAREHOUSE:IsShip()',
    'WAREHOUSE:onafterStart(From,Event,To)',
    'WAREHOUSE:onafterRestart(From,Event,To)',
    'WAREHOUSE:onafterStop(From,Event,To)',
    'WAREHOUSE:onafterPause(From,Event,To)',
    'WAREHOUSE:onafterUnpause(From,Event,To)',
    'WAREHOUSE:onafterStatus(From,Event,To)',
    'WAREHOUSE:_JobDone()',
    'WAREHOUSE:_CheckAssetStatus()',
    'WAREHOUSE:onafterAddAsset(From,Event,To,group,ngroups,forceattribute,forcecargobay,forceweight,loadradius,skill,liveries,assignment,other)',
    'WAREHOUSE:_RegisterAsset(group,ngroups,forceattribute,forcecargobay,forceweight,loadradius,liveries,skill,assignment)',
    'WAREHOUSE:_AssetItemInfo(asset)',
    'WAREHOUSE:onafterNewAsset(From,Event,To,asset,assignment)',
    'WAREHOUSE:onbeforeAddRequest(From,Event,To,warehouse,AssetDescriptor,AssetDescriptorValue,nAsset,TransportType,nTransport,Assignment,Prio)',
    'WAREHOUSE:onafterAddRequest(From,Event,To,warehouse,AssetDescriptor,AssetDescriptorValue,nAsset,TransportType,nTransport,Prio,Assignment)',
    'WAREHOUSE:onbeforeRequest(From,Event,To,Request)',
    'WAREHOUSE:onafterRequest(From,Event,To,Request)',
    'WAREHOUSE:onafterRequestSpawned(From,Event,To,Request,CargoGroupSet,TransportGroupSet)',
    'CargoTransport:OnAfterPickedUp(From,Event,To,Carrier,PickupZone)',
    'CargoTransport:OnAfterDeployed(From,Event,To,Carrier,DeployZone)',
    'CargoTransport:OnAfterHome(From,Event,To,Carrier,Coordinate,Speed,Height,HomeZone)',
    'CargoTransport:OnAfterLoaded(From,Event,To,Carrier,Cargo,CarrierUnit,PickupZone)',
    'CargoTransport:OnAfterUnloaded(From,Event,To,Carrier,Cargo,CarrierUnit,DeployZone)',
    'CargoTransport:OnAfterBackHome(From,Event,To,Carrier)',
    'WAREHOUSE:onafterUnloaded(From,Event,To,group)',
    'WAREHOUSE:onbeforeArrived(From,Event,To,group)',
    'WAREHOUSE:onafterArrived(From,Event,To,group)',
    'WAREHOUSE:onafterDelivered(From,Event,To,request)',
    'WAREHOUSE:onafterSelfRequest(From,Event,To,groupset,request)',
    'WAREHOUSE:onafterAttacked(From,Event,To,Coalition,Country)',
    'WAREHOUSE:onafterDefeated(From,Event,To)',
    'WAREHOUSE:onafterRespawn(From,Event,To)',
    'WAREHOUSE:onbeforeChangeCountry(From,Event,To,Country)',
    'WAREHOUSE:onafterChangeCountry(From,Event,To,Country)',
    'WAREHOUSE:onbeforeCaptured(From,Event,To,Coalition,Country)',
    'WAREHOUSE:onafterCaptured(From,Event,To,Coalition,Country)',
    'WAREHOUSE:onafterAirbaseCaptured(From,Event,To,Coalition)',
    'WAREHOUSE:onafterAirbaseRecaptured(From,Event,To,Coalition)',
    'WAREHOUSE:onafterRunwayDestroyed(From,Event,To)',
    'WAREHOUSE:onafterRunwayRepaired(From,Event,To)',
    'WAREHOUSE:onafterAssetSpawned(From,Event,To,group,asset,request)',
    'WAREHOUSE:onafterAssetDead(From,Event,To,asset,request)',
    'WAREHOUSE:onafterDestroyed(From,Event,To)',
    'WAREHOUSE:onafterSave(From,Event,To,path,filename)',
    'WAREHOUSE:onbeforeLoad(From,Event,To,path,filename)',
    'WAREHOUSE:onafterLoad(From,Event,To,path,filename)',
    'WAREHOUSE:_SpawnAssetRequest(Request)',
    'WAREHOUSE:_SpawnAssetGroundNaval(alias,asset,request,spawnzone,lateactivated)',
    'WAREHOUSE:_SpawnAssetAircraft(alias,asset,request,parking,uncontrolled,lateactivated)',
    'WAREHOUSE:_SpawnAssetPrepareTemplate(asset,alias)',
    'WAREHOUSE:_RouteGround(group,request)',
    'WAREHOUSE:_RouteNaval(group,request)',
    'WAREHOUSE:_RouteAir(aircraft)',
    'WAREHOUSE:_RouteTrain(Group,Coordinate,Speed)',
    'WAREHOUSE:_Arrived(group)',
    'WAREHOUSE:_PassingWaypoint(group,n,N)',
    'WAREHOUSE:GetAssetByID(id)',
    'WAREHOUSE:GetAssetByName(GroupName)',
    'WAREHOUSE:GetRequestByID(id)',
    'WAREHOUSE:_OnEventBirth(EventData)',
    'WAREHOUSE:_OnEventEngineStartup(EventData)',
    'WAREHOUSE:_OnEventTakeOff(EventData)',
    'WAREHOUSE:_OnEventLanding(EventData)',
    'WAREHOUSE:_OnEventEngineShutdown(EventData)',
    'WAREHOUSE:_OnEventArrived(EventData)',
    'WAREHOUSE:_OnEventCrashOrDead(EventData)',
    'WAREHOUSE:_UnitDead(deadunit,deadgroup,request)',
    'WAREHOUSE:_OnEventBaseCaptured(EventData)',
    'WAREHOUSE:_OnEventMissionEnd(EventData)',
    'WAREHOUSE:_CheckConquered()',
    'WAREHOUSE:_CheckAirbaseOwner()',
    'WAREHOUSE:_CheckRequestConsistancy(queue)',
    'WAREHOUSE:_CheckRequestValid(request)',
    'WAREHOUSE:_CheckRequestNow(request)',
    'WAREHOUSE:_GetTransportsForAssets(request)',
    'WAREHOUSE:_QuantityRel2Abs(relative,ntot)',
    'WAREHOUSE:_CheckQueue()',
    'WAREHOUSE:_SimpleTaskFunction(Function,group)',
    'WAREHOUSE:_SimpleTaskFunctionWP(Function,group,n,N)',
    'WAREHOUSE:_GetTerminal(_attribute,_category)',
    'WAREHOUSE:_FindParkingForAssets(airbase,assets)',
    'WAREHOUSE:_GetRequestOfGroup(group,queue)',
    'WAREHOUSE:_GroupIsTransport(group,request)',
    'WAREHOUSE:_GetNameWithOut(group)',
    'WAREHOUSE:_GetIDsFromGroup(group)',
    'WAREHOUSE:_GetIDsFromGroupName(groupname)',
    'WAREHOUSE:FilterStock(descriptor,attribute,nmax,mobile)',
    'WAREHOUSE:_FilterStock(stock,descriptor,attribute,nmax,mobile)',
    'WAREHOUSE:_HasAttribute(group,attribute)',
    'WAREHOUSE:_GetAttribute(group)',
    'WAREHOUSE:_GetObjectSize(DCSobject)',
    'WAREHOUSE:GetStockInfo(stock)',
    'WAREHOUSE:_DeleteStockItem(stockitem)',
    'WAREHOUSE:_DeleteQueueItem(qitem,queue)',
    'WAREHOUSE:_DeleteQueueItemByID(qitemID,queue)',
    'WAREHOUSE:_SortQueue()',
    'WAREHOUSE:_CheckFuel()',
    'WAREHOUSE:_PrintQueue(queue,name)',
    'WAREHOUSE:_DisplayStatus()',
    'WAREHOUSE:_GetStockAssetsText(messagetoall)',
    'WAREHOUSE:_UpdateWarehouseMarkText()',
    'WAREHOUSE:_DisplayStockItems(stock)',
    'WAREHOUSE:_Fireworks(coord)',
    'WAREHOUSE:_InfoMessage(text,duration)',
    'WAREHOUSE:_DebugMessage(text,duration)',
    'WAREHOUSE:_ErrorMessage(text,duration)',
    'WAREHOUSE:_GetMaxHeight(D,alphaC,alphaD,Hdep,Hdest,Deltahhold)',
    'WAREHOUSE:_GetFlightplan(asset,departure,destination)',
    'FOX:New()',
    'FOX:onafterStart(From,Event,To)',
    'FOX:onafterStop(From,Event,To)',
    'FOX:AddSafeZone(zone)',
    'FOX:AddLaunchZone(zone)',
    'FOX:SetProtectedGroupSet(groupset)',
    'FOX:AddProtectedGroup(group)',
    'FOX:SetExplosionPower(power)',
    'FOX:SetExplosionDistance(distance)',
    'FOX:SetExplosionDistanceBigMissiles(distance,explosivemass)',
    'FOX:SetDisableF10Menu()',
    'FOX:SetEnableF10Menu()',
    'FOX:SetVerbosity(VerbosityLevel)',
    'FOX:SetDefaultMissileDestruction(switch)',
    'FOX:SetDefaultLaunchAlerts(switch)',
    'FOX:SetDefaultLaunchMarks(switch)',
    'FOX:SetDebugOnOff(switch)',
    'FOX:SetDebugOn()',
    'FOX:SetDebugOff()',
    'FOX:onafterStatus(From,Event,To)',
    'FOX:_CheckPlayers()',
    'FOX:_RemoveMissile(missile)',
    'FOX:_CheckMissileStatus()',
    'FOX:_IsProtected(targetunit)',
    'FOX._FuncTrack(weapon,self,missile)',
    'FOX._FuncImpact(weapon,self,missile)',
    'FOX:onafterMissileLaunch(From,Event,To,missile)',
    'FOX:OnEventPlayerEnterAircraft(EventData)',
    'FOX:OnEventBirth(EventData)',
    'FOX:GetMissileTarget(missile)',
    'FOX:OnEventShot(EventData)',
    'FOX:OnEventHit(EventData)',
    'FOX:_AddF10Commands(_unitName)',
    'FOX:_MyStatus(_unitname)',
    'FOX:_GetTargetMissiles(playername)',
    'FOX:_ToggleLaunchAlert(_unitname)',
    'FOX:_ToggleLaunchMark(_unitname)',
    'FOX:_ToggleDestroyMissiles(_unitname)',
    'FOX:_DeadText()',
    'FOX:_CheckCoordSafe(coord)',
    'FOX:_CheckCoordLaunch(coord)',
    'FOX:_GetWeapongHeading(weapon)',
    'FOX:_SayNotchingHeadings(playerData,weapon)',
    'FOX:_GetNotchingHeadings(weapon)',
    'FOX:_GetPlayerFromUnitname(unitName)',
    'FOX:_GetPlayerFromUnit(unit)',
    'FOX:_GetPlayerUnitAndName(_unitName)',
    'MANTIS:New(name,samprefix,ewrprefix,hq,coalition,dynamic,awacs,EmOnOff,Padding,Zones)',
    'MANTIS:_GetSAMTable()',
    'MANTIS:_SetSAMTable(table)',
    'MANTIS:SetEWRGrouping(radius)',
    'MANTIS:AddScootZones(ZoneSet,Number,Random,Formation)',
    'MANTIS:AddZones(AcceptZones,RejectZones,ConflictZones)',
    'MANTIS:SetEWRRange(radius)',
    'MANTIS:SetSAMRadius(radius)',
    'MANTIS:SetSAMRange(range)',
    'MANTIS:SetMaxActiveSAMs(Short,Mid,Long,Classic)',
    'MANTIS:SetNewSAMRangeWhileRunning(range)',
    'MANTIS:Debug(onoff)',
    'MANTIS:GetCommandCenter()',
    'MANTIS:SetAwacs(prefix)',
    'MANTIS:SetAwacsRange(range)',
    'MANTIS:SetCommandCenter(group)',
    'MANTIS:SetDetectInterval(interval)',
    'MANTIS:SetAdvancedMode(onoff,ratio)',
    'MANTIS:SetUsingEmOnOff(switch)',
    'MANTIS:SetUsingDLink(DLink)',
    'MANTIS:_CheckHQState()',
    'MANTIS:_CheckEWRState()',
    'MANTIS:_CalcAdvState()',
    'MANTIS:SetAutoRelocate(hq,ewr)',
    'MANTIS:_RelocateGroups()',
    'MANTIS:_CheckCoordinateInZones(coord)',
    'MANTIS:_PreFilterHeight(height)',
    'MANTIS:_CheckObjectInZone(dectset,samcoordinate,radius,height,dlink)',
    'MANTIS:StartDetection()',
    'MANTIS:StartIntelDetection()',
    'MANTIS:StartAwacsDetection()',
    'MANTIS:_GetSAMDataFromUnits(grpname,mod,sma,chm)',
    'MANTIS:_GetSAMRange(grpname)',
    'MANTIS:SetSAMStartState()',
    'MANTIS:_RefreshSAMTable()',
    'MANTIS:AddShorad(Shorad,Shoradtime)',
    'MANTIS:RemoveShorad()',
    'MANTIS:_CheckLoop(samset,detset,dlink,limit)',
    'MANTIS:_Check(detection,dlink)',
    'MANTIS:_Relocate()',
    'MANTIS:_CheckAdvState()',
    'MANTIS:_CheckDLinkState()',
    'MANTIS:onafterStart(From,Event,To)',
    'MANTIS:onbeforeStatus(From,Event,To)',
    'MANTIS:onafterStatus(From,Event,To)',
    'MANTIS:onafterStop(From,Event,To)',
    'MANTIS:onafterRelocating(From,Event,To)',
    'MANTIS:onafterGreenState(From,Event,To,Group)',
    'MANTIS:onafterRedState(From,Event,To,Group)',
    'MANTIS:onafterAdvStateChange(From,Event,To,Oldstate,Newstate,Interval)',
    'MANTIS:onafterShoradActivated(From,Event,To,Name,Radius,Ontime)',
    'MANTIS:onafterSeadSuppressionStart(From,Event,To,Group,Name,Attacker)',
    'MANTIS:onafterSeadSuppressionEnd(From,Event,To,Group,Name)',
    'MANTIS:onafterSeadSuppressionPlanned(From,Event,To,Group,Name,SuppressionStartTime,SuppressionEndTime,Attacker)',
    'SHORAD:New(Name,ShoradPrefix,Samset,Radius,ActiveTimer,Coalition,UseEmOnOff)',
    'SHORAD:_InitState()',
    'SHORAD:AddScootZones(ZoneSet,Number,Random,Formation)',
    'SHORAD:SwitchDebug(onoff)',
    'SHORAD:SwitchDebugOn()',
    'SHORAD:SwitchDebugOff()',
    'SHORAD:SwitchHARMDefense(onoff)',
    'SHORAD:SwitchAGMDefense(onoff)',
    'SHORAD:SetDefenseLimits(low,high)',
    'SHORAD:SetActiveTimer(seconds)',
    'SHORAD:SetDefenseRadius(meters)',
    'SHORAD:SetUsingEmOnOff(switch)',
    'SHORAD:_CheckHarms(WeaponName)',
    'SHORAD:_CheckMavs(WeaponName)',
    'SHORAD:_CheckCoalition(Coalition)',
    'SHORAD:_CheckShotAtShorad(TargetGroupName)',
    'SHORAD:_CheckShotAtSams(TargetGroupName)',
    'SHORAD:_ShotIsDetected()',
    'SHORAD:onafterWakeUpShorad(From,Event,To,TargetGroup,Radius,ActiveTimer,TargetCat)',
    'SHORAD:onafterCalculateHitZone(From,Event,To,SEADWeapon,pos0,height,SEADGroup)',
    'SHORAD:onafterShootAndScoot(From,Event,To,Shorad)',
    'SHORAD:HandleEventShot(EventData)',
    'AIRBOSS:New(carriername,alias)',
    'AIRBOSS:SetWelcomePlayers(Switch)',
    'AIRBOSS:SetCarrierControlledArea(Radius)',
    'AIRBOSS:SetCarrierControlledZone(Radius)',
    'AIRBOSS:SetCollisionDistance(Distance)',
    'AIRBOSS:SetRecoveryCase(Case)',
    'AIRBOSS:SetHoldingOffsetAngle(Offset)',
    'AIRBOSS:SetMenuRecovery(Duration,WindOnDeck,Uturn,Offset)',
    'AIRBOSS:AddRecoveryWindow(starttime,stoptime,case,holdingoffset,turnintowind,speed,uturn)',
    'AIRBOSS:SetSquadronAI(SetGroup)',
    'AIRBOSS:SetExcludeAI(SetGroup)',
    'AIRBOSS:AddExcludeAI(Group)',
    'AIRBOSS:CloseCurrentRecoveryWindow(Delay)',
    'AIRBOSS:DeleteAllRecoveryWindows(Delay)',
    'AIRBOSS:GetRecoveryWindowByID(id)',
    'AIRBOSS:DeleteRecoveryWindow(Window,Delay)',
    'AIRBOSS:SetRecoveryTurnTime(Interval)',
    'AIRBOSS:SetMPWireCorrection(Dcorr)',
    'AIRBOSS:SetQueueUpdateTime(TimeInterval)',
    'AIRBOSS:SetLSOCallInterval(TimeInterval)',
    'AIRBOSS:SetAirbossNiceGuy(Switch)',
    'AIRBOSS:SetEmergencyLandings(Switch)',
    'AIRBOSS:SetDespawnOnEngineShutdown(Switch)',
    'AIRBOSS:SetRespawnAI(Switch)',
    'AIRBOSS:SetRefuelAI(LowFuelThreshold)',
    'AIRBOSS:SetInitialMaxAlt(MaxAltitude)',
    'AIRBOSS:SetSoundfilesFolder(FolderPath)',
    'AIRBOSS:SetStatusUpdateTime(TimeInterval)',
    'AIRBOSS:SetDefaultMessageDuration(Duration)',
    'AIRBOSS:SetGlideslopeErrorThresholds(_max,_min,High,HIGH,Low,LOW)',
    'AIRBOSS:SetLineupErrorThresholds(_max,_min,Left,LeftMed,LEFT,Right,RightMed,RIGHT)',
    'AIRBOSS:SetMarshalRadius(Radius)',
    'AIRBOSS:SetMenuSingleCarrier(Switch)',
    'AIRBOSS:SetMenuMarkZones(Switch)',
    'AIRBOSS:SetMenuSmokeZones(Switch)',
    'AIRBOSS:SetTrapSheet(Path,Prefix)',
    'AIRBOSS:SetStaticWeather(Switch)',
    'AIRBOSS:SetTACANoff()',
    'AIRBOSS:SetTACAN(Channel,Mode,MorseCode)',
    'AIRBOSS:SetICLSoff()',
    'AIRBOSS:SetICLS(Channel,MorseCode)',
    'AIRBOSS:SetBeaconRefresh(TimeInterval)',
    'AIRBOSS:EnableSRS(PathToSRS,Port,Culture,Gender,Voice,GoogleCreds,Volume,AltBackend)',
    'AIRBOSS:SetLSORadio(Frequency,Modulation,Voice,Gender,Culture)',
    'AIRBOSS:SetAirbossRadio(Frequency,Modulation,Voice,Gender,Culture)',
    'AIRBOSS:SetMarshalRadio(Frequency,Modulation,Voice,Gender,Culture)',
    'AIRBOSS:SetRadioUnitName(unitname)',
    'AIRBOSS:SetRadioRelayLSO(unitname)',
    'AIRBOSS:SetRadioRelayMarshal(unitname)',
    'AIRBOSS:SetUserSoundRadio()',
    'AIRBOSS:SoundCheckLSO(delay)',
    'AIRBOSS:SoundCheckMarshal(delay)',
    'AIRBOSS:SetMaxLandingPattern(nmax)',
    'AIRBOSS:SetMaxMarshalStacks(nmax)',
    'AIRBOSS:SetMaxSectionSize(nmax)',
    'AIRBOSS:SetMaxFlightsPerStack(nmax)',
    'AIRBOSS:SetHandleAION()',
    'AIRBOSS:SetExtraVoiceOvers(status)',
    'AIRBOSS:SetExtraVoiceOversAI(status)',
    'AIRBOSS:SetHandleAIOFF()',
    'AIRBOSS:SetRecoveryTanker(recoverytanker)',
    'AIRBOSS:SetAWACS(awacs)',
    'AIRBOSS:SetDefaultPlayerSkill(skill)',
    'AIRBOSS:SetAutoSave(path,filename)',
    'AIRBOSS:SetDebugModeON()',
    'AIRBOSS:SetPatrolAdInfinitum(switch)',
    'AIRBOSS:SetMagneticDeclination(declination)',
    'AIRBOSS:SetDebugModeOFF()',
    'AIRBOSS:SetFunkManOn(Port,Host)',
    'AIRBOSS:GetNextRecoveryTime(InSeconds)',
    'AIRBOSS:IsRecovering()',
    'AIRBOSS:IsIdle()',
    'AIRBOSS:IsPaused()',
    'AIRBOSS:_ActivateBeacons()',
    'AIRBOSS:onafterStart(From,Event,To)',
    'AIRBOSS:onafterStatus(From,Event,To)',
    'AIRBOSS:_Status()',
    'AIRBOSS:_CheckAIStatus()',
    'AIRBOSS:_CheckPlayerPatternDistance(player)',
    'AIRBOSS:_CheckRecoveryTimes()',
    'AIRBOSS:_GetFlightLead(flight)',
    'AIRBOSS:onbeforeRecoveryCase(From,Event,To,Case,Offset)',
    'AIRBOSS:onafterRecoveryCase(From,Event,To,Case,Offset)',
    'AIRBOSS:onafterRecoveryStart(From,Event,To,Case,Offset)',
    'AIRBOSS:onafterRecoveryStop(From,Event,To)',
    'AIRBOSS:onafterRecoveryPause(From,Event,To,duration)',
    'AIRBOSS:onafterRecoveryUnpause(From,Event,To)',
    'AIRBOSS:onafterPassingWaypoint(From,Event,To,n)',
    'AIRBOSS:onafterIdle(From,Event,To)',
    'AIRBOSS:onafterStop(From,Event,To)',
    'AIRBOSS:_InitStennis()',
    'AIRBOSS:_InitNimitz()',
    'AIRBOSS:_InitForrestal()',
    'AIRBOSS:_InitHermes()',
    'AIRBOSS:_InitInvincible()',
    'AIRBOSS:_InitTarawa()',
    'AIRBOSS:_InitAmerica()',
    'AIRBOSS:_InitJcarlos()',
    'AIRBOSS:_InitCanberra()',
    'AIRBOSS:SetVoiceOversMarshalByGabriella(mizfolder)',
    'AIRBOSS:SetVoiceOversMarshalByRaynor(mizfolder)',
    'AIRBOSS:SetVoiceOversLSOByRaynor(mizfolder)',
    'AIRBOSS:SetVoiceOversLSOByFF(mizfolder)',
    'AIRBOSS:SetVoiceOversMarshalByFF(mizfolder)',
    'AIRBOSS:_InitVoiceOvers()',
    'AIRBOSS:SetVoiceOver(radiocall,duration,subtitle,subduration,filename,suffix)',
    'AIRBOSS:_GetAircraftAoA(playerData)',
    'AIRBOSS:_AoAUnit2Deg(playerData,aoaunits)',
    'AIRBOSS:_AoADeg2Units(playerData,degrees)',
    'AIRBOSS:_GetAircraftParameters(playerData,step)',
    'AIRBOSS:_GetNextMarshalFight()',
    'AIRBOSS:_CheckQueue()',
    'AIRBOSS:_ClearForLanding(flight)',
    'AIRBOSS:_SetPlayerStep(playerData,step,delay)',
    'AIRBOSS:_ScanCarrierZone()',
    'AIRBOSS:_WaitPlayer(playerData)',
    'AIRBOSS:_MarshalPlayer(playerData,stack)',
    'AIRBOSS:_WaitAI(flight,respawn)',
    'AIRBOSS:_MarshalAI(flight,nstack,respawn)',
    'AIRBOSS:_RefuelAI(flight)',
    'AIRBOSS:_LandAI(flight)',
    'AIRBOSS:_GetMarshalAltitude(stack,case)',
    'AIRBOSS:_GetCharlieTime(flightgroup)',
    'AIRBOSS:_AddMarshalGroup(flight,stack)',
    'AIRBOSS:_CollapseMarshalStack(flight,nopattern)',
    'AIRBOSS:_GetFreeStack(ai,case,empty)',
    'AIRBOSS:_GetFreeStack_Old(ai,case,empty)',
    'AIRBOSS:_GetFlightUnits(flight,onground)',
    'AIRBOSS:_GetQueueInfo(queue,case)',
    'AIRBOSS:_PrintQueue(queue,name)',
    'AIRBOSS:_CreateFlightGroup(group)',
    'AIRBOSS:_NewPlayer(unitname)',
    'AIRBOSS:_InitPlayer(playerData,step)',
    'AIRBOSS:_GetFlightFromGroupInQueue(group,queue)',
    'AIRBOSS:_GetFlightElement(unitname)',
    'AIRBOSS:_RemoveFlightElement(unitname)',
    'AIRBOSS:_InQueue(queue,group)',
    'AIRBOSS:_RemoveDeadFlightGroups()',
    'AIRBOSS:_GetLeadFlight(flight)',
    'AIRBOSS:_CheckSectionRecovered(flight)',
    'AIRBOSS:_AddFlightToPatternQueue(flight)',
    'AIRBOSS:_RecoveredElement(unit)',
    'AIRBOSS:_RemoveFlightFromMarshalQueue(flight,nopattern)',
    'AIRBOSS:_RemoveFlightFromQueue(queue,flight)',
    'AIRBOSS:_RemoveUnitFromFlight(unit)',
    'AIRBOSS:_RemoveFlightFromSection(flight)',
    'AIRBOSS:_UpdateFlightSection(flight)',
    'AIRBOSS:_RemoveFlight(flight,completely)',
    'AIRBOSS:_CheckPlayerStatus()',
    'AIRBOSS:_CheckMissedStepOnEntry(playerData)',
    'AIRBOSS:_SetTimeInGroove(playerData)',
    'AIRBOSS:_GetTimeInGroove(playerData)',
    'AIRBOSS:OnEventBirth(EventData)',
    'AIRBOSS:OnEventLand(EventData)',
    'AIRBOSS:OnEventEngineShutdown(EventData)',
    'AIRBOSS:OnEventTakeoff(EventData)',
    'AIRBOSS:OnEventCrash(EventData)',
    'AIRBOSS:OnEventEjection(EventData)',
    'AIRBOSS:OnEventRemoveUnit(EventData)',
    'AIRBOSS:_PlayerLeft(EventData)',
    'AIRBOSS:OnEventMissionEnd(EventData)',
    'AIRBOSS:_Spinning(playerData)',
    'AIRBOSS:_Waiting(playerData)',
    'AIRBOSS:_Holding(playerData)',
    'AIRBOSS:_Commencing(playerData,zonecheck)',
    'AIRBOSS:_Initial(playerData)',
    'AIRBOSS:_CheckCorridor(playerData)',
    'AIRBOSS:_Platform(playerData)',
    'AIRBOSS:_ArcInTurn(playerData)',
    'AIRBOSS:_ArcOutTurn(playerData)',
    'AIRBOSS:_DirtyUp(playerData)',
    'AIRBOSS:_Bullseye(playerData)',
    'AIRBOSS:_BolterPattern(playerData)',
    'AIRBOSS:_BreakEntry(playerData)',
    'AIRBOSS:_Break(playerData,part)',
    'AIRBOSS:_CheckForLongDownwind(playerData)',
    'AIRBOSS:_Abeam(playerData)',
    'AIRBOSS:_Ninety(playerData)',
    'AIRBOSS:_Wake(playerData)',
    'AIRBOSS:_GetGrooveData(playerData)',
    'AIRBOSS:_Final(playerData,nocheck)',
    'AIRBOSS:_Groove(playerData)',
    'AIRBOSS:_CheckWaveOff(glideslopeError,lineupError,AoA,playerData)',
    'AIRBOSS:_CheckFoulDeck(playerData)',
    'AIRBOSS:_GetSternCoord()',
    'AIRBOSS:_GetWireFromDrawArg()',
    'AIRBOSS:_GetWire(Lcoord,dc)',
    'AIRBOSS:_Trapped(playerData)',
    'AIRBOSS:_GetZoneInitial(case)',
    'AIRBOSS:_GetZoneLineup()',
    'AIRBOSS:_GetZoneGroove(l,w,b)',
    'AIRBOSS:_GetZoneBullseye(case)',
    'AIRBOSS:_GetZoneDirtyUp(case)',
    'AIRBOSS:_GetZoneArcOut(case)',
    'AIRBOSS:_GetZoneArcIn(case)',
    'AIRBOSS:_GetZonePlatform(case)',
    'AIRBOSS:_GetZoneCorridor(case,l)',
    'AIRBOSS:_GetZoneCarrierBox()',
    'AIRBOSS:_GetZoneRunwayBox()',
    'AIRBOSS:_GetZoneAbeamLandingSpot()',
    'AIRBOSS:_GetZoneLandingSpot()',
    'AIRBOSS:_GetZoneHolding(case,stack)',
    'AIRBOSS:_GetZoneCommence(case,stack)',
    'AIRBOSS:_AttitudeMonitor(playerData)',
    'AIRBOSS:_Glideslope(unit,optangle)',
    'AIRBOSS:_Glideslope2(unit,optangle)',
    'AIRBOSS:_Lineup(unit,runway)',
    'AIRBOSS:_GetAltCarrier(unit)',
    'AIRBOSS:_GetOptLandingCoordinate()',
    'AIRBOSS:_GetLandingSpotCoordinate()',
    'AIRBOSS:GetHeading(magnetic)',
    'AIRBOSS:GetBRC()',
    'AIRBOSS:GetWind(alt,magnetic,coord)',
    'AIRBOSS:GetWindOnDeck(alt)',
    'AIRBOSS:GetHeadingIntoWind_old(magnetic,coord)',
    'AIRBOSS:GetHeadingIntoWind(vdeck,magnetic,coord)',
    'AIRBOSS:GetBRCintoWind(vdeck)',
    'AIRBOSS:GetFinalBearing(magnetic)',
    'AIRBOSS:GetRadial(case,magnetic,offset,inverse)',
    'AIRBOSS:_GetDeltaHeading(hdg1,hdg2)',
    'AIRBOSS:_GetRelativeHeading(unit,runway)',
    'AIRBOSS:_GetRelativeVelocity(unit)',
    'AIRBOSS:_GetDistances(unit)',
    'AIRBOSS:_CheckLimits(X,Z,check)',
    'AIRBOSS:_LSOadvice(playerData,glideslopeError,lineupError)',
    'AIRBOSS:_EvalGrooveTime(playerData)',
    'AIRBOSS:_LSOgrade(playerData)',
    'AIRBOSS:_Flightdata2Text(playerData,groovestep)',
    'AIRBOSS:_GS(step,n)',
    'AIRBOSS:_CheckAbort(X,Z,pos)',
    'AIRBOSS:_TooFarOutText(X,Z,posData)',
    'AIRBOSS:_AbortPattern(playerData,X,Z,posData,patternwo)',
    'AIRBOSS:_PlayerHint(playerData,delay,soundoff)',
    'AIRBOSS:_StepHint(playerData,step)',
    'AIRBOSS:_AltitudeCheck(playerData,altopt)',
    'AIRBOSS:_AoACheck(playerData,optaoa)',
    'AIRBOSS:_SpeedCheck(playerData,speedopt)',
    'AIRBOSS:_DistanceCheck(playerData,optdist)',
    'AIRBOSS:_AddToDebrief(playerData,hint,step)',
    'AIRBOSS:_Debrief(playerData)',
    'AIRBOSS:_CheckCollisionCoord(coordto,coordfrom)',
    'AIRBOSS:_CheckFreePathToNextWP(fromcoord)',
    'AIRBOSS:_Pathfinder()',
    'AIRBOSS:CarrierResumeRoute(gotocoord)',
    'AIRBOSS:CarrierDetour(coord,speed,uturn,uspeed,tcoord)',
    'AIRBOSS:CarrierTurnIntoWind(time,vdeck,uturn)',
    'AIRBOSS:_GetNextWaypoint()',
    'AIRBOSS:_InitWaypoints()',
    'AIRBOSS:_PatrolRoute(n)',
    'AIRBOSS:_GetETAatNextWP()',
    'AIRBOSS:_CheckCarrierTurning()',
    'AIRBOSS:_CheckPatternUpdate()',
    'AIRBOSS._PassingWaypoint(group,airboss,i,final)',
    'AIRBOSS._ResumeRoute(group,airboss,gotocoord)',
    'AIRBOSS._ReachedHoldingZone(group,airboss,flight)',
    'AIRBOSS._TaskFunctionMarshalAI(group,airboss,flight)',
    'AIRBOSS:_GetACNickname(actype)',
    'AIRBOSS:_GetOnboardNumberPlayer(group)',
    'AIRBOSS:_GetOnboardNumbers(group,playeronly)',
    'AIRBOSS:_GetTowerFrequency()',
    'AIRBOSS:_GetGoodBadScore(playerData)',
    'AIRBOSS:_IsCarrierAircraft(unit)',
    'AIRBOSS:_IsHumanUnit(unit)',
    'AIRBOSS:_IsHuman(group)',
    'AIRBOSS:_GetFuelState(unit)',
    'AIRBOSS:_GetAngels(alt)',
    'AIRBOSS:_GetUnitMasses(unit)',
    'AIRBOSS:_GetPlayerDataUnit(unit)',
    'AIRBOSS:_GetPlayerDataGroup(group)',
    'AIRBOSS:_GetPlayerUnit(_unitName)',
    'AIRBOSS:_GetPlayerUnitAndName(_unitName)',
    'AIRBOSS:GetCoalition()',
    'AIRBOSS:GetCoordinate()',
    'AIRBOSS:GetCoord()',
    'AIRBOSS:_GetStaticWeather()',
    'AIRBOSS._CheckRadioQueueT(param,time)',
    'AIRBOSS:_CheckRadioQueue(radioqueue,name)',
    'AIRBOSS:RadioTransmission(radio,call,loud,delay,interval,click,pilotcall)',
    'AIRBOSS:SetSRSPilotVoice(Voice,Gender,Culture)',
    'AIRBOSS:_NeedsSubtitle(call)',
    'AIRBOSS:Broadcast(radio,call,loud)',
    'AIRBOSS:Sound2Player(playerData,radio,call,loud,delay)',
    'AIRBOSS:_RadioSubtitle(radio,call,loud)',
    'AIRBOSS:_RadioFilename(call,loud,channel)',
    'AIRBOSS:_GetNiceSRSText(text)',
    'AIRBOSS:MessageToPlayer(playerData,message,sender,receiver,duration,clear,delay)',
    'AIRBOSS:MessageToPattern(message,sender,receiver,duration,clear,delay)',
    'AIRBOSS:MessageToMarshal(message,sender,receiver,duration,clear,delay)',
    'AIRBOSS:_NewRadioCall(call,sender,subtitle,subduration,modexreceiver,modexsender)',
    'AIRBOSS:_GetRadioSender(radio)',
    'AIRBOSS:_IsOnboard(text)',
    'AIRBOSS:_Number2Sound(playerData,sender,number,delay)',
    'AIRBOSS:_Number2Radio(radio,number,delay,interval,pilotcall)',
    'AIRBOSS:_MarshallInboundCall(unit,modex)',
    'AIRBOSS:_CommencingCall(unit,modex)',
    'AIRBOSS:_LSOCallAircraftBall(modex,nickname,fuelstate)',
    'AIRBOSS:_MarshalCallGasAtTanker(modex)',
    'AIRBOSS:_MarshalCallGasAtDivert(modex,divertname)',
    'AIRBOSS:_MarshalCallRecoveryStopped(case)',
    'AIRBOSS:_MarshalCallRecoveryPausedUntilFurtherNotice()',
    'AIRBOSS:_MarshalCallRecoveryPausedResumedAt(clock)',
    'AIRBOSS:_MarshalCallClearedForRecovery(modex,case)',
    'AIRBOSS:_MarshalCallResumeRecovery()',
    'AIRBOSS:_MarshalCallNewFinalBearing(FB)',
    'AIRBOSS:_MarshalCallCarrierTurnTo(hdg)',
    'AIRBOSS:_MarshalCallStackFull(modex,nwaiting)',
    'AIRBOSS:_MarshalCallRecoveryStart(case)',
    'AIRBOSS:_MarshalCallArrived(modex,case,brc,altitude,charlie,qfe)',
    'AIRBOSS:_AddF10Commands(_unitName)',
    'AIRBOSS:_SkipperStartRecovery(_unitName,case)',
    'AIRBOSS:_SkipperStopRecovery(_unitName)',
    'AIRBOSS:_SkipperRecoveryOffset(_unitName,offset)',
    'AIRBOSS:_SkipperRecoveryTime(_unitName,time)',
    'AIRBOSS:_SkipperRecoverySpeed(_unitName,speed)',
    'AIRBOSS:_SkipperRecoveryUturn(_unitName)',
    'AIRBOSS:_ResetPlayerStatus(_unitName)',
    'AIRBOSS:_RequestMarshal(_unitName)',
    'AIRBOSS:_RequestEmergency(_unitName)',
    'AIRBOSS:_RequestSpinning(_unitName)',
    'AIRBOSS:_RequestCommence(_unitName)',
    'AIRBOSS:_RequestRefueling(_unitName)',
    'AIRBOSS:_RemoveSectionMember(playerData,sectionmember)',
    'AIRBOSS:_SetSection(_unitName)',
    'AIRBOSS:_DisplayScoreBoard(_unitName)',
    'AIRBOSS:_DisplayPlayerGrades(_unitName)',
    'AIRBOSS:_DisplayDebriefing(_unitName)',
    'AIRBOSS:_DisplayQueue(_unitname,qname)',
    'AIRBOSS:_DisplayCarrierInfo(_unitname)',
    'AIRBOSS:_DisplayCarrierWeather(_unitname)',
    'AIRBOSS:_SetDifficulty(_unitname,difficulty)',
    'AIRBOSS:_SetHintsOnOff(_unitname)',
    'AIRBOSS:_DisplayAttitude(_unitname)',
    'AIRBOSS:_SubtitlesOnOff(_unitname)',
    'AIRBOSS:_TrapsheetOnOff(_unitname)',
    'AIRBOSS:_DisplayPlayerStatus(_unitName)',
    'AIRBOSS:_MarkMarshalZone(_unitName,flare)',
    'AIRBOSS:_MarkCaseZones(_unitName,flare)',
    'AIRBOSS:_LSORadioCheck(_unitName)',
    'AIRBOSS:_MarshalRadioCheck(_unitName)',
    'AIRBOSS:_SaveTrapSheet(playerData,grade)',
    'AIRBOSS:onbeforeSave(From,Event,To,path,filename)',
    'AIRBOSS:onafterSave(From,Event,To,path,filename)',
    'AIRBOSS:onbeforeLoad(From,Event,To,path,filename)',
    'AIRBOSS:onafterLoad(From,Event,To,path,filename)',
    'AIRBOSS:onafterLSOGrade(From,Event,To,playerData,grade)',
    'RECOVERYTANKER:New(carrierunit,tankergroupname)',
    'RECOVERYTANKER:SetUnlimitedFuel(OnOff)',
    'RECOVERYTANKER:SetSpeed(speed)',
    'RECOVERYTANKER:SetAltitude(altitude)',
    'RECOVERYTANKER:SetRacetrackDistances(distbow,diststern)',
    'RECOVERYTANKER:SetPatternUpdateInterval(interval)',
    'RECOVERYTANKER:SetPatternUpdateDistance(distancechange)',
    'RECOVERYTANKER:SetPatternUpdateHeading(headingchange)',
    'RECOVERYTANKER:SetLowFuelThreshold(fuelthreshold)',
    'RECOVERYTANKER:SetHomeBase(airbase,terminaltype)',
    'RECOVERYTANKER:SetRecoveryAirboss(switch)',
    'RECOVERYTANKER:SetAWACS(switch,eplrs)',
    'RECOVERYTANKER:SetCallsign(callsignname,callsignnumber)',
    'RECOVERYTANKER:SetModex(modex)',
    'RECOVERYTANKER:SetTakeoff(takeofftype)',
    'RECOVERYTANKER:SetTakeoffHot()',
    'RECOVERYTANKER:SetTakeoffCold()',
    'RECOVERYTANKER:SetTakeoffAir()',
    'RECOVERYTANKER:SetRespawnOn()',
    'RECOVERYTANKER:SetRespawnOff()',
    'RECOVERYTANKER:SetRespawnOnOff(switch)',
    'RECOVERYTANKER:SetRespawnInAir()',
    'RECOVERYTANKER:SetUseUncontrolledAircraft()',
    'RECOVERYTANKER:SetTACANoff()',
    'RECOVERYTANKER:SetTACAN(channel,morse,mode)',
    'RECOVERYTANKER:SetRadio(frequency,modulation)',
    'RECOVERYTANKER:SetDebugModeON()',
    'RECOVERYTANKER:SetDebugModeOFF()',
    'RECOVERYTANKER:IsReturning()',
    'RECOVERYTANKER:IsReturned()',
    'RECOVERYTANKER:IsRunning()',
    'RECOVERYTANKER:IsRefueling()',
    'RECOVERYTANKER:IsStopped()',
    'RECOVERYTANKER:GetAlias()',
    'RECOVERYTANKER:GetUnitName()',
    'RECOVERYTANKER:onafterStart(From,Event,To)',
    'RECOVERYTANKER:onafterStatus(From,Event,To)',
    'RECOVERYTANKER:onafterPatternUpdate(From,Event,To)',
    'RECOVERYTANKER:onafterRTB(From,Event,To,airbase)',
    'RECOVERYTANKER:onafterReturned(From,Event,To,airbase)',
    'RECOVERYTANKER:onafterStop(From,Event,To)',
    'RECOVERYTANKER:OnEventLand(EventData)',
    'RECOVERYTANKER:OnEventEngineShutdown(EventData)',
    'RECOVERYTANKER:_RefuelingStart(EventData)',
    'RECOVERYTANKER:_RefuelingStop(EventData)',
    'RECOVERYTANKER:_OnEventCrashOrDead(EventData)',
    'RECOVERYTANKER:_InitPatternTaskFunction()',
    'RECOVERYTANKER:_InitRoute(dist,delay)',
    'RECOVERYTANKER:_CheckPatternUpdate(dt)',
    'RECOVERYTANKER:_ActivateTACAN(delay)',
    'RECOVERYTANKER:_Pattern()',
    'RESCUEHELO:New(carrierunit,helogroupname)',
    'RESCUEHELO:SetLowFuelThreshold(threshold)',
    'RESCUEHELO:SetHomeBase(airbase)',
    'RESCUEHELO:SetRescueZone(radius)',
    'RESCUEHELO:SetRescueHoverSpeed(speed)',
    'RESCUEHELO:SetRescueDuration(duration)',
    'RESCUEHELO:SetRescueOn()',
    'RESCUEHELO:SetRescueOff()',
    'RESCUEHELO:SetRescueStopBoatOn()',
    'RESCUEHELO:SetRescueStopBoatOff()',
    'RESCUEHELO:SetTakeoff(takeofftype)',
    'RESCUEHELO:SetTakeoffHot()',
    'RESCUEHELO:SetTakeoffCold()',
    'RESCUEHELO:SetTakeoffAir()',
    'RESCUEHELO:SetAltitude(alt)',
    'RESCUEHELO:SetOffsetX(distance)',
    'RESCUEHELO:SetOffsetZ(distance)',
    'RESCUEHELO:SetRespawnOn()',
    'RESCUEHELO:SetRespawnOff()',
    'RESCUEHELO:SetRespawnOnOff(switch)',
    'RESCUEHELO:SetRespawnInAir()',
    'RESCUEHELO:SetModex(modex)',
    'RESCUEHELO:SetFollowTimeInterval(dt)',
    'RESCUEHELO:SetUseUncontrolledAircraft()',
    'RESCUEHELO:SetDebugModeON()',
    'RESCUEHELO:SetDebugModeOFF()',
    'RESCUEHELO:IsReturning()',
    'RESCUEHELO:IsRunning()',
    'RESCUEHELO:IsRescuing()',
    'RESCUEHELO:IsStopped()',
    'RESCUEHELO:GetAlias()',
    'RESCUEHELO:GetUnitName()',
    'RESCUEHELO:OnEventLand(EventData)',
    'RESCUEHELO:_OnEventCrashOrEject(EventData)',
    'RESCUEHELO:onafterStart(From,Event,To)',
    'RESCUEHELO:onafterStatus(From,Event,To)',
    'RESCUEHELO:onafterRun(From,Event,To)',
    'RESCUEHELO:_TaskRTB()',
    'RESCUEHELO:onafterRescue(From,Event,To,RescueCoord)',
    'RESCUEHELO:onafterRTB(From,Event,To,airbase)',
    'RESCUEHELO:onafterReturned(From,Event,To,airbase)',
    'RESCUEHELO:onafterStop(From,Event,To)',
    'RESCUEHELO:RouteRTB(RTBAirbase,Speed)',
    'ATIS:New(AirbaseName,Frequency,Modulation)',
    'ATIS:_InitLocalization()',
    'ATIS:SetLocale(locale)',
    'ATIS:SetSoundfilesPath(path)',
    'ATIS:SetRadioRelayUnitName(unitname)',
    'ATIS:SetTowerFrequencies(freqs)',
    'ATIS:SetTransmitOnlyWithPlayers(Switch)',
    'ATIS:SetActiveRunway(runway)',
    'ATIS:SetActiveRunwayLanding(runway,preferleft)',
    'ATIS:SetActiveRunwayTakeoff(runway,preferleft)',
    'ATIS:SetRunwayLength()',
    'ATIS:SetRunwayLength()',
    'ATIS:SetElevation()',
    'ATIS:SetRadioPower(power)',
    'ATIS:SetMapMarks(switch)',
    'ATIS:GetSRSText()',
    'ATIS:SetRunwayHeadingsMagnetic(headings)',
    'ATIS:SetSubtitleDuration(duration)',
    'ATIS:SetMetricUnits()',
    'ATIS:SetImperialUnits()',
    'ATIS:SetPressureMillimetersMercury()',
    'ATIS:SetTemperatureFahrenheit()',
    'ATIS:SetRelativeHumidity(Humidity)',
    'ATIS:SetAltimeterQNH(switch)',
    'ATIS:SetReportmBar(switch)',
    'ATIS:SetAdditionalInformation(text)',
    'ATIS:ReportQNHOnly()',
    'ATIS:SetMagneticDeclination(magvar)',
    'ATIS:SetRunwayCorrectionMagnetic2True(correction)',
    'ATIS:SetReportWindTrue()',
    'ATIS:SetZuluTimeDifference(delta)',
    'ATIS:ReportZuluTimeOnly()',
    'ATIS:AddILS(frequency,runway)',
    'ATIS:SetVOR(frequency)',
    'ATIS:AddNDBouter(frequency,runway)',
    'ATIS:AddNDBinner(frequency,runway)',
    'ATIS:SetTACAN(channel)',
    'ATIS:SetRSBN(channel)',
    'ATIS:AddPRMG(channel,runway)',
    'ATIS:MarkRunways(markall)',
    'ATIS:SetSRS(PathToSRS,Gender,Culture,Voice,Port,GoogleKey)',
    'ATIS:SetQueueUpdateTime(TimeInterval)',
    'ATIS:GetCoalition()',
    'ATIS:onafterStart(From,Event,To)',
    'ATIS:onafterStatus(From,Event,To)',
    'ATIS:onafterCheckQueue(From,Event,To)',
    'ATIS:onafterBroadcast(From,Event,To)',
    'ATIS:onafterReport(From,Event,To,Text)',
    'ATIS:OnEventBaseCaptured(EventData)',
    'ATIS:UpdateMarker(information,runact,wind,altimeter,temperature)',
    'ATIS:GetActiveRunway(Takeoff)',
    'ATIS:GetMagneticRunway(windfrom)',
    'ATIS:GetNavPoint(navpoints,runway,left)',
    'ATIS:GetRunwayWithoutLR(runway)',
    'ATIS:GetRunwayLR(runway)',
    'ATIS:Transmission(sound,interval,subtitle,path)',
    'ATIS:SoundCheck()',
    'ATIS:GetMissionWeather()',
    'ATIS:_GetThousandsAndHundreds(n)',
    'CTLD_CARGO:New(ID,Name,Templates,Sorte,HasBeenMoved,LoadDirectly,CratesNeeded,Positionable,Dropped,PerCrateMass,Stock,Subcategory)',
    'CTLD_CARGO:GetID()',
    'CTLD_CARGO:GetSubCat()',
    'CTLD_CARGO:GetMass()',
    'CTLD_CARGO:GetName()',
    'CTLD_CARGO:GetTemplates()',
    'CTLD_CARGO:HasMoved()',
    'CTLD_CARGO:WasDropped()',
    'CTLD_CARGO:CanLoadDirectly()',
    'CTLD_CARGO:GetCratesNeeded()',
    'CTLD_CARGO:GetType()',
    'CTLD_CARGO:GetPositionable()',
    'CTLD_CARGO:SetHasMoved(moved)',
    'CTLD_CARGO:Isloaded()',
    'CTLD_CARGO:SetWasDropped(dropped)',
    'CTLD_CARGO:GetStock()',
    'CTLD_CARGO:AddStock(Number)',
    'CTLD_CARGO:RemoveStock(Number)',
    'CTLD_CARGO:SetStock(Number)',
    'CTLD_CARGO:IsRepair()',
    'CTLD_CARGO:IsStatic()',
    'CTLD_CARGO:AddMark(Mark)',
    'CTLD_CARGO:GetMark(Mark)',
    'CTLD_CARGO:WipeMark()',
    'CTLD_CARGO:GetNetMass()',
    'CTLD_ENGINEERING:New(Name,GroupName,HeliGroup,HeliUnit)',
    'CTLD_ENGINEERING:SetStatus(State)',
    'CTLD_ENGINEERING:GetStatus()',
    'CTLD_ENGINEERING:IsStatus(State)',
    'CTLD_ENGINEERING:IsNotStatus(State)',
    'CTLD_ENGINEERING:Start()',
    'CTLD_ENGINEERING:Stop()',
    'CTLD_ENGINEERING:Build()',
    'CTLD_ENGINEERING:Done()',
    'CTLD_ENGINEERING:Search(crates,number)',
    'CTLD_ENGINEERING:Move()',
    'CTLD_ENGINEERING:Arrive()',
    'CTLD_ENGINEERING:_GetDistance(_point1,_point2)',
    'CTLD:New(Coalition,Prefixes,Alias)',
    'CTLD:_GetUnitCapabilities(Unit)',
    'CTLD:_GenerateUHFrequencies()',
    'CTLD:_GenerateFMFrequencies()',
    'CTLD:_GenerateVHFrequencies()',
    'CTLD:SetTroopDropZoneRadius(Radius)',
    'CTLD:AddPlayerTask(PlayerTask)',
    'CTLD:_EventHandler(EventData)',
    'CTLD:_SendMessage(Text,Time,Clearscreen,Group)',
    'CTLD:_FindTroopsCargoObject(Name)',
    'CTLD:_FindCratesCargoObject(Name)',
    'CTLD:PreloadTroops(Unit,Troopname)',
    'CTLD:_PreloadCrates(Group,Unit,Cargo,NumberOfCrates)',
    'CTLD:PreloadCrates(Unit,Cratesname,NumberOfCrates)',
    'CTLD:_LoadTroops(Group,Unit,Cargotype,Inject)',
    'CTLD:_FindRepairNearby(Group,Unit,Repairtype)',
    'CTLD:_RepairObjectFromCrates(Group,Unit,Crates,Build,Number,Engineering)',
    'CTLD:_ExtractTroops(Group,Unit)',
    'CTLD:_GetCrates(Group,Unit,Cargo,number,drop,pack)',
    'CTLD:InjectStatics(Zone,Cargo,RandomCoord)',
    'CTLD:InjectStaticFromTemplate(Zone,Template,Mass)',
    'CTLD:_ListCratesNearby(_group,_unit)',
    'CTLD:_RemoveCratesNearby(_group,_unit)',
    'CTLD:_GetDistance(_point1,_point2)',
    'CTLD:_FindCratesNearby(_group,_unit,_dist,_ignoreweight)',
    'CTLD:_LoadCratesNearby(Group,Unit)',
    'CTLD:_CleanupTrackedCrates(crateIdsToRemove)',
    'CTLD:_GetUnitCargoMass(Unit)',
    'CTLD:_GetMaxLoadableMass(Unit)',
    'CTLD:_UpdateUnitCargoMass(Unit)',
    'CTLD:_ListCargo(Group,Unit)',
    'CTLD:_ListInventory(Group,Unit)',
    'CTLD:IsHercules(Unit)',
    'CTLD:_GetUnitPositions(Coordinate,Radius,Heading,Template)',
    'CTLD:_UnloadTroops(Group,Unit)',
    'CTLD:_UnloadCrates(Group,Unit)',
    'CTLD:_BuildCrates(Group,Unit,Engineering)',
    'CTLD:_PackCratesNearby(Group,Unit)',
    'CTLD:_RepairCrates(Group,Unit,Engineering)',
    'CTLD:_BuildObjectFromCrates(Group,Unit,Build,Repair,RepairLocation)',
    'CTLD:_MoveGroupToZone(Group)',
    'CTLD:_CleanUpCrates(Crates,Build,Number)',
    'CTLD:_RefreshF10Menus()',
    'CTLD:_CheckTemplates(temptable)',
    'CTLD:AddTroopsCargo(Name,Templates,Type,NoTroops,PerTroopMass,Stock,SubCategory)',
    'CTLD:AddCratesCargo(Name,Templates,Type,NoCrates,PerCrateMass,Stock,SubCategory)',
    'CTLD:AddStaticsCargo(Name,Mass,Stock,SubCategory)',
    'CTLD:GetStaticsCargoFromTemplate(Name,Mass)',
    'CTLD:AddCratesRepair(Name,Template,Type,NoCrates,PerCrateMass,Stock,SubCategory)',
    'CTLD:AddZone(Zone)',
    'CTLD:ActivateZone(Name,ZoneType,NewState)',
    'CTLD:DeactivateZone(Name,ZoneType)',
    'CTLD:_GetFMBeacon(Name)',
    'CTLD:_GetUHFBeacon(Name)',
    'CTLD:_GetVHFBeacon(Name)',
    'CTLD:AddCTLDZone(Name,Type,Color,Active,HasBeacon,Shiplength,Shipwidth)',
    'CTLD:AddCTLDZoneFromAirbase(AirbaseName,Type,Color,Active,HasBeacon)',
    'CTLD:DropBeaconNow(Unit)',
    'CTLD:CheckDroppedBeacons()',
    'CTLD:_ListRadioBeacons(Group,Unit)',
    'CTLD:_AddRadioBeacon(Name,Sound,Mhz,Modulation,IsShip,IsDropped)',
    'CTLD:SetSoundfilesFolder(FolderPath)',
    'CTLD:_RefreshRadioBeacons()',
    'CTLD:IsUnitInZone(Unit,Zonetype)',
    'CTLD:SmokePositionNow(Unit,Flare,SmokeColor)',
    'CTLD:SmokeZoneNearBy(Unit,Flare)',
    'CTLD:SetUnitCapabilities(Unittype,Cancrates,Cantroops,Cratelimit,Trooplimit,Length,Maxcargoweight)',
    'CTLD:UnitCapabilities(Unittype,Cancrates,Cantroops,Cratelimit,Trooplimit,Length,Maxcargoweight)',
    'CTLD:IsCorrectHover(Unit)',
    'CTLD:IsCorrectFlightParameters(Unit)',
    'CTLD:_ShowHoverParams(Group,Unit)',
    'CTLD:_ShowFlightParams(Group,Unit)',
    'CTLD:CanHoverLoad(Unit)',
    'CTLD:IsUnitInAir(Unit)',
    'CTLD:AutoHoverLoad(Unit)',
    'CTLD:CheckAutoHoverload()',
    'CTLD:CleanDroppedTroops()',
    'CTLD:AddStockTroops(Name,Number)',
    'CTLD:AddStockCrates(Name,Number)',
    'CTLD:AddStockStatics(Name,Number)',
    'CTLD:SetStockCrates(Name,Number)',
    'CTLD:SetStockTroops(Name,Number)',
    'CTLD:SetStockStatics(Name,Number)',
    'CTLD:GetStockCrates()',
    'CTLD:GetStockTroops()',
    'CTLD:GetStockStatics()',
    'CTLD:RemoveStockTroops(Name,Number)',
    'CTLD:RemoveStockCrates(Name,Number)',
    'CTLD:RemoveStockStatics(Name,Number)',
    'CTLD:_CheckEngineers()',
    'CTLD:InjectTroops(Zone,Cargo,Surfacetypes,PreciseLocation,Structure)',
    'CTLD:InjectVehicles(Zone,Cargo,Surfacetypes,PreciseLocation,Structure)',
    'CTLD:onafterStart(From,Event,To)',
    'CTLD:onbeforeStatus(From,Event,To)',
    'CTLD:onafterStatus(From,Event,To)',
    'CTLD:onafterStop(From,Event,To)',
    'CTLD:onbeforeTroopsPickedUp(From,Event,To,Group,Unit,Cargo)',
    'CTLD:onbeforeCratesPickedUp(From,Event,To,Group,Unit,Cargo)',
    'CTLD:onbeforeTroopsExtracted(From,Event,To,Group,Unit,Troops)',
    'CTLD:onbeforeTroopsDeployed(From,Event,To,Group,Unit,Troops)',
    'CTLD:onafterTroopsDeployed(From,Event,To,Group,Unit,Troops,Type)',
    'CTLD:onbeforeCratesDropped(From,Event,To,Group,Unit,Cargotable)',
    'CTLD:onbeforeCratesBuild(From,Event,To,Group,Unit,Vehicle)',
    'CTLD:onafterCratesBuild(From,Event,To,Group,Unit,Vehicle)',
    'CTLD:onbeforeTroopsRTB(From,Event,To,Group,Unit)',
    'CTLD:onbeforeSave(From,Event,To,path,filename)',
    'CTLD:onafterSave(From,Event,To,path,filename)',
    'CTLD:onbeforeLoad(From,Event,To,path,filename)',
    'CTLD:onafterLoad(From,Event,To,path,filename)',
    'CTLD_HERCULES:New(Coalition,Alias,CtldObject)',
    'CTLD_HERCULES:CheckTemplates()',
    'CTLD_HERCULES:Soldier_SpawnGroup(Cargo_Drop_initiator,Cargo_Drop_Position,Cargo_Type_name,CargoHeading,Cargo_Country,GroupSpacing)',
    'CTLD_HERCULES:Cargo_SpawnGroup(Cargo_Drop_initiator,Cargo_Drop_Position,Cargo_Type_name,CargoHeading,Cargo_Country)',
    'CTLD_HERCULES:Cargo_SpawnStatic(Cargo_Drop_initiator,Cargo_Drop_Position,Cargo_Type_name,CargoHeading,dead,Cargo_Country)',
    'CTLD_HERCULES:Cargo_SpawnDroppedAsCargo(_name,_pos)',
    'CTLD_HERCULES:Cargo_SpawnObjects(Cargo_Drop_initiator,Cargo_Drop_Direction,Cargo_Content_position,Cargo_Type_name,Cargo_over_water,Container_Enclosed,ParatrooperGroupSpawn,offload_cargo,all_cargo_survive_to_the_ground,all_cargo_gets_destroyed,destroy_cargo_dropped_without_parachute,Cargo_Country)',
    'CTLD_HERCULES:Calculate_Object_Height_AGL(group)',
    'CTLD_HERCULES:Check_SurfaceType(object)',
    'CTLD_HERCULES:Cargo_Track(cargo,initiator)',
    'CTLD_HERCULES:Calculate_Cargo_Drop_initiator_NorthCorrection(point)',
    'CTLD_HERCULES:Calculate_Cargo_Drop_initiator_Heading(Cargo_Drop_initiator)',
    'CTLD_HERCULES:Cargo_Initialize(Initiator,Cargo_Contents,Cargo_Type_name,Container_Enclosed,SoldierGroup,ParatrooperGroupSpawnInit)',
    'CTLD_HERCULES:SetType(key,cargoType,cargoNum)',
    'CTLD_HERCULES:_HandleShot(Cargo_Drop_Event)',
    'CTLD_HERCULES:_HandleBirth(event)',
    'CSAR:New(Coalition,Template,Alias)',
    'CSAR:_CreateDownedPilotTrack(Group,Groupname,Side,OriginalUnit,Description,Typename,Frequency,Playername,Wetfeet)',
    'CSAR:_PilotsOnboard(_heliName)',
    'CSAR:_DoubleEjection(_unitname)',
    'CSAR:AddPlayerTask(PlayerTask)',
    'CSAR:_SpawnPilotInField(country,point,frequency,wetfeet)',
    'CSAR:_AddSpecialOptions(group)',
    'CSAR:_AddCsar(_coalition,_country,_point,_typeName,_unitName,_playerName,_freq,noMessage,_description,forcedesc)',
    'CSAR:_SpawnCsarAtZone(_zone,_coalition,_description,_randomPoint,_nomessage,unitname,typename,forcedesc)',
    'CSAR:SpawnCSARAtZone(Zone,Coalition,Description,RandomPoint,Nomessage,Unitname,Typename,Forcedesc)',
    'CSAR:_SpawnCASEVAC(_Point,_coalition,_description,_nomessage,unitname,typename,forcedesc)',
    'CSAR:SpawnCASEVAC(Point,Coalition,Description,Nomessage,Unitname,Typename,Forcedesc)',
    'CSAR:_EventHandler(EventData)',
    'CSAR:_InitSARForPilot(_downedGroup,_GroupName,_freq,_nomessage)',
    'CSAR:_CheckNameInDownedPilots(name)',
    'CSAR:_RemoveNameFromDownedPilots(name,force)',
    'CSAR:SetCallSignOptions(ShortCallsign,Keepnumber,CallsignTranslations)',
    'CSAR:_GetCustomCallSign(UnitName)',
    'CSAR:_CheckWoundedGroupStatus(heliname,woundedgroupname)',
    'CSAR:_PopSmokeForGroup(_woundedGroupName,_woundedLeader)',
    'CSAR:_PickupUnit(_heliUnit,_pilotName,_woundedGroup,_woundedGroupName)',
    'CSAR:_UpdateUnitCargoMass(_heliName)',
    'CSAR:_OrderGroupToMoveToPoint(_leader,_destination)',
    'CSAR:_IsLoadingDoorOpen(unit_name)',
    'CSAR:_CheckCloseWoundedGroup(_distance,_heliUnit,_heliName,_woundedGroup,_woundedGroupName)',
    'CSAR:_ScheduledSARFlight(heliname,groupname,isairport)',
    'CSAR:_RescuePilots(_heliUnit)',
    'CSAR:_GetSARHeli(_unitName)',
    'CSAR:_DisplayMessageToSAR(_unit,_text,_time,_clear,_speak,_override)',
    'CSAR:_GetPositionOfWounded(_woundedGroup)',
    'CSAR:_DisplayActiveSAR(_unitName)',
    'CSAR:_GetClosestDownedPilot(_heli)',
    'CSAR:_SignalFlare(_unitName)',
    'CSAR:_DisplayToAllSAR(_message,_side,_messagetime)',
    'CSAR:_Reqsmoke(_unitName)',
    'CSAR:_GetClosestMASH(_heli)',
    'CSAR:_CheckOnboard(_unitName)',
    'CSAR:_AddMedevacMenuItem()',
    'CSAR:_GetDistance(_point1,_point2)',
    'CSAR:_GenerateVHFrequencies()',
    'CSAR:_GenerateADFFrequency()',
    'CSAR:_GetClockDirection(_heli,_group)',
    'CSAR:_AddBeaconToGroup(_group,_freq)',
    'CSAR:_RefreshRadioBeacons()',
    'CSAR:_CountActiveDownedPilots()',
    'CSAR:_ReachedPilotLimit()',
    'CSAR:onafterStart(From,Event,To)',
    'CSAR:_CheckDownedPilotTable()',
    'CSAR:onbeforeStatus(From,Event,To)',
    'CSAR:onafterStatus(From,Event,To)',
    'CSAR:onafterStop(From,Event,To)',
    'CSAR:onbeforeApproach(From,Event,To,Heliname,Woundedgroupname)',
    'CSAR:onbeforeBoarded(From,Event,To,Heliname,Woundedgroupname)',
    'CSAR:onbeforeReturning(From,Event,To,Heliname,Woundedgroupname,IsAirPort)',
    'CSAR:onbeforeRescued(From,Event,To,HeliUnit,HeliName,PilotsSaved)',
    'CSAR:onbeforePilotDown(From,Event,To,Group,Frequency,Leadername,CoordinatesText)',
    'CSAR:onbeforeLanded(From,Event,To,HeliName,Airbase)',
    'CSAR:onbeforeSave(From,Event,To,path,filename)',
    'CSAR:onafterSave(From,Event,To,path,filename)',
    'CSAR:onbeforeLoad(From,Event,To,path,filename)',
    'CSAR:onafterLoad(From,Event,To,path,filename)',
    'AI_BALANCER:New(SetClient,SpawnAI)',
    'AI_BALANCER:InitSpawnInterval(Earliest,Latest)',
    'AI_BALANCER:ReturnToNearestAirbases(ReturnThresholdRange,ReturnAirbaseSet)',
    'AI_BALANCER:ReturnToHomeAirbase(ReturnThresholdRange)',
    'AI_BALANCER:onenterSpawning(SetGroup,From,Event,To,ClientName)',
    'AI_BALANCER:onenterDestroying(SetGroup,From,Event,To,ClientName,AIGroup)',
    'AI_BALANCER:onenterReturning(SetGroup,From,Event,To,AIGroup)',
    'AI_BALANCER:onenterMonitoring(SetGroup)',
    'AI_AIR:New(AIGroup)',
    'GROUP:OnEventTakeoff(EventData,Fsm)',
    'AI_AIR:SetDispatcher(Dispatcher)',
    'AI_AIR:GetDispatcher()',
    'AI_AIR:SetTargetDistance(Coordinate)',
    'AI_AIR:ClearTargetDistance()',
    'AI_AIR:SetSpeed(PatrolMinSpeed,PatrolMaxSpeed)',
    'AI_AIR:SetRTBSpeed(RTBMinSpeed,RTBMaxSpeed)',
    'AI_AIR:SetAltitude(PatrolFloorAltitude,PatrolCeilingAltitude)',
    'AI_AIR:SetHomeAirbase(HomeAirbase)',
    'AI_AIR:SetTanker(TankerName)',
    'AI_AIR:SetDisengageRadius(DisengageRadius)',
    'AI_AIR:SetStatusOff()',
    'AI_AIR:SetFuelThreshold(FuelThresholdPercentage,OutOfFuelOrbitTime)',
    'AI_AIR:SetDamageThreshold(PatrolDamageThreshold)',
    'AI_AIR:onafterStart(Controllable,From,Event,To)',
    'AI_AIR:onafterReturn(Controllable,From,Event,To)',
    'AI_AIR:onbeforeStatus()',
    'AI_AIR:onafterStatus()',
    'AI_AIR.RTBRoute(AIGroup,Fsm)',
    'AI_AIR.RTBHold(AIGroup,Fsm)',
    'AI_AIR:SetRTBSpeedFactors(MinFactor,MaxFactor)',
    'AI_AIR:onafterRTB(AIGroup,From,Event,To)',
    'AI_AIR:onafterHome(AIGroup,From,Event,To)',
    'AI_AIR:onafterHold(AIGroup,From,Event,To,HoldTime)',
    'AI_AIR.Resume(AIGroup,Fsm)',
    'AI_AIR:onafterRefuel(AIGroup,From,Event,To)',
    'AI_AIR:onafterDead()',
    'AI_AIR:OnCrash(EventData)',
    'AI_AIR:OnEjection(EventData)',
    'AI_AIR:OnPilotDead(EventData)',
    'AI_AIR_PATROL:New(AI_Air,AIGroup,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_AIR_PATROL:SetEngageRange(EngageRange)',
    'AI_AIR_PATROL:SetRaceTrackPattern(LegMin,LegMax,HeadingMin,HeadingMax,DurationMin,DurationMax,CapCoordinates)',
    'AI_AIR_PATROL:onafterPatrol(AIPatrol,From,Event,To)',
    'AI_AIR_PATROL.___PatrolRoute(AIPatrol,Fsm)',
    'AI_AIR_PATROL:onafterPatrolRoute(AIPatrol,From,Event,To)',
    'AI_AIR_PATROL.Resume(AIPatrol,Fsm)',
    'AI_AIR_ENGAGE:New(AI_Air,AIGroup,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_AIR_ENGAGE:onafterStart(AIGroup,From,Event,To)',
    'AI_AIR_ENGAGE:onafterEngage(AIGroup,From,Event,To)',
    'AI_AIR_ENGAGE:onbeforeEngage(AIGroup,From,Event,To)',
    'AI_AIR_ENGAGE:onafterAbort(AIGroup,From,Event,To)',
    'AI_AIR_ENGAGE:onafterAccomplish(AIGroup,From,Event,To)',
    'AI_AIR_ENGAGE:onafterDestroy(AIGroup,From,Event,To,EventData)',
    'AI_AIR_ENGAGE:OnEventDead(EventData)',
    'AI_AIR_ENGAGE.___EngageRoute(AIGroup,Fsm,AttackSetUnit)',
    'AI_AIR_ENGAGE:onafterEngageRoute(DefenderGroup,From,Event,To,AttackSetUnit)',
    'AI_AIR_ENGAGE.___Engage(AIGroup,Fsm,AttackSetUnit)',
    'AI_AIR_ENGAGE:onafterEngage(DefenderGroup,From,Event,To,AttackSetUnit)',
    'AI_AIR_ENGAGE.Resume(AIEngage,Fsm)',
    'AI_A2A_PATROL:New(AIPatrol,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_A2A_PATROL:SetSpeed(PatrolMinSpeed,PatrolMaxSpeed)',
    'AI_A2A_PATROL:SetAltitude(PatrolFloorAltitude,PatrolCeilingAltitude)',
    'AI_A2A_PATROL:onafterPatrol(AIPatrol,From,Event,To)',
    'AI_A2A_PATROL.PatrolRoute(AIPatrol,Fsm)',
    'AI_A2A_PATROL:onafterRoute(AIPatrol,From,Event,To)',
    'AI_A2A_CAP:New2(AICap,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType,PatrolZone,PatrolMinSpeed,PatrolMaxSpeed,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolAltType)',
    'AI_A2A_CAP:New(AICap,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,EngageMinSpeed,EngageMaxSpeed,PatrolAltType)',
    'AI_A2A_CAP:onafterStart(AICap,From,Event,To)',
    'AI_A2A_CAP:SetEngageZone(EngageZone)',
    'AI_A2A_CAP:SetEngageRange(EngageRange)',
    'AI_A2A_CAP:CreateAttackUnitTasks(AttackSetUnit,DefenderGroup,EngageAltitude)',
    'AI_A2A_GCI:New2(AIIntercept,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2A_GCI:New(AIIntercept,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2A_GCI:onafterStart(AIIntercept,From,Event,To)',
    'AI_A2A_GCI:CreateAttackUnitTasks(AttackSetUnit,DefenderGroup,EngageAltitude)',
    'AI_A2A_DISPATCHER:New(Detection)',
    'AI_A2A_DISPATCHER:onafterStart(From,Event,To)',
    'AI_A2A_DISPATCHER:ParkDefender(DefenderSquadron)',
    'AI_A2A_DISPATCHER:OnEventBaseCaptured(EventData)',
    'AI_A2A_DISPATCHER:OnEventCrashOrDead(EventData)',
    'AI_A2A_DISPATCHER:OnEventLand(EventData)',
    'AI_A2A_DISPATCHER:OnEventEngineShutdown(EventData)',
    'AI_A2A_DISPATCHER:SetEngageRadius(EngageRadius)',
    'AI_A2A_DISPATCHER:SetDisengageRadius(DisengageRadius)',
    'AI_A2A_DISPATCHER:SetGciRadius(GciRadius)',
    'AI_A2A_DISPATCHER:SetBorderZone(BorderZone)',
    'AI_A2A_DISPATCHER:SetTacticalDisplay(TacticalDisplay)',
    'AI_A2A_DISPATCHER:SetDefaultDamageThreshold(DamageThreshold)',
    'AI_A2A_DISPATCHER:SetDefaultCapTimeInterval(CapMinSeconds,CapMaxSeconds)',
    'AI_A2A_DISPATCHER:SetDefaultCapLimit(CapLimit)',
    'AI_A2A_DISPATCHER:SetIntercept(InterceptDelay)',
    'AI_A2A_DISPATCHER:GetAIFriendliesNearBy(DetectedItem)',
    'AI_A2A_DISPATCHER:GetDefenderTasks()',
    'AI_A2A_DISPATCHER:GetDefenderTask(Defender)',
    'AI_A2A_DISPATCHER:GetDefenderTaskFsm(Defender)',
    'AI_A2A_DISPATCHER:GetDefenderTaskTarget(Defender)',
    'AI_A2A_DISPATCHER:GetDefenderTaskSquadronName(Defender)',
    'AI_A2A_DISPATCHER:ClearDefenderTask(Defender)',
    'AI_A2A_DISPATCHER:ClearDefenderTaskTarget(Defender)',
    'AI_A2A_DISPATCHER:SetDefenderTask(SquadronName,Defender,Type,Fsm,Target)',
    'AI_A2A_DISPATCHER:SetDefenderTaskTarget(Defender,AttackerDetection)',
    'AI_A2A_DISPATCHER:SetSquadron(SquadronName,AirbaseName,TemplatePrefixes,ResourceCount)',
    'AI_A2A_DISPATCHER:GetSquadron(SquadronName)',
    'AI_A2A_DISPATCHER:QuerySquadron(Squadron)',
    'AI_A2A_DISPATCHER:SetSquadronVisible(SquadronName)',
    'AI_A2A_DISPATCHER:IsSquadronVisible(SquadronName)',
    'AI_A2A_DISPATCHER:SetSquadronCap2(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType,Zone,PatrolMinSpeed,PatrolMaxSpeed,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolAltType)',
    'AI_A2A_DISPATCHER:SetSquadronCap(SquadronName,Zone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,EngageMinSpeed,EngageMaxSpeed,AltType)',
    'AI_A2A_DISPATCHER:SetSquadronCapInterval(SquadronName,CapLimit,LowInterval,HighInterval,Probability)',
    'AI_A2A_DISPATCHER:GetCAPDelay(SquadronName)',
    'AI_A2A_DISPATCHER:CanCAP(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultCapRacetrack(LeglengthMin,LeglengthMax,HeadingMin,HeadingMax,DurationMin,DurationMax,CapCoordinates)',
    'AI_A2A_DISPATCHER:SetSquadronCapRacetrack(SquadronName,LeglengthMin,LeglengthMax,HeadingMin,HeadingMax,DurationMin,DurationMax,CapCoordinates)',
    'AI_A2A_DISPATCHER:CanGCI(SquadronName)',
    'AI_A2A_DISPATCHER:SetSquadronGci2(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2A_DISPATCHER:SetSquadronGci(SquadronName,EngageMinSpeed,EngageMaxSpeed)',
    'AI_A2A_DISPATCHER:SetDefaultOverhead(Overhead)',
    'AI_A2A_DISPATCHER:SetSquadronOverhead(SquadronName,Overhead)',
    'AI_A2A_DISPATCHER:SetDefaultGrouping(Grouping)',
    'AI_A2A_DISPATCHER:SetSquadronGrouping(SquadronName,Grouping)',
    'AI_A2A_DISPATCHER:SetDefaultTakeoff(Takeoff)',
    'AI_A2A_DISPATCHER:SetSquadronTakeoff(SquadronName,Takeoff)',
    'AI_A2A_DISPATCHER:GetDefaultTakeoff()',
    'AI_A2A_DISPATCHER:GetSquadronTakeoff(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultTakeoffInAir()',
    'AI_A2A_DISPATCHER:SetSendMessages(onoff)',
    'AI_A2A_DISPATCHER:SetSquadronTakeoffInAir(SquadronName,TakeoffAltitude)',
    'AI_A2A_DISPATCHER:SetDefaultTakeoffFromRunway()',
    'AI_A2A_DISPATCHER:SetSquadronTakeoffFromRunway(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultTakeoffFromParkingHot()',
    'AI_A2A_DISPATCHER:SetSquadronTakeoffFromParkingHot(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultTakeoffFromParkingCold()',
    'AI_A2A_DISPATCHER:SetSquadronTakeoffFromParkingCold(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultTakeoffInAirAltitude(TakeoffAltitude)',
    'AI_A2A_DISPATCHER:SetSquadronTakeoffInAirAltitude(SquadronName,TakeoffAltitude)',
    'AI_A2A_DISPATCHER:SetDefaultLanding(Landing)',
    'AI_A2A_DISPATCHER:SetSquadronLanding(SquadronName,Landing)',
    'AI_A2A_DISPATCHER:GetDefaultLanding()',
    'AI_A2A_DISPATCHER:GetSquadronLanding(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultLandingNearAirbase()',
    'AI_A2A_DISPATCHER:SetSquadronLandingNearAirbase(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultLandingAtRunway()',
    'AI_A2A_DISPATCHER:SetSquadronLandingAtRunway(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultLandingAtEngineShutdown()',
    'AI_A2A_DISPATCHER:SetSquadronLandingAtEngineShutdown(SquadronName)',
    'AI_A2A_DISPATCHER:SetDefaultFuelThreshold(FuelThreshold)',
    'AI_A2A_DISPATCHER:SetSquadronFuelThreshold(SquadronName,FuelThreshold)',
    'AI_A2A_DISPATCHER:SetDefaultTanker(TankerName)',
    'AI_A2A_DISPATCHER:SetSquadronTanker(SquadronName,TankerName)',
    'AI_A2A_DISPATCHER:SetSquadronLanguage(SquadronName,Language)',
    'AI_A2A_DISPATCHER:SetSquadronRadioFrequency(SquadronName,RadioFrequency,RadioModulation,RadioPower)',
    'AI_A2A_DISPATCHER:AddDefenderToSquadron(Squadron,Defender,Size)',
    'AI_A2A_DISPATCHER:RemoveDefenderFromSquadron(Squadron,Defender)',
    'AI_A2A_DISPATCHER:GetSquadronFromDefender(Defender)',
    'AI_A2A_DISPATCHER:EvaluateSWEEP(DetectedItem)',
    'AI_A2A_DISPATCHER:CountCapAirborne(SquadronName)',
    'AI_A2A_DISPATCHER:CountDefendersEngaged(AttackerDetection)',
    'AI_A2A_DISPATCHER:CountDefendersToBeEngaged(AttackerDetection,DefenderCount)',
    'AI_A2A_DISPATCHER:ResourceActivate(DefenderSquadron,DefendersNeeded)',
    'AI_A2A_DISPATCHER:onafterCAP(From,Event,To,SquadronName)',
    'AI_A2A_Fsm:onafterTakeoff(DefenderGroup,From,Event,To)',
    'AI_A2A_Fsm:onafterPatrolRoute(DefenderGroup,From,Event,To)',
    'AI_A2A_Fsm:onafterRTB(DefenderGroup,From,Event,To)',
    'AI_A2A_Fsm:onafterHome(Defender,From,Event,To,Action)',
    'AI_A2A_DISPATCHER:onafterENGAGE(From,Event,To,AttackerDetection,Defenders)',
    'AI_A2A_DISPATCHER:onafterGCI(From,Event,To,AttackerDetection,DefendersMissing,DefenderFriendlies)',
    'Fsm:onafterTakeoff(DefenderGroup,From,Event,To)',
    'Fsm:onafterEngageRoute(DefenderGroup,From,Event,To,AttackSetUnit)',
    'Fsm:onafterEngage(DefenderGroup,From,Event,To,AttackSetUnit)',
    'Fsm:onafterRTB(DefenderGroup,From,Event,To)',
    'Fsm:onafterLostControl(Defender,From,Event,To)',
    'Fsm:onafterHome(DefenderGroup,From,Event,To,Action)',
    'AI_A2A_DISPATCHER:EvaluateENGAGE(DetectedItem)',
    'AI_A2A_DISPATCHER:EvaluateGCI(DetectedItem)',
    'AI_A2A_DISPATCHER:Order(DetectedItem)',
    'AI_A2A_DISPATCHER:ShowTacticalDisplay(Detection)',
    'AI_A2A_DISPATCHER:ProcessDetected(Detection)',
    'AI_A2A_DISPATCHER:GetPlayerFriendliesNearBy(DetectedItem)',
    'AI_A2A_DISPATCHER:GetFriendliesNearBy(DetectedItem)',
    'AI_A2A_DISPATCHER:SchedulerCAP(SquadronName)',
    'AI_A2A_DISPATCHER:AddToSquadron(Squadron,Amount)',
    'AI_A2A_DISPATCHER:RemoveFromSquadron(Squadron,Amount)',
    'AI_A2A_GCICAP:New(EWRPrefixes,TemplatePrefixes,CapPrefixes,CapLimit,GroupingRadius,EngageRadius,GciRadius,ResourceCount)',
    'AI_A2A_GCICAP:NewWithBorder(EWRPrefixes,TemplatePrefixes,BorderPrefix,CapPrefixes,CapLimit,GroupingRadius,EngageRadius,GciRadius,ResourceCount)',
    'AI_A2G_BAI:New2(AIGroup,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_A2G_BAI:New(AIGroup,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_A2G_BAI:CreateAttackUnitTasks(AttackSetUnit,DefenderGroup,EngageAltitude)',
    'AI_A2G_CAS:New2(AIGroup,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_A2G_CAS:New(AIGroup,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_A2G_CAS:CreateAttackUnitTasks(AttackSetUnit,DefenderGroup,EngageAltitude)',
    'AI_A2G_SEAD:New2(AIGroup,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_A2G_SEAD:New(AIGroup,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_A2G_SEAD:CreateAttackUnitTasks(AttackSetUnit,DefenderGroup,EngageAltitude)',
    'AI_A2G_DISPATCHER:New(Detection)',
    'AI_A2G_DISPATCHER:onafterStart(From,Event,To)',
    'AI_A2G_DISPATCHER:Lock(DetectedItemIndex)',
    'AI_A2G_DISPATCHER:Unlock(DetectedItemIndex)',
    'AI_A2G_DISPATCHER:SetDefenseLimit(DefenseLimit)',
    'AI_A2G_DISPATCHER:SetDefenseApproach(DefenseApproach)',
    'AI_A2G_DISPATCHER:ResourcePark(DefenderSquadron)',
    'AI_A2G_DISPATCHER:OnEventBaseCaptured(EventData)',
    'AI_A2G_DISPATCHER:OnEventCrashOrDead(EventData)',
    'AI_A2G_DISPATCHER:OnEventLand(EventData)',
    'AI_A2G_DISPATCHER:OnEventEngineShutdown(EventData)',
    'AI_A2G_DISPATCHER:AddDefenseCoordinate(DefenseCoordinateName,DefenseCoordinate)',
    'AI_A2G_DISPATCHER:SetDefenseReactivityLow()',
    'AI_A2G_DISPATCHER:SetDefenseReactivityMedium()',
    'AI_A2G_DISPATCHER:SetDefenseReactivityHigh()',
    'AI_A2G_DISPATCHER:SetDisengageRadius(DisengageRadius)',
    'AI_A2G_DISPATCHER:SetDefenseRadius(DefenseRadius)',
    'AI_A2G_DISPATCHER:SetBorderZone(BorderZone)',
    'AI_A2G_DISPATCHER:SetTacticalDisplay(TacticalDisplay)',
    'AI_A2G_DISPATCHER:SetDefaultDamageThreshold(DamageThreshold)',
    'AI_A2G_DISPATCHER:SetDefaultPatrolTimeInterval(PatrolMinSeconds,PatrolMaxSeconds)',
    'AI_A2G_DISPATCHER:SetDefaultPatrolLimit(PatrolLimit)',
    'AI_A2G_DISPATCHER:SetDefaultEngageLimit(EngageLimit)',
    'AI_A2G_DISPATCHER:SetIntercept(InterceptDelay)',
    'AI_A2G_DISPATCHER:GetDefenderFriendliesNearBy(DetectedItem)',
    'AI_A2G_DISPATCHER:GetDefenderTasks()',
    'AI_A2G_DISPATCHER:GetDefenderTask(Defender)',
    'AI_A2G_DISPATCHER:GetDefenderTaskFsm(Defender)',
    'AI_A2G_DISPATCHER:GetDefenderTaskTarget(Defender)',
    'AI_A2G_DISPATCHER:GetDefenderTaskSquadronName(Defender)',
    'AI_A2G_DISPATCHER:ClearDefenderTask(Defender)',
    'AI_A2G_DISPATCHER:ClearDefenderTaskTarget(Defender)',
    'AI_A2G_DISPATCHER:SetDefenderTask(SquadronName,Defender,Type,Fsm,Target,Size)',
    'AI_A2G_DISPATCHER:SetDefenderTaskTarget(Defender,AttackerDetection)',
    'AI_A2G_DISPATCHER:SetSquadron(SquadronName,AirbaseName,TemplatePrefixes,ResourceCount)',
    'AI_A2G_DISPATCHER:GetSquadron(SquadronName)',
    'AI_A2G_DISPATCHER:QuerySquadron(Squadron)',
    'AI_A2G_DISPATCHER:IsSquadronVisible(SquadronName)',
    'AI_A2G_DISPATCHER:SetSquadronTakeoffInterval(SquadronName,TakeoffInterval)',
    'AI_A2G_DISPATCHER:SetSquadronPatrolInterval(SquadronName,PatrolLimit,LowInterval,HighInterval,Probability,DefenseTaskType)',
    'AI_A2G_DISPATCHER:SetSquadronSeadPatrolInterval(SquadronName,PatrolLimit,LowInterval,HighInterval,Probability)',
    'AI_A2G_DISPATCHER:SetSquadronCasPatrolInterval(SquadronName,PatrolLimit,LowInterval,HighInterval,Probability)',
    'AI_A2G_DISPATCHER:SetSquadronBaiPatrolInterval(SquadronName,PatrolLimit,LowInterval,HighInterval,Probability)',
    'AI_A2G_DISPATCHER:GetPatrolDelay(SquadronName)',
    'AI_A2G_DISPATCHER:CanPatrol(SquadronName,DefenseTaskType)',
    'AI_A2G_DISPATCHER:CanDefend(SquadronName,DefenseTaskType)',
    'AI_A2G_DISPATCHER:SetSquadronEngageLimit(SquadronName,EngageLimit,DefenseTaskType)',
    'AI_A2G_DISPATCHER:SetSquadronSead2(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2G_DISPATCHER:SetSquadronSead(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude)',
    'AI_A2G_DISPATCHER:SetSquadronSeadEngageLimit(SquadronName,EngageLimit)',
    'AI_A2G_DISPATCHER:SetSquadronSeadPatrol2(SquadronName,Zone,PatrolMinSpeed,PatrolMaxSpeed,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolAltType,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2G_DISPATCHER:SetSquadronSeadPatrol(SquadronName,Zone,FloorAltitude,CeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,EngageMinSpeed,EngageMaxSpeed,AltType)',
    'AI_A2G_DISPATCHER:SetSquadronCas2(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2G_DISPATCHER:SetSquadronCas(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude)',
    'AI_A2G_DISPATCHER:SetSquadronCasEngageLimit(SquadronName,EngageLimit)',
    'AI_A2G_DISPATCHER:SetSquadronCasPatrol2(SquadronName,Zone,PatrolMinSpeed,PatrolMaxSpeed,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolAltType,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2G_DISPATCHER:SetSquadronCasPatrol(SquadronName,Zone,FloorAltitude,CeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,EngageMinSpeed,EngageMaxSpeed,AltType)',
    'AI_A2G_DISPATCHER:SetSquadronBai2(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2G_DISPATCHER:SetSquadronBai(SquadronName,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude)',
    'AI_A2G_DISPATCHER:SetSquadronBaiEngageLimit(SquadronName,EngageLimit)',
    'AI_A2G_DISPATCHER:SetSquadronBaiPatrol2(SquadronName,Zone,PatrolMinSpeed,PatrolMaxSpeed,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolAltType,EngageMinSpeed,EngageMaxSpeed,EngageFloorAltitude,EngageCeilingAltitude,EngageAltType)',
    'AI_A2G_DISPATCHER:SetSquadronBaiPatrol(SquadronName,Zone,FloorAltitude,CeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,EngageMinSpeed,EngageMaxSpeed,AltType)',
    'AI_A2G_DISPATCHER:SetDefaultOverhead(Overhead)',
    'AI_A2G_DISPATCHER:SetSquadronOverhead(SquadronName,Overhead)',
    'AI_A2G_DISPATCHER:GetSquadronOverhead(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultGrouping(Grouping)',
    'AI_A2G_DISPATCHER:SetSquadronGrouping(SquadronName,Grouping)',
    'AI_A2G_DISPATCHER:SetSquadronEngageProbability(SquadronName,EngageProbability)',
    'AI_A2G_DISPATCHER:SetDefaultTakeoff(Takeoff)',
    'AI_A2G_DISPATCHER:SetSquadronTakeoff(SquadronName,Takeoff)',
    'AI_A2G_DISPATCHER:GetDefaultTakeoff()',
    'AI_A2G_DISPATCHER:GetSquadronTakeoff(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultTakeoffInAir()',
    'AI_A2G_DISPATCHER:SetSquadronTakeoffInAir(SquadronName,TakeoffAltitude)',
    'AI_A2G_DISPATCHER:SetDefaultTakeoffFromRunway()',
    'AI_A2G_DISPATCHER:SetSquadronTakeoffFromRunway(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultTakeoffFromParkingHot()',
    'AI_A2G_DISPATCHER:SetSquadronTakeoffFromParkingHot(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultTakeoffFromParkingCold()',
    'AI_A2G_DISPATCHER:SetSquadronTakeoffFromParkingCold(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultTakeoffInAirAltitude(TakeoffAltitude)',
    'AI_A2G_DISPATCHER:SetSquadronTakeoffInAirAltitude(SquadronName,TakeoffAltitude)',
    'AI_A2G_DISPATCHER:SetDefaultLanding(Landing)',
    'AI_A2G_DISPATCHER:SetSquadronLanding(SquadronName,Landing)',
    'AI_A2G_DISPATCHER:GetDefaultLanding()',
    'AI_A2G_DISPATCHER:GetSquadronLanding(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultLandingNearAirbase()',
    'AI_A2G_DISPATCHER:SetSquadronLandingNearAirbase(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultLandingAtRunway()',
    'AI_A2G_DISPATCHER:SetSquadronLandingAtRunway(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultLandingAtEngineShutdown()',
    'AI_A2G_DISPATCHER:SetSquadronLandingAtEngineShutdown(SquadronName)',
    'AI_A2G_DISPATCHER:SetDefaultFuelThreshold(FuelThreshold)',
    'AI_A2G_DISPATCHER:SetSquadronFuelThreshold(SquadronName,FuelThreshold)',
    'AI_A2G_DISPATCHER:SetDefaultTanker(TankerName)',
    'AI_A2G_DISPATCHER:SetSquadronTanker(SquadronName,TankerName)',
    'AI_A2G_DISPATCHER:SetSquadronRadioFrequency(SquadronName,RadioFrequency,RadioModulation,RadioPower)',
    'AI_A2G_DISPATCHER:AddDefenderToSquadron(Squadron,Defender,Size)',
    'AI_A2G_DISPATCHER:RemoveDefenderFromSquadron(Squadron,Defender)',
    'AI_A2G_DISPATCHER:GetSquadronFromDefender(Defender)',
    'AI_A2G_DISPATCHER:CountPatrolAirborne(SquadronName,DefenseTaskType)',
    'AI_A2G_DISPATCHER:CountDefendersEngaged(AttackerDetection,AttackerCount)',
    'AI_A2G_DISPATCHER:CountDefenders(AttackerDetection,DefenderCount,DefenderTaskType)',
    'AI_A2G_DISPATCHER:ResourceActivate(DefenderSquadron,DefendersNeeded)',
    'AI_A2G_DISPATCHER:onafterPatrol(From,Event,To,SquadronName,DefenseTaskType)',
    'AI_A2G_DISPATCHER:ResourceQueue(Patrol,DefenderSquadron,DefendersNeeded,Defense,DefenseTaskType,AttackerDetection,SquadronName)',
    'AI_A2G_DISPATCHER:ResourceTakeoff()',
    'AI_A2G_DISPATCHER:ResourcePatrol(DefenderSquadron,DefendersNeeded,Patrol,DefenseTaskType,AttackerDetection,SquadronName)',
    'AI_A2G_Fsm:onafterTakeoff(DefenderGroup,From,Event,To)',
    'AI_A2G_Fsm:onafterPatrolRoute(DefenderGroup,From,Event,To)',
    'AI_A2G_Fsm:onafterEngageRoute(DefenderGroup,From,Event,To,AttackSetUnit)',
    'AI_A2G_Fsm:OnAfterEngage(DefenderGroup,From,Event,To,AttackSetUnit)',
    'AI_A2G_Fsm:onafterRTB(DefenderGroup,From,Event,To)',
    'AI_A2G_Fsm:onafterLostControl(DefenderGroup,From,Event,To)',
    'AI_A2G_Fsm:onafterHome(DefenderGroup,From,Event,To,Action)',
    'AI_A2G_DISPATCHER:ResourceEngage(DefenderSquadron,DefendersNeeded,Defense,DefenseTaskType,AttackerDetection,SquadronName)',
    'AI_A2G_Fsm:onafterTakeoff(DefenderGroup,From,Event,To)',
    'AI_A2G_Fsm:onafterEngageRoute(DefenderGroup,From,Event,To,AttackSetUnit)',
    'AI_A2G_Fsm:OnAfterEngage(DefenderGroup,From,Event,To,AttackSetUnit)',
    'AI_A2G_Fsm:onafterRTB(DefenderGroup,From,Event,To)',
    'AI_A2G_Fsm:onafterLostControl(DefenderGroup,From,Event,To)',
    'AI_A2G_Fsm:onafterHome(DefenderGroup,From,Event,To,Action)',
    'AI_A2G_DISPATCHER:onafterEngage(From,Event,To,AttackerDetection,Defenders)',
    'AI_A2G_DISPATCHER:HasDefenseLine(DefenseCoordinate,DetectedItem)',
    'AI_A2G_DISPATCHER:onafterDefend(From,Event,To,DetectedItem,DefendersTotal,DefendersEngaged,DefendersMissing,DefenderFriendlies,DefenseTaskType)',
    'AI_A2G_DISPATCHER:Evaluate_SEAD(DetectedItem)',
    'AI_A2G_DISPATCHER:Evaluate_CAS(DetectedItem)',
    'AI_A2G_DISPATCHER:Evaluate_BAI(DetectedItem)',
    'AI_A2G_DISPATCHER:Keys(DetectedItem)',
    'AI_A2G_DISPATCHER:Order(DetectedItem)',
    'AI_A2G_DISPATCHER:ShowTacticalDisplay(Detection)',
    'AI_A2G_DISPATCHER:ProcessDetected(Detection)',
    'AI_A2G_DISPATCHER:GetPlayerFriendliesNearBy(DetectedItem)',
    'AI_A2G_DISPATCHER:GetFriendliesNearBy(DetectedItem)',
    'AI_A2G_DISPATCHER:SchedulerPatrol(SquadronName)',
    'AI_A2G_DISPATCHER:SetSendMessages(onoff)',
    'AI_A2G_DISPATCHER:AddToSquadron(Squadron,Amount)',
    'AI_A2G_DISPATCHER:RemoveFromSquadron(Squadron,Amount)',
    'AI_PATROL_ZONE:New(PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_PATROL_ZONE:SetSpeed(PatrolMinSpeed,PatrolMaxSpeed)',
    'AI_PATROL_ZONE:SetAltitude(PatrolFloorAltitude,PatrolCeilingAltitude)',
    'AI_PATROL_ZONE:SetDetectionOn()',
    'AI_PATROL_ZONE:SetDetectionOff()',
    'AI_PATROL_ZONE:SetStatusOff()',
    'AI_PATROL_ZONE:SetDetectionActivated()',
    'AI_PATROL_ZONE:SetDetectionDeactivated()',
    'AI_PATROL_ZONE:SetRefreshTimeInterval(Seconds)',
    'AI_PATROL_ZONE:SetDetectionZone(DetectionZone)',
    'AI_PATROL_ZONE:GetDetectedUnits()',
    'AI_PATROL_ZONE:ClearDetectedUnits()',
    'AI_PATROL_ZONE:ManageFuel(PatrolFuelThresholdPercentage,PatrolOutOfFuelOrbitTime)',
    'AI_PATROL_ZONE:ManageDamage(PatrolDamageThreshold)',
    'AI_PATROL_ZONE:onafterStart(Controllable,From,Event,To)',
    'AI_PATROL_ZONE:onbeforeDetect(Controllable,From,Event,To)',
    'AI_PATROL_ZONE:onafterDetect(Controllable,From,Event,To)',
    'AI_PATROL_ZONE:_NewPatrolRoute(AIControllable)',
    'AI_PATROL_ZONE:onafterRoute(Controllable,From,Event,To)',
    'AI_PATROL_ZONE:onbeforeStatus()',
    'AI_PATROL_ZONE:onafterStatus()',
    'AI_PATROL_ZONE:onafterRTB()',
    'AI_PATROL_ZONE:onafterDead()',
    'AI_PATROL_ZONE:OnCrash(EventData)',
    'AI_PATROL_ZONE:OnEjection(EventData)',
    'AI_PATROL_ZONE:OnPilotDead(EventData)',
    'AI_CAP_ZONE:New(PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,PatrolAltType)',
    'AI_CAP_ZONE:SetEngageZone(EngageZone)',
    'AI_CAP_ZONE:SetEngageRange(EngageRange)',
    'AI_CAP_ZONE:onafterStart(Controllable,From,Event,To)',
    'AI_CAP_ZONE.EngageRoute(EngageGroup,Fsm)',
    'AI_CAP_ZONE:onbeforeEngage(Controllable,From,Event,To)',
    'AI_CAP_ZONE:onafterDetected(Controllable,From,Event,To)',
    'AI_CAP_ZONE:onafterAbort(Controllable,From,Event,To)',
    'AI_CAP_ZONE:onafterEngage(Controllable,From,Event,To)',
    'AI_CAP_ZONE:onafterAccomplish(Controllable,From,Event,To)',
    'AI_CAP_ZONE:onafterDestroy(Controllable,From,Event,To,EventData)',
    'AI_CAP_ZONE:OnEventDead(EventData)',
    'AI_CAS_ZONE:New(PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,EngageZone,PatrolAltType)',
    'AI_CAS_ZONE:SetEngageZone(EngageZone)',
    'AI_CAS_ZONE:onafterStart(Controllable,From,Event,To)',
    'AI_CAS_ZONE.EngageRoute(EngageGroup,Fsm)',
    'AI_CAS_ZONE:onbeforeEngage(Controllable,From,Event,To)',
    'AI_CAS_ZONE:onafterTarget(Controllable,From,Event,To)',
    'AI_CAS_ZONE:onafterAbort(Controllable,From,Event,To)',
    'AI_CAS_ZONE:onafterAccomplish(Controllable,From,Event,To)',
    'AI_CAS_ZONE:onafterDestroy(Controllable,From,Event,To,EventData)',
    'AI_CAS_ZONE:OnEventDead(EventData)',
    'AI_BAI_ZONE:New(PatrolZone,PatrolFloorAltitude,PatrolCeilingAltitude,PatrolMinSpeed,PatrolMaxSpeed,EngageZone,PatrolAltType)',
    'AI_BAI_ZONE:SetEngageZone(EngageZone)',
    'AI_BAI_ZONE:SearchOnOff(Search)',
    'AI_BAI_ZONE:SearchOff()',
    'AI_BAI_ZONE:SearchOn()',
    'AI_BAI_ZONE:onafterStart(Controllable,From,Event,To)',
    'AI_BAI_ZONE:onbeforeEngage(Controllable,From,Event,To)',
    'AI_BAI_ZONE:onafterTarget(Controllable,From,Event,To)',
    'AI_BAI_ZONE:onafterAbort(Controllable,From,Event,To)',
    'AI_BAI_ZONE:onafterAccomplish(Controllable,From,Event,To)',
    'AI_BAI_ZONE:onafterDestroy(Controllable,From,Event,To,EventData)',
    'AI_BAI_ZONE:OnEventDead(EventData)',
    'AI_FORMATION:New(FollowUnit,FollowGroupSet,FollowName,FollowBriefing)',
    'AI_FORMATION:SetFollowTimeInterval(dt)',
    'AI_FORMATION:TestSmokeDirectionVector(SmokeDirection)',
    'AI_FORMATION:onafterFormationLine(FollowGroupSet,From,Event,To,XStart,XSpace,YStart,YSpace,ZStart,ZSpace,Formation)',
    'AI_FORMATION:onafterFormationTrail(FollowGroupSet,From,Event,To,XStart,XSpace,YStart)',
    'AI_FORMATION:onafterFormationStack(FollowGroupSet,From,Event,To,XStart,XSpace,YStart,YSpace)',
    'AI_FORMATION:onafterFormationLeftLine(FollowGroupSet,From,Event,To,XStart,YStart,ZStart,ZSpace)',
    'AI_FORMATION:onafterFormationRightLine(FollowGroupSet,From,Event,To,XStart,YStart,ZStart,ZSpace)',
    'AI_FORMATION:onafterFormationLeftWing(FollowGroupSet,From,Event,To,XStart,XSpace,YStart,ZStart,ZSpace)',
    'AI_FORMATION:onafterFormationRightWing(FollowGroupSet,From,Event,To,XStart,XSpace,YStart,ZStart,ZSpace)',
    'AI_FORMATION:onafterFormationCenterWing(FollowGroupSet,From,Event,To,XStart,XSpace,YStart,YSpace,ZStart,ZSpace)',
    'AI_FORMATION:onafterFormationVic(FollowGroupSet,From,Event,To,XStart,XSpace,YStart,YSpace,ZStart,ZSpace)',
    'AI_FORMATION:onafterFormationBox(FollowGroupSet,From,Event,To,XStart,XSpace,YStart,YSpace,ZStart,ZSpace,ZLevels)',
    'AI_FORMATION:SetFlightRandomization(FlightRandomization)',
    'AI_FORMATION:GetFlightMode(FollowGroup)',
    'AI_FORMATION:SetFlightModeMission(FollowGroup)',
    'AI_FORMATION:SetFlightModeAttack(FollowGroup)',
    'AI_FORMATION:SetFlightModeFormation(FollowGroup)',
    'AI_FORMATION:onafterStop(FollowGroupSet,From,Event,To)',
    'AI_FORMATION:onbeforeFollow(FollowGroupSet,From,Event,To)',
    'AI_FORMATION:onenterFollowing(FollowGroupSet)',
    'AI_FORMATION:FollowMe(FollowGroup,ClientUnit,CT1,CV1,CT2,CV2)',
    'AI_ESCORT:New(EscortUnit,EscortGroupSet,EscortName,EscortBriefing)',
    'AI_ESCORT:_InitFlightMenus()',
    'AI_ESCORT:_InitEscortMenus(EscortGroup)',
    'AI_ESCORT:_InitEscortRoute(EscortGroup)',
    'AI_ESCORT:onafterStart(EscortGroupSet)',
    'EscortGroup:OnEventDeadOrCrash(EventData)',
    'AI_ESCORT:onafterStop(EscortGroupSet)',
    'AI_ESCORT:SetDetection(Detection)',
    'AI_ESCORT:TestSmokeDirectionVector(SmokeDirection)',
    'AI_ESCORT:MenusHelicopters(XStart,XSpace,YStart,YSpace,ZStart,ZSpace,ZLevels)',
    'AI_ESCORT:MenusAirplanes(XStart,XSpace,YStart,YSpace,ZStart,ZSpace,ZLevels)',
    'AI_ESCORT:SetFlightMenuFormation(Formation)',
    'AI_ESCORT:MenuFormation(Formation,...)',
    'AI_ESCORT:MenuFormationTrail(XStart,XSpace,YStart)',
    'AI_ESCORT:MenuFormationStack(XStart,XSpace,YStart,YSpace)',
    'AI_ESCORT:MenuFormationLeftLine(XStart,YStart,ZStart,ZSpace)',
    'AI_ESCORT:MenuFormationRightLine(XStart,YStart,ZStart,ZSpace)',
    'AI_ESCORT:MenuFormationLeftWing(XStart,XSpace,YStart,ZStart,ZSpace)',
    'AI_ESCORT:MenuFormationRightWing(XStart,XSpace,YStart,ZStart,ZSpace)',
    'AI_ESCORT:MenuFormationCenterWing(XStart,XSpace,YStart,YSpace,ZStart,ZSpace)',
    'AI_ESCORT:MenuFormationVic(XStart,XSpace,YStart,YSpace,ZStart,ZSpace)',
    'AI_ESCORT:MenuFormationBox(XStart,XSpace,YStart,YSpace,ZStart,ZSpace,ZLevels)',
    'AI_ESCORT:SetFlightMenuJoinUp()',
    'AI_ESCORT:SetEscortMenuJoinUp(EscortGroup)',
    'AI_ESCORT:MenuJoinUp()',
    'AI_ESCORT:SetFlightMenuHoldAtEscortPosition()',
    'AI_ESCORT:SetEscortMenuHoldAtEscortPosition(EscortGroup)',
    'AI_ESCORT:MenuHoldAtEscortPosition(Height,Speed,MenuTextFormat)',
    'AI_ESCORT:SetFlightMenuHoldAtLeaderPosition()',
    'AI_ESCORT:SetEscortMenuHoldAtLeaderPosition(EscortGroup)',
    'AI_ESCORT:MenuHoldAtLeaderPosition(Height,Speed,MenuTextFormat)',
    'AI_ESCORT:MenuScanForTargets(Height,Seconds,MenuTextFormat)',
    'AI_ESCORT:SetFlightMenuFlare()',
    'AI_ESCORT:SetEscortMenuFlare(EscortGroup)',
    'AI_ESCORT:MenuFlare(MenuTextFormat)',
    'AI_ESCORT:SetFlightMenuSmoke()',
    'AI_ESCORT:SetEscortMenuSmoke(EscortGroup)',
    'AI_ESCORT:MenuSmoke(MenuTextFormat)',
    'AI_ESCORT:SetFlightMenuReportType()',
    'AI_ESCORT:SetFlightMenuTargets()',
    'AI_ESCORT:SetEscortMenuTargets(EscortGroup)',
    'AI_ESCORT:MenuTargets(Seconds)',
    'AI_ESCORT:MenuAssistedAttack()',
    'AI_ESCORT:SetFlightMenuROE()',
    'AI_ESCORT:SetEscortMenuROE(EscortGroup)',
    'AI_ESCORT:MenuROE()',
    'AI_ESCORT:SetFlightMenuROT()',
    'AI_ESCORT:SetEscortMenuROT(EscortGroup)',
    'AI_ESCORT:MenuROT(MenuTextFormat)',
    'AI_ESCORT:SetEscortMenuResumeMission(EscortGroup)',
    'AI_ESCORT:_HoldPosition(OrbitGroup,EscortGroup,OrbitHeight,OrbitSeconds)',
    'AI_ESCORT:_FlightHoldPosition(OrbitGroup,OrbitHeight,OrbitSeconds)',
    'AI_ESCORT:_JoinUp(EscortGroup)',
    'AI_ESCORT:_FlightJoinUp()',
    'AI_ESCORT:_EscortFormationTrail(EscortGroup,XStart,XSpace,YStart)',
    'AI_ESCORT:_FlightFormationTrail(XStart,XSpace,YStart)',
    'AI_ESCORT:_EscortFormationStack(EscortGroup,XStart,XSpace,YStart,YSpace)',
    'AI_ESCORT:_FlightFormationStack(XStart,XSpace,YStart,YSpace)',
    'AI_ESCORT:_Flare(EscortGroup,Color,Message)',
    'AI_ESCORT:_FlightFlare(Color,Message)',
    'AI_ESCORT:_Smoke(EscortGroup,Color,Message)',
    'AI_ESCORT:_FlightSmoke(Color,Message)',
    'AI_ESCORT:_ReportNearbyTargetsNow(EscortGroup)',
    'AI_ESCORT:_FlightReportNearbyTargetsNow()',
    'AI_ESCORT:_FlightSwitchReportNearbyTargets(ReportTargets)',
    'AI_ESCORT:SetFlightReportType(ReportType)',
    'AI_ESCORT:GetFlightReportType()',
    'AI_ESCORT:_FlightSwitchReportTypeAll()',
    'AI_ESCORT:_FlightSwitchReportTypeAirborne()',
    'AI_ESCORT:_FlightSwitchReportTypeGroundRadar()',
    'AI_ESCORT:_FlightSwitchReportTypeGround()',
    'AI_ESCORT:_ScanTargets(ScanDuration)',
    'AI_ESCORT.___Resume(EscortGroup,self)',
    'AI_ESCORT:_ResumeMission(EscortGroup,WayPoint)',
    'AI_ESCORT:_AttackTarget(EscortGroup,DetectedItem)',
    'AI_ESCORT:_FlightAttackTarget(DetectedItem)',
    'AI_ESCORT:_FlightAttackNearestTarget(TargetType)',
    'AI_ESCORT:_AssistTarget(EscortGroup,DetectedItem)',
    'AI_ESCORT:_ROE(EscortGroup,EscortROEFunction,EscortROEMessage)',
    'AI_ESCORT:_FlightROEHoldFire(EscortROEMessage)',
    'AI_ESCORT:_FlightROEOpenFire(EscortROEMessage)',
    'AI_ESCORT:_FlightROEReturnFire(EscortROEMessage)',
    'AI_ESCORT:_FlightROEWeaponFree(EscortROEMessage)',
    'AI_ESCORT:_ROT(EscortGroup,EscortROTFunction,EscortROTMessage)',
    'AI_ESCORT:_FlightROTNoReaction(EscortROTMessage)',
    'AI_ESCORT:_FlightROTPassiveDefense(EscortROTMessage)',
    'AI_ESCORT:_FlightROTEvadeFire(EscortROTMessage)',
    'AI_ESCORT:_FlightROTVertical(EscortROTMessage)',
    'AI_ESCORT:RegisterRoute()',
    'AI_ESCORT:_ResumeScheduler(EscortGroup)',
    'AI_ESCORT:Distance(PlayerUnit,DetectedItem)',
    'AI_ESCORT:_ReportTargetsScheduler(EscortGroup,Report)',
    'AI_ESCORT:_FlightReportTargetsScheduler()',
    'AI_ESCORT_REQUEST:New(EscortUnit,EscortSpawn,EscortAirbase,EscortName,EscortBriefing)',
    'AI_ESCORT_REQUEST:SpawnEscort()',
    'EscortGroup:OnEventDeadOrCrash(EventData)',
    'AI_ESCORT_REQUEST:onafterStart(EscortGroupSet)',
    'AI_ESCORT_REQUEST:onafterStop(EscortGroupSet)',
    'AI_ESCORT_REQUEST:SetEscortSpawnMission()',
    'AI_ESCORT_DISPATCHER:New(CarrierSet,EscortSpawn,EscortAirbase,EscortName,EscortBriefing)',
    'AI_ESCORT_DISPATCHER:onafterStart(From,Event,To)',
    'AI_ESCORT_DISPATCHER:OnEventExit(EventData)',
    'AI_ESCORT_DISPATCHER:OnEventBirth(EventData)',
    'AI_ESCORT_DISPATCHER_REQUEST:New(CarrierSet,EscortSpawn,EscortAirbase,EscortName,EscortBriefing)',
    'AI_ESCORT_DISPATCHER_REQUEST:onafterStart(From,Event,To)',
    'AI_ESCORT_DISPATCHER_REQUEST:OnEventExit(EventData)',
    'AI_ESCORT_DISPATCHER_REQUEST:OnEventBirth(EventData)',
    'AI_CARGO:New(Carrier,CargoSet)',
    'AI_CARGO:IsTransporting()',
    'AI_CARGO:IsRelocating()',
    'AI_CARGO:onafterPickup(APC,From,Event,To,Coordinate,Speed,Height,PickupZone)',
    'AI_CARGO:onafterDeploy(APC,From,Event,To,Coordinate,Speed,Height,DeployZone)',
    'AI_CARGO:onbeforeLoad(Carrier,From,Event,To,PickupZone)',
    'AI_CARGO:onbeforeReload(Carrier,From,Event,To)',
    'AI_CARGO:onafterBoard(Carrier,From,Event,To,Cargo,CarrierUnit,PickupZone)',
    'AI_CARGO:onafterLoaded(Carrier,From,Event,To,Cargo,PickupZone)',
    'AI_CARGO:onafterPickedUp(Carrier,From,Event,To,PickupZone)',
    'AI_CARGO:onafterUnload(Carrier,From,Event,To,DeployZone,Defend)',
    'AI_CARGO:onafterUnboard(Carrier,From,Event,To,Cargo,CarrierUnit,DeployZone,Defend)',
    'AI_CARGO:onafterUnloaded(Carrier,From,Event,To,Cargo,CarrierUnit,DeployZone,Defend)',
    'AI_CARGO:onafterDeployed(Carrier,From,Event,To,DeployZone,Defend)',
    'AI_CARGO_APC:New(APC,CargoSet,CombatRadius)',
    'AI_CARGO_APC:SetCarrier(CargoCarrier)',
    'CargoCarrier:OnEventDead(EventData)',
    'AI_CARGO_APC:SetOffRoad(Offroad,Formation)',
    'AI_CARGO_APC:SetPickupOffRoad(Offroad,Formation)',
    'AI_CARGO_APC:SetDeployOffRoad(Offroad,Formation)',
    'AI_CARGO_APC:FindCarrier(Coordinate,Radius)',
    'AI_CARGO_APC:SetCombatRadius(CombatRadius)',
    'AI_CARGO_APC:FollowToCarrier(Me,APCUnit,CargoGroup)',
    'AI_CARGO_APC:onafterMonitor(APC,From,Event,To)',
    'AI_CARGO_APC:onafterFollow(APC,From,Event,To)',
    'AI_CARGO_APC._Pickup(APC,self,Coordinate,Speed,PickupZone)',
    'AI_CARGO_APC._Deploy(APC,self,Coordinate,DeployZone)',
    'AI_CARGO_APC:onafterPickup(APC,From,Event,To,Coordinate,Speed,Height,PickupZone)',
    'AI_CARGO_APC:onafterDeploy(APC,From,Event,To,Coordinate,Speed,Height,DeployZone)',
    'AI_CARGO_APC:onafterUnloaded(Carrier,From,Event,To,Cargo,CarrierUnit,DeployZone,Defend)',
    'AI_CARGO_APC:onafterDeployed(APC,From,Event,To,DeployZone,Defend)',
    'AI_CARGO_APC:onafterHome(APC,From,Event,To,Coordinate,Speed,Height,HomeZone)',
    'AI_CARGO_HELICOPTER:New(Helicopter,CargoSet)',
    'AI_CARGO_HELICOPTER:SetCarrier(Helicopter)',
    'Helicopter:OnEventDead(EventData)',
    'Helicopter:OnEventLand(EventData)',
    'AI_CARGO_HELICOPTER:SetLandingSpeedAndHeight(speed,height)',
    'AI_CARGO_HELICOPTER:onafterLanded(Helicopter,From,Event,To)',
    'AI_CARGO_HELICOPTER:onafterQueue(Helicopter,From,Event,To,Coordinate,Speed,DeployZone)',
    'AI_CARGO_HELICOPTER:onafterOrbit(Helicopter,From,Event,To,Coordinate)',
    'AI_CARGO_HELICOPTER:onafterDeployed(Helicopter,From,Event,To,DeployZone)',
    'AI_CARGO_HELICOPTER:onafterPickup(Helicopter,From,Event,To,Coordinate,Speed,Height,PickupZone)',
    'AI_CARGO_HELICOPTER:_Deploy(AICargoHelicopter,Coordinate,DeployZone)',
    'AI_CARGO_HELICOPTER:onafterDeploy(Helicopter,From,Event,To,Coordinate,Speed,Height,DeployZone)',
    'AI_CARGO_HELICOPTER:onafterHome(Helicopter,From,Event,To,Coordinate,Speed,Height,HomeZone)',
    'AI_CARGO_AIRPLANE:New(Airplane,CargoSet)',
    'AI_CARGO_AIRPLANE:SetCarrier(Airplane)',
    'Airplane:OnEventDead(EventData)',
    'Airplane:OnEventHit(EventData)',
    'Airplane:OnEventEngineShutdown(EventData)',
    'AI_CARGO_AIRPLANE:FindCarrier(Coordinate,Radius)',
    'AI_CARGO_AIRPLANE:onafterLanded(Airplane,From,Event,To)',
    'AI_CARGO_AIRPLANE:onafterPickup(Airplane,From,Event,To,Coordinate,Speed,Height,PickupZone)',
    'AI_CARGO_AIRPLANE:onafterDeploy(Airplane,From,Event,To,Coordinate,Speed,Height,DeployZone)',
    'AI_CARGO_AIRPLANE:onafterUnload(Airplane,From,Event,To,DeployZone)',
    'AI_CARGO_AIRPLANE:Route(Airplane,Airbase,Speed,Height,Uncontrolled)',
    'AI_CARGO_AIRPLANE:onafterHome(Airplane,From,Event,To,Coordinate,Speed,Height,HomeZone)',
    'AI_CARGO_SHIP:New(Ship,CargoSet,CombatRadius,ShippingLane)',
    'AI_CARGO_SHIP:SetCarrier(CargoCarrier)',
    'CargoCarrier:OnEventDead(EventData)',
    'AI_CARGO_SHIP:FindCarrier(Coordinate,Radius)',
    'AI_CARGO_SHIP:SetShippingLane(ShippingLane)',
    'AI_CARGO_SHIP:SetCombatRadius(CombatRadius)',
    'AI_CARGO_SHIP:FollowToCarrier(Me,ShipUnit,CargoGroup)',
    'AI_CARGO_SHIP:onafterMonitor(Ship,From,Event,To)',
    'AI_CARGO_SHIP._Pickup(Ship,self,Coordinate,Speed,PickupZone)',
    'AI_CARGO_SHIP._Deploy(Ship,self,Coordinate,DeployZone)',
    'AI_CARGO_SHIP:onafterPickup(Ship,From,Event,To,Coordinate,Speed,Height,PickupZone)',
    'AI_CARGO_SHIP:onafterDeploy(Ship,From,Event,To,Coordinate,Speed,Height,DeployZone)',
    'AI_CARGO_SHIP:onafterUnload(Ship,From,Event,To,DeployZone,Defend)',
    'AI_CARGO_SHIP:onafterHome(Ship,From,Event,To,Coordinate,Speed,Height,HomeZone)',
    'AI_CARGO_DISPATCHER:New(CarrierSet,CargoSet,PickupZoneSet,DeployZoneSet)',
    'AI_CARGO_DISPATCHER:SetMonitorTimeInterval(MonitorTimeInterval)',
    'AI_CARGO_DISPATCHER:SetHomeZone(HomeZone)',
    'AI_CARGO_DISPATCHER:SetPickupRadius(OuterRadius,InnerRadius)',
    'AI_CARGO_DISPATCHER:SetPickupSpeed(MaxSpeed,MinSpeed)',
    'AI_CARGO_DISPATCHER:SetDeployRadius(OuterRadius,InnerRadius)',
    'AI_CARGO_DISPATCHER:SetDeploySpeed(MaxSpeed,MinSpeed)',
    'AI_CARGO_DISPATCHER:SetPickupHeight(MaxHeight,MinHeight)',
    'AI_CARGO_DISPATCHER:SetDeployHeight(MaxHeight,MinHeight)',
    'AI_CARGO_DISPATCHER:onafterMonitor()',
    'AI_Cargo.OnAfterPickup(AI_Cargo,CarrierGroup,From,Event,To,Coordinate,Speed,Height,PickupZone)',
    'AI_Cargo.OnAfterLoad(AI_Cargo,CarrierGroup,From,Event,To,PickupZone)',
    'AI_Cargo.OnAfterBoard(AI_Cargo,CarrierGroup,From,Event,To,Cargo,CarrierUnit,PickupZone)',
    'AI_Cargo.OnAfterLoaded(AI_Cargo,CarrierGroup,From,Event,To,Cargo,CarrierUnit,PickupZone)',
    'AI_Cargo.OnAfterPickedUp(AI_Cargo,CarrierGroup,From,Event,To,PickupZone)',
    'AI_Cargo.OnAfterDeploy(AI_Cargo,CarrierGroup,From,Event,To,Coordinate,Speed,Height,DeployZone)',
    'AI_Cargo.OnAfterUnload(AI_Cargo,Carrier,From,Event,To,Cargo,CarrierUnit,DeployZone)',
    'AI_Cargo.OnAfterUnboard(AI_Cargo,CarrierGroup,From,Event,To,Cargo,CarrierUnit,DeployZone)',
    'AI_Cargo.OnAfterUnloaded(AI_Cargo,Carrier,From,Event,To,Cargo,CarrierUnit,DeployZone)',
    'AI_Cargo.OnAfterDeployed(AI_Cargo,Carrier,From,Event,To,DeployZone)',
    'AI_Cargo.OnAfterHome(AI_Cargo,Carrier,From,Event,To,Coordinate,Speed,Height,HomeZone)',
    'AI_CARGO_DISPATCHER:onafterStart(From,Event,To)',
    'AI_CARGO_DISPATCHER:onafterTransport(From,Event,To,Carrier,Cargo)',
    'AI_CARGO_DISPATCHER_APC:New(APCSet,CargoSet,PickupZoneSet,DeployZoneSet,CombatRadius)',
    'AI_CARGO_DISPATCHER_APC:AICargo(APC,CargoSet)',
    'AI_CARGO_DISPATCHER_APC:SetCombatRadius(CombatRadius)',
    'AI_CARGO_DISPATCHER_APC:SetOffRoad(Offroad,Formation)',
    'AI_CARGO_DISPATCHER_APC:SetPickupOffRoad(Offroad,Formation)',
    'AI_CARGO_DISPATCHER_APC:SetDeployOffRoad(Offroad,Formation)',
    'AI_CARGO_DISPATCHER_HELICOPTER:New(HelicopterSet,CargoSet,PickupZoneSet,DeployZoneSet)',
    'AI_CARGO_DISPATCHER_HELICOPTER:AICargo(Helicopter,CargoSet)',
    'AI_CARGO_DISPATCHER_AIRPLANE:New(AirplaneSet,CargoSet,PickupZoneSet,DeployZoneSet)',
    'AI_CARGO_DISPATCHER_AIRPLANE:AICargo(Airplane,CargoSet)',
    'AI_CARGO_DISPATCHER_SHIP:New(ShipSet,CargoSet,PickupZoneSet,DeployZoneSet,ShippingLane)',
    'AI_CARGO_DISPATCHER_SHIP:SetShippingLane(ShippingLane)',
    'AI_CARGO_DISPATCHER_SHIP:AICargo(Ship,CargoSet)',
    'ACT_ASSIGN:New()',
    'ACT_ASSIGN_ACCEPT:New(TaskBriefing)',
    'ACT_ASSIGN_ACCEPT:Init(FsmAssign)',
    'ACT_ASSIGN_ACCEPT:onafterStart(ProcessUnit,Task,From,Event,To)',
    'ACT_ASSIGN_ACCEPT:onenterAssigned(ProcessUnit,Task,From,Event,To,TaskGroup)',
    'ACT_ASSIGN_MENU_ACCEPT:New(TaskBriefing)',
    'ACT_ASSIGN_MENU_ACCEPT:Init(TaskBriefing)',
    'ACT_ASSIGN_MENU_ACCEPT:onafterStart(ProcessUnit,Task,From,Event,To)',
    'ACT_ASSIGN_MENU_ACCEPT:MenuAssign(TaskGroup)',
    'ACT_ASSIGN_MENU_ACCEPT:MenuReject(TaskGroup)',
    'ACT_ASSIGN_MENU_ACCEPT:onafterAssign(ProcessUnit,Task,From,Event,To,TaskGroup)',
    'ACT_ASSIGN_MENU_ACCEPT:onafterReject(ProcessUnit,Task,From,Event,To,TaskGroup)',
    'ACT_ASSIGN_MENU_ACCEPT:onenterAssigned(ProcessUnit,Task,From,Event,To,TaskGroup)',
    'ACT_ROUTE:New()',
    'ACT_ROUTE:SetMenuCancel(MenuGroup,MenuText,ParentMenu,MenuTime,MenuTag)',
    'ACT_ROUTE:SetRouteMode(RouteMode)',
    'ACT_ROUTE:GetRouteText(Controllable)',
    'ACT_ROUTE:MenuCancel()',
    'ACT_ROUTE:onafterStart(ProcessUnit,From,Event,To)',
    'ACT_ROUTE:onfuncHasArrived(ProcessUnit)',
    'ACT_ROUTE:onbeforeRoute(ProcessUnit,From,Event,To)',
    'ACT_ROUTE_POINT:New(Coordinate,Range)',
    'ACT_ROUTE_POINT:Init(FsmRoute)',
    'ACT_ROUTE_POINT:SetCoordinate(Coordinate)',
    'ACT_ROUTE_POINT:GetCoordinate()',
    'ACT_ROUTE_POINT:SetRange(Range)',
    'ACT_ROUTE_POINT:GetRange()',
    'ACT_ROUTE_POINT:onfuncHasArrived(ProcessUnit)',
    'ACT_ROUTE_POINT:onafterReport(ProcessUnit,From,Event,To)',
    'ACT_ROUTE_ZONE:New(Zone)',
    'ACT_ROUTE_ZONE:Init(FsmRoute)',
    'ACT_ROUTE_ZONE:SetZone(Zone,Altitude,Heading)',
    'ACT_ROUTE_ZONE:GetZone()',
    'ACT_ROUTE_ZONE:onfuncHasArrived(ProcessUnit)',
    'ACT_ROUTE_ZONE:onafterReport(ProcessUnit,From,Event,To)',
    'ACT_ACCOUNT:New()',
    'ACT_ACCOUNT:onafterStart(ProcessUnit,From,Event,To)',
    'ACT_ACCOUNT:onenterWaiting(ProcessUnit,From,Event,To)',
    'ACT_ACCOUNT:onafterEvent(ProcessUnit,From,Event,To,Event)',
    'ACT_ACCOUNT_DEADS:New()',
    'ACT_ACCOUNT_DEADS:Init(FsmAccount)',
    'ACT_ACCOUNT_DEADS:onenterReport(ProcessUnit,Task,From,Event,To)',
    'ACT_ACCOUNT_DEADS:onafterEvent(ProcessUnit,Task,From,Event,To,EventData)',
    'ACT_ACCOUNT_DEADS:onenterAccountForPlayer(ProcessUnit,Task,From,Event,To,EventData)',
    'ACT_ACCOUNT_DEADS:onenterAccountForOther(ProcessUnit,Task,From,Event,To,EventData)',
    'ACT_ACCOUNT_DEADS:OnEventHit(EventData)',
    'ACT_ACCOUNT_DEADS:onfuncEventDead(EventData)',
    'ACT_ACCOUNT_DEADS:onfuncEventCrash(EventData)',
    'ACT_ASSIST:New()',
    'ACT_ASSIST:onafterStart(ProcessUnit,From,Event,To)',
    'ACT_ASSIST:onafterStop(ProcessUnit,From,Event,To)',
    'ACT_ASSIST_SMOKE_TARGETS_ZONE:New(TargetSetUnit,TargetZone)',
    'ACT_ASSIST_SMOKE_TARGETS_ZONE:Init(FsmSmoke)',
    'ACT_ASSIST_SMOKE_TARGETS_ZONE:Init(TargetSetUnit,TargetZone)',
    'ACT_ASSIST_SMOKE_TARGETS_ZONE:onenterSmoking(ProcessUnit,From,Event,To)',
    'USERSOUND:New(UserSoundFileName)',
    'USERSOUND:SetFileName(UserSoundFileName)',
    'USERSOUND:ToAll()',
    'USERSOUND:ToCoalition(Coalition)',
    'USERSOUND:ToCountry(Country)',
    'USERSOUND:ToGroup(Group,Delay)',
    'USERSOUND:ToUnit(Unit,Delay)',
    'USERSOUND:ToClient(Client,Delay)',
    'SOUNDBASE:New()',
    'SOUNDBASE:GetSpeechTime(length,speed,isGoogle)',
    'SOUNDFILE:New(FileName,Path,Duration,UseSrs)',
    'SOUNDFILE:SetPath(Path)',
    'SOUNDFILE:GetPath()',
    'SOUNDFILE:SetFileName(FileName)',
    'SOUNDFILE:GetFileName()',
    'SOUNDFILE:SetDuration(Duration)',
    'SOUNDFILE:GetDuration()',
    'SOUNDFILE:GetName()',
    'SOUNDFILE:SetPlayWithSRS(Switch)',
    'SOUNDTEXT:New(Text,Duration)',
    'SOUNDTEXT:SetText(Text)',
    'SOUNDTEXT:SetDuration(Duration)',
    'SOUNDTEXT:SetGender(Gender)',
    'SOUNDTEXT:SetCulture(Culture)',
    'SOUNDTEXT:SetVoice(VoiceName)',
    'RADIO:New(Positionable)',
    'RADIO:SetAlias(alias)',
    'RADIO:GetAlias()',
    'RADIO:SetFileName(FileName)',
    'RADIO:SetFrequency(Frequency)',
    'RADIO:SetModulation(Modulation)',
    'RADIO:SetPower(Power)',
    'RADIO:SetLoop(Loop)',
    'RADIO:SetSubtitle(Subtitle,SubtitleDuration)',
    'RADIO:NewGenericTransmission(FileName,Frequency,Modulation,Power,Loop)',
    'RADIO:NewUnitTransmission(FileName,Subtitle,SubtitleDuration,Frequency,Modulation,Loop)',
    'RADIO:Broadcast(viatrigger)',
    'RADIO:StopBroadcast()',
    'RADIOQUEUE:New(frequency,modulation,alias)',
    'RADIOQUEUE:Start(delay,dt)',
    'RADIOQUEUE:Stop()',
    'RADIOQUEUE:SetSenderCoordinate(coordinate)',
    'RADIOQUEUE:SetSenderUnitName(name)',
    'RADIOQUEUE:SetRadioPower(power)',
    'RADIOQUEUE:SetSRS(PathToSRS,Port)',
    'RADIOQUEUE:SetDigit(digit,filename,duration,path,subtitle,subduration)',
    'RADIOQUEUE:AddTransmission(transmission)',
    'RADIOQUEUE:NewTransmission(filename,duration,path,tstart,interval,subtitle,subduration)',
    'RADIOQUEUE:AddSoundFile(soundfile,tstart,interval)',
    'RADIOQUEUE:AddSoundText(soundtext,tstart,interval)',
    'RADIOQUEUE:Number2Transmission(number,delay,interval)',
    'RADIOQUEUE:Broadcast(transmission)',
    'RADIOQUEUE:_BroadcastSRS(transmission)',
    'RADIOQUEUE:_CheckRadioQueueDelayed(delay)',
    'RADIOQUEUE:_CheckRadioQueue()',
    'RADIOQUEUE:_GetRadioSender()',
    'RADIOQUEUE:_GetRadioSenderCoord()',
    'RADIOSPEECH:New(frequency,modulation)',
    'RADIOSPEECH:SetLanguage(Langauge)',
    'RADIOSPEECH:AddSentenceToSpeech(RemainingSentence,Speech,Sentence,Data)',
    'RADIOSPEECH:BuildTree()',
    'RADIOSPEECH:SpeakWords(Sentence,Speech,Language)',
    'RADIOSPEECH:SpeakDigits(Sentence,Speech,Langauge)',
    'RADIOSPEECH:Speak(Sentence,Language)',
    'MSRS.uuid()',
    'MSRS:New(Path,Frequency,Modulation,Backend)',
    'MSRS:SetBackend(Backend)',
    'MSRS:SetBackendGRPC()',
    'MSRS:SetBackendSRSEXE(Backend)',
    'MSRS.SetDefaultBackend(Backend)',
    'MSRS.SetDefaultBackendGRPC()',
    'MSRS:GetBackend()',
    'MSRS:SetPath(Path)',
    'MSRS:GetPath()',
    'MSRS:SetVolume(Volume)',
    'MSRS:GetVolume()',
    'MSRS:SetLabel(Label)',
    'MSRS:GetLabel()',
    'MSRS:SetPort(Port)',
    'MSRS:GetPort()',
    'MSRS:SetCoalition(Coalition)',
    'MSRS:GetCoalition()',
    'MSRS:SetFrequencies(Frequencies)',
    'MSRS:AddFrequencies(Frequencies)',
    'MSRS:GetFrequencies()',
    'MSRS:SetModulations(Modulations)',
    'MSRS:AddModulations(Modulations)',
    'MSRS:GetModulations()',
    'MSRS:SetGender(Gender)',
    'MSRS:SetCulture(Culture)',
    'MSRS:SetVoice(Voice)',
    'MSRS:SetVoiceProvider(Voice,Provider)',
    'MSRS:SetVoiceWindows(Voice)',
    'MSRS:SetVoiceGoogle(Voice)',
    'MSRS:SetVoiceAzure(Voice)',
    'MSRS:SetVoiceAmazon(Voice)',
    'MSRS:GetVoice(Provider)',
    'MSRS:SetCoordinate(Coordinate)',
    'MSRS:SetGoogle(PathToCredentials)',
    'MSRS:SetGoogleAPIKey(APIKey)',
    'MSRS:SetProvider(Provider)',
    'MSRS:GetProvider()',
    'MSRS:SetProviderOptions(Provider,CredentialsFile,AccessKey,SecretKey,Region)',
    'MSRS._CreateProviderOptions(Provider,CredentialsFile,AccessKey,SecretKey,Region)',
    'MSRS:SetProviderOptionsGoogle(CredentialsFile,AccessKey)',
    'MSRS:SetProviderOptionsAmazon(AccessKey,SecretKey,Region)',
    'MSRS:SetProviderOptionsAzure(AccessKey,Region)',
    'MSRS:GetProviderOptions(Provider)',
    'MSRS:SetTTSProviderGoogle()',
    'MSRS:SetTTSProviderMicrosoft()',
    'MSRS:SetTTSProviderAzure()',
    'MSRS:SetTTSProviderAmazon()',
    'MSRS:Help()',
    'MSRS:PlaySoundFile(Soundfile,Delay)',
    'MSRS:PlaySoundText(SoundText,Delay)',
    'MSRS:PlayText(Text,Delay,Coordinate)',
    'MSRS:PlayTextExt(Text,Delay,Frequencies,Modulations,Gender,Culture,Voice,Volume,Label,Coordinate)',
    'MSRS:PlayTextFile(TextFile,Delay)',
    'MSRS:_GetLatLongAlt(Coordinate)',
    'MSRS:_GetCommand(freqs,modus,coal,gender,voice,culture,volume,speed,port,label,coordinate)',
    'MSRS:_ExecCommand(command)',
    'MSRS:_DCSgRPCtts(Text,Frequencies,Gender,Culture,Voice,Volume,Label,Coordinate)',
    'MSRS:LoadConfigFile(Path,Filename)',
    'MSRS.getSpeechTime(length,speed,isGoogle)',
    'MSRSQUEUE:New(alias)',
    'MSRSQUEUE:Clear()',
    'MSRSQUEUE:AddTransmission(transmission)',
    'MSRSQUEUE:SetTransmitOnlyWithPlayers(Switch)',
    'MSRSQUEUE:NewTransmission(text,duration,msrs,tstart,interval,subgroups,subtitle,subduration,frequency,modulation,gender,culture,voice,volume,label,coordinate)',
    'MSRSQUEUE:Broadcast(transmission)',
    'MSRSQUEUE:CalcTransmisstionDuration()',
    'MSRSQUEUE:_CheckRadioQueue(delay)',
    'COMMANDCENTER:New(CommandCenterPositionable,CommandCenterName)',
    'COMMANDCENTER:GetName()',
    'COMMANDCENTER:GetText()',
    'COMMANDCENTER:GetShortText()',
    'COMMANDCENTER:GetCoalition()',
    'COMMANDCENTER:GetPositionable()',
    'COMMANDCENTER:GetMissions()',
    'COMMANDCENTER:AddMission(Mission)',
    'COMMANDCENTER:RemoveMission(Mission)',
    'COMMANDCENTER:SetReferenceZones(ReferenceZonePrefix)',
    'COMMANDCENTER:SetModeWWII()',
    'COMMANDCENTER:IsModeWWII()',
    'COMMANDCENTER:SetMenu()',
    'COMMANDCENTER:GetMenu(TaskGroup)',
    'COMMANDCENTER:AssignTask(TaskGroup)',
    'COMMANDCENTER:SetCommandMenu()',
    'COMMANDCENTER:SetAutoAssignTasks(AutoAssign)',
    'COMMANDCENTER:SetAutoAcceptTasks(AutoAccept)',
    'COMMANDCENTER:SetAutoAssignMethod(AutoAssignMethod)',
    'COMMANDCENTER:AssignTasks()',
    'COMMANDCENTER:AddGroups()',
    'COMMANDCENTER:IsGroupAssigned(TaskGroup)',
    'COMMANDCENTER:HasGroup(MissionGroup)',
    'COMMANDCENTER:MessageToAll(Message)',
    'COMMANDCENTER:MessageToGroup(Message,MessageGroup)',
    'COMMANDCENTER:MessageTypeToGroup(Message,MessageGroup,MessageType)',
    'COMMANDCENTER:MessageToCoalition(Message)',
    'COMMANDCENTER:MessageTypeToCoalition(Message,MessageType)',
    'COMMANDCENTER:ReportSummary(ReportGroup)',
    'COMMANDCENTER:ReportMissionsPlayers(ReportGroup)',
    'COMMANDCENTER:ReportDetails(ReportGroup,Task)',
    'COMMANDCENTER:SetFlashStatus(Flash)',
    'COMMANDCENTER:SetMessageDuration(seconds)',
    'MISSION:New(CommandCenter,MissionName,MissionPriority,MissionBriefing,MissionCoalition)',
    'MISSION:onenterCOMPLETED(From,Event,To)',
    'MISSION:GetName()',
    'MISSION:GetText()',
    'MISSION:GetShortText()',
    'MISSION:JoinUnit(PlayerUnit,PlayerGroup)',
    'MISSION:AbortUnit(PlayerUnit)',
    'MISSION:CrashUnit(PlayerUnit)',
    'MISSION:AddScoring(Scoring)',
    'MISSION:GetScoring()',
    'MISSION:GetGroups()',
    'MISSION:AddGroups(GroupSet)',
    'MISSION:SetMenu(MenuTime)',
    'MISSION:RemoveMenu(MenuTime)',
    'MISSION:IsGroupAssigned(MissionGroup)',
    'MISSION:SetGroupAssigned(MissionGroup)',
    'MISSION:ClearGroupAssignment(MissionGroup)',
    'MISSION:GetCommandCenter()',
    'MISSION:RemoveTaskMenu(Task)',
    'MISSION:GetRootMenu(TaskGroup)',
    'MISSION:GetMenu(TaskGroup)',
    'MISSION:GetTask(TaskName)',
    'MISSION:GetNextTaskID(Task)',
    'MISSION:AddTask(Task)',
    'MISSION:RemoveTask(Task)',
    'MISSION:IsCOMPLETED()',
    'MISSION:IsIDLE()',
    'MISSION:IsENGAGED()',
    'MISSION:IsFAILED()',
    'MISSION:IsHOLD()',
    'MISSION:HasGroup(TaskGroup)',
    'MISSION:GetTasksRemaining()',
    'MISSION:GetTaskTypes()',
    'MISSION:AddPlayerName(PlayerName)',
    'MISSION:GetPlayerNames()',
    'MISSION:ReportBriefing()',
    'MISSION:ReportPlayersPerTask(ReportGroup)',
    'MISSION:ReportPlayersProgress(ReportGroup)',
    'MISSION:MarkTargetLocations(ReportGroup)',
    'MISSION:ReportSummary(ReportGroup)',
    'MISSION:ReportOverview(ReportGroup,TaskStatus)',
    'MISSION:ReportDetails(ReportGroup)',
    'MISSION:GetTasks()',
    'MISSION:GetGroupTasks(TaskGroup)',
    'MISSION:MenuReportBriefing(ReportGroup)',
    'MISSION:MenuMarkTargetLocations(ReportGroup)',
    'MISSION:MenuReportTasksSummary(ReportGroup)',
    'MISSION:MenuReportTasksPerStatus(ReportGroup,TaskStatus)',
    'MISSION:MenuReportPlayersPerTask(ReportGroup)',
    'MISSION:MenuReportPlayersProgress(ReportGroup)',
    'TASK:New(Mission,SetGroupAssign,TaskName,TaskType,TaskBriefing)',
    'TASK:GetUnitProcess(TaskUnit)',
    'TASK:SetUnitProcess(FsmTemplate)',
    'TASK:JoinUnit(PlayerUnit,PlayerGroup)',
    'TASK:RejectGroup(PlayerGroup)',
    'TASK:AbortGroup(PlayerGroup)',
    'TASK:CrashGroup(PlayerGroup)',
    'TASK:GetMission()',
    'TASK:GetGroups()',
    'TASK:AddGroups(GroupSet)',
    'TASK:IsGroupAssigned(TaskGroup)',
    'TASK:SetGroupAssigned(TaskGroup)',
    'TASK:ClearGroupAssignment(TaskGroup)',
    'TASK:SetAssignMethod(AcceptClass)',
    'TASK:AssignToGroup(TaskGroup)',
    'TASK:UnAssignFromGroup(TaskGroup)',
    'TASK:HasGroup(FindGroup)',
    'TASK:AssignToUnit(TaskUnit)',
    'TASK:UnAssignFromUnit(TaskUnit)',
    'TASK:SetTimeOut(Timer)',
    'TASK:MessageToGroups(Message)',
    'TASK:SendBriefingToAssignedGroups()',
    'TASK:UnAssignFromGroups()',
    'TASK:HasAliveUnits()',
    'TASK:SetMenu(MenuTime)',
    'TASK:SetMenuForGroup(TaskGroup,MenuTime)',
    'TASK:SetPlannedMenuForGroup(TaskGroup,MenuTime)',
    'TASK:SetAssignedMenuForGroup(TaskGroup,MenuTime)',
    'TASK:RemoveMenu(MenuTime)',
    'TASK:RefreshMenus(TaskGroup,MenuTime)',
    'TASK:RemoveAssignedMenuForGroup(TaskGroup)',
    'TASK:MenuAssignToGroup(TaskGroup)',
    'TASK:MenuMarkToGroup(TaskGroup)',
    'TASK:MenuTaskStatus(TaskGroup)',
    'TASK:MenuFlashTaskStatus(TaskGroup,Flash)',
    'TASK:MenuTaskAbort(TaskGroup)',
    'TASK:GetTaskName()',
    'TASK:GetTaskBriefing()',
    'TASK:GetProcessTemplate(ProcessName)',
    'TASK:FailProcesses(TaskUnitName)',
    'TASK:SetStateMachine(TaskUnit,Fsm)',
    'TASK:GetStateMachine(TaskUnit)',
    'TASK:RemoveStateMachine(TaskUnit)',
    'TASK:HasStateMachine(TaskUnit)',
    'TASK:GetScoring()',
    'TASK:GetTaskIndex()',
    'TASK:SetName(TaskName)',
    'TASK:GetName()',
    'TASK:SetType(TaskType)',
    'TASK:GetType()',
    'TASK:SetID(TaskID)',
    'TASK:GetID()',
    'TASK:StateSuccess()',
    'TASK:IsStateSuccess()',
    'TASK:StateFailed()',
    'TASK:IsStateFailed()',
    'TASK:StatePlanned()',
    'TASK:IsStatePlanned()',
    'TASK:StateAborted()',
    'TASK:IsStateAborted()',
    'TASK:StateCancelled()',
    'TASK:IsStateCancelled()',
    'TASK:StateAssigned()',
    'TASK:IsStateAssigned()',
    'TASK:StateHold()',
    'TASK:IsStateHold()',
    'TASK:StateReplanned()',
    'TASK:IsStateReplanned()',
    'TASK:GetStateString()',
    'TASK:SetBriefing(TaskBriefing)',
    'TASK:GetBriefing()',
    'TASK:onenterAssigned(From,Event,To,PlayerUnit,PlayerName)',
    'TASK:onenterSuccess(From,Event,To)',
    'TASK:onenterAborted(From,Event,To)',
    'TASK:onenterCancelled(From,Event,To)',
    'TASK:onafterReplan(From,Event,To)',
    'TASK:onenterFailed(From,Event,To)',
    'TASK:onstatechange(From,Event,To)',
    'TASK:onenterPlanned(From,Event,To)',
    'TASK:onbeforeTimeOut(From,Event,To)',
    'TASK:SetGoal(Goal)',
    'TASK:GetGoal()',
    'TASK:SetDispatcher(Dispatcher)',
    'TASK:SetDetection(Detection,DetectedItem)',
    'TASK:ReportSummary(ReportGroup)',
    'TASK:ReportOverview(ReportGroup)',
    'TASK:GetPlayerCount()',
    'TASK:GetPlayerNames()',
    'TASK:ReportDetails(ReportGroup)',
    'TASK:AddProgress(PlayerName,ProgressText,ProgressTime,ProgressPoints)',
    'TASK:GetPlayerProgress(PlayerName)',
    'TASK:SetScoreOnProgress(PlayerName,Score,TaskUnit)',
    'TASK:SetScoreOnSuccess(PlayerName,Score,TaskUnit)',
    'TASK:SetScoreOnFail(PlayerName,Penalty,TaskUnit)',
    'TASK:InitTaskControlMenu(TaskUnit)',
    'TASK:GetTaskControlMenu(TaskUnit,TaskName)',
    'TASK:RemoveTaskControlMenu(TaskUnit)',
    'TASK:RefreshTaskControlMenu(TaskUnit,MenuTime,MenuTag)',
    'TASKINFO:New(Task)',
    'TASKINFO:AddInfo(Key,Data,Order,Detail,Keep,ShowKey,Type)',
    'TASKINFO:GetInfo(Key)',
    'TASKINFO:GetData(Key)',
    'TASKINFO:AddText(Key,Text,Order,Detail,Keep)',
    'TASKINFO:AddTaskName(Order,Detail,Keep)',
    'TASKINFO:AddCoordinate(Coordinate,Order,Detail,Keep,ShowKey,Name)',
    'TASKINFO:GetCoordinate(Name)',
    'TASKINFO:AddCoordinates(Coordinates,Order,Detail,Keep)',
    'TASKINFO:AddThreat(ThreatText,ThreatLevel,Order,Detail,Keep)',
    'TASKINFO:GetThreat()',
    'TASKINFO:AddTargetCount(TargetCount,Order,Detail,Keep)',
    'TASKINFO:AddTargets(TargetCount,TargetTypes,Order,Detail,Keep)',
    'TASKINFO:GetTargets()',
    'TASKINFO:AddQFEAtCoordinate(Coordinate,Order,Detail,Keep)',
    'TASKINFO:AddTemperatureAtCoordinate(Coordinate,Order,Detail,Keep)',
    'TASKINFO:AddWindAtCoordinate(Coordinate,Order,Detail,Keep)',
    'TASKINFO:AddCargo(Cargo,Order,Detail,Keep)',
    'TASKINFO:AddCargoSet(SetCargo,Order,Detail,Keep)',
    'TASKINFO:Report(Report,Detail,ReportGroup,Task)',
    'TASK_MANAGER:New(SetGroup)',
    'TASK_MANAGER:onafterStartTasks(From,Event,To)',
    'TASK_MANAGER:onafterManage(From,Event,To)',
    'TASK_MANAGER:SetRefreshTimeInterval(RefreshTimeInterval)',
    'TASK_MANAGER:ManageTasks()',
    'DETECTION_MANAGER:New(SetGroup,Detection)',
    'DETECTION_MANAGER:onafterStart(From,Event,To)',
    'DETECTION_MANAGER:onafterReport(From,Event,To)',
    'DETECTION_MANAGER:SetRefreshTimeInterval(RefreshTimeInterval)',
    'DETECTION_MANAGER:SetReportDisplayTime(ReportDisplayTime)',
    'DETECTION_MANAGER:GetReportDisplayTime()',
    'DETECTION_MANAGER:SetTacticalMenu(DispatcherMainMenuText,DispatcherMenuText)',
    'DETECTION_MANAGER:SetCommandCenter(CommandCenter)',
    'DETECTION_MANAGER:GetCommandCenter()',
    'DETECTION_MANAGER:MessageToPlayers(Squadron,Message,DefenderGroup)',
    'DETECTION_MANAGER:ProcessDetected(Detection)',
    'DETECTION_REPORTING:New(SetGroup,Detection)',
    'DETECTION_REPORTING:GetDetectedItemsText(DetectedSet)',
    'DETECTION_REPORTING:ProcessDetected(Group,Detection)',
    'TASK_A2G_DISPATCHER:New(Mission,SetGroup,Detection)',
    'TASK_A2G_DISPATCHER:SetSendMessages(onoff)',
    'TASK_A2G_DISPATCHER:EvaluateSEAD(DetectedItem)',
    'TASK_A2G_DISPATCHER:EvaluateCAS(DetectedItem)',
    'TASK_A2G_DISPATCHER:EvaluateBAI(DetectedItem,FriendlyCoalition)',
    'TASK_A2G_DISPATCHER:RemoveTask(TaskIndex)',
    'TASK_A2G_DISPATCHER:EvaluateRemoveTask(Mission,Task,TaskIndex,DetectedItemChanged)',
    'TASK_A2G_DISPATCHER:ProcessDetected(Detection)',
    'Task.OnEnterSuccess(Task,From,Event,To)',
    'Task.OnEnterCancelled(Task,From,Event,To)',
    'Task.OnEnterFailed(Task,From,Event,To)',
    'Task.OnEnterAborted(Task,From,Event,To)',
    'TASK_A2G:New(Mission,SetGroup,TaskName,TargetSetUnit,TaskType,TaskBriefing)',
    'Fsm:onafterAssigned(TaskUnit,Task)',
    'Fsm:onafterRouteToRendezVous(TaskUnit,Task)',
    'Fsm:OnAfterArriveAtRendezVous(TaskUnit,Task)',
    'Fsm:onafterEngage(TaskUnit,Task)',
    'Fsm:onafterRouteToTarget(TaskUnit,Task)',
    'Fsm:onafterRouteToTargets(TaskUnit,Task)',
    'TASK_A2G:SetTargetSetUnit(TargetSetUnit)',
    'TASK_A2G:GetPlannedMenuText()',
    'TASK_A2G:SetRendezVousCoordinate(RendezVousCoordinate,RendezVousRange,TaskUnit)',
    'TASK_A2G:GetRendezVousCoordinate(TaskUnit)',
    'TASK_A2G:SetRendezVousZone(RendezVousZone,TaskUnit)',
    'TASK_A2G:GetRendezVousZone(TaskUnit)',
    'TASK_A2G:SetTargetCoordinate(TargetCoordinate,TaskUnit)',
    'TASK_A2G:GetTargetCoordinate(TaskUnit)',
    'TASK_A2G:SetTargetZone(TargetZone,TaskUnit)',
    'TASK_A2G:GetTargetZone(TaskUnit)',
    'TASK_A2G:SetGoalTotal()',
    'TASK_A2G:GetGoalTotal()',
    'TASK_A2G:ReportOrder(ReportGroup)',
    'TASK_A2G:onafterGoal(TaskUnit,From,Event,To)',
    'TASK_A2G:UpdateTaskInfo(DetectedItem)',
    'TASK_A2G:GetAutoAssignPriority(AutoAssignMethod,CommandCenter,TaskGroup)',
    'TASK_A2G_SEAD:New(Mission,SetGroup,TaskName,TargetSetUnit,TaskBriefing)',
    'TASK_A2G_SEAD:SetScoreOnProgress(PlayerName,Score,TaskUnit)',
    'TASK_A2G_SEAD:SetScoreOnSuccess(PlayerName,Score,TaskUnit)',
    'TASK_A2G_SEAD:SetScoreOnFail(PlayerName,Penalty,TaskUnit)',
    'TASK_A2G_BAI:New(Mission,SetGroup,TaskName,TargetSetUnit,TaskBriefing)',
    'TASK_A2G_BAI:SetScoreOnProgress(PlayerName,Score,TaskUnit)',
    'TASK_A2G_BAI:SetScoreOnSuccess(PlayerName,Score,TaskUnit)',
    'TASK_A2G_BAI:SetScoreOnFail(PlayerName,Penalty,TaskUnit)',
    'TASK_A2G_CAS:New(Mission,SetGroup,TaskName,TargetSetUnit,TaskBriefing)',
    'TASK_A2G_CAS:SetScoreOnProgress(PlayerName,Score,TaskUnit)',
    'TASK_A2G_CAS:SetScoreOnSuccess(PlayerName,Score,TaskUnit)',
    'TASK_A2G_CAS:SetScoreOnFail(PlayerName,Penalty,TaskUnit)',
    'TASK_A2A_DISPATCHER:New(Mission,SetGroup,Detection)',
    'TASK_A2A_DISPATCHER:SetEngageRadius(EngageRadius)',
    'TASK_A2A_DISPATCHER:SetSendMessages(onoff)',
    'TASK_A2A_DISPATCHER:EvaluateINTERCEPT(DetectedItem)',
    'TASK_A2A_DISPATCHER:EvaluateSWEEP(DetectedItem)',
    'TASK_A2A_DISPATCHER:EvaluateENGAGE(DetectedItem)',
    'TASK_A2A_DISPATCHER:EvaluateRemoveTask(Mission,Task,Detection,DetectedItem,DetectedItemIndex,DetectedItemChanged)',
    'TASK_A2A_DISPATCHER:GetFriendliesNearBy(DetectedItem)',
    'TASK_A2A_DISPATCHER:GetPlayerFriendliesNearBy(DetectedItem)',
    'TASK_A2A_DISPATCHER:RemoveTask(TaskIndex)',
    'TASK_A2A_DISPATCHER:ProcessDetected(Detection)',
    'Task.OnEnterSuccess(Task,From,Event,To)',
    'Task.OnEnterCancelled(Task,From,Event,To)',
    'Task.OnEnterFailed(Task,From,Event,To)',
    'Task.OnEnterAborted(Task,From,Event,To)',
    'TASK_A2A:New(Mission,SetAttack,TaskName,TargetSetUnit,TaskType,TaskBriefing)',
    'Fsm:OnLeaveAssigned(TaskUnit,Task)',
    'Fsm:onafterRouteToRendezVous(TaskUnit,Task)',
    'Fsm:OnAfterArriveAtRendezVous(TaskUnit,Task)',
    'Fsm:onafterEngage(TaskUnit,Task)',
    'Fsm:onafterRouteToTarget(TaskUnit,Task)',
    'Fsm:onafterRouteToTargets(TaskUnit,Task)',
    'TASK_A2A:SetTargetSetUnit(TargetSetUnit)',
    'TASK_A2A:GetPlannedMenuText()',
    'TASK_A2A:SetRendezVousCoordinate(RendezVousCoordinate,RendezVousRange,TaskUnit)',
    'TASK_A2A:GetRendezVousCoordinate(TaskUnit)',
    'TASK_A2A:SetRendezVousZone(RendezVousZone,TaskUnit)',
    'TASK_A2A:GetRendezVousZone(TaskUnit)',
    'TASK_A2A:SetTargetCoordinate(TargetCoordinate,TaskUnit)',
    'TASK_A2A:GetTargetCoordinate(TaskUnit)',
    'TASK_A2A:SetTargetZone(TargetZone,Altitude,Heading,TaskUnit)',
    'TASK_A2A:GetTargetZone(TaskUnit)',
    'TASK_A2A:SetGoalTotal()',
    'TASK_A2A:GetGoalTotal()',
    'TASK_A2A:ReportOrder(ReportGroup)',
    'TASK_A2A:onafterGoal(TaskUnit,From,Event,To)',
    'TASK_A2A:UpdateTaskInfo(DetectedItem)',
    'TASK_A2A:GetAutoAssignPriority(AutoAssignMethod,CommandCenter,TaskGroup)',
    'TASK_A2A_INTERCEPT:New(Mission,SetGroup,TaskName,TargetSetUnit,TaskBriefing)',
    'TASK_A2A_INTERCEPT:SetScoreOnProgress(PlayerName,Score,TaskUnit)',
    'TASK_A2A_INTERCEPT:SetScoreOnSuccess(PlayerName,Score,TaskUnit)',
    'TASK_A2A_INTERCEPT:SetScoreOnFail(PlayerName,Penalty,TaskUnit)',
    'TASK_A2A_SWEEP:New(Mission,SetGroup,TaskName,TargetSetUnit,TaskBriefing)',
    'TASK_A2A_SWEEP:onafterGoal(TaskUnit,From,Event,To)',
    'TASK_A2A_SWEEP:SetScoreOnProgress(PlayerName,Score,TaskUnit)',
    'TASK_A2A_SWEEP:SetScoreOnSuccess(PlayerName,Score,TaskUnit)',
    'TASK_A2A_SWEEP:SetScoreOnFail(PlayerName,Penalty,TaskUnit)',
    'TASK_A2A_ENGAGE:New(Mission,SetGroup,TaskName,TargetSetUnit,TaskBriefing)',
    'TASK_A2A_ENGAGE:SetScoreOnProgress(PlayerName,Score,TaskUnit)',
    'TASK_A2A_ENGAGE:SetScoreOnSuccess(PlayerName,Score,TaskUnit)',
    'TASK_A2A_ENGAGE:SetScoreOnFail(PlayerName,Penalty,TaskUnit)',
    'TASK_CARGO:New(Mission,SetGroup,TaskName,SetCargo,TaskType,TaskBriefing)',
    'Fsm:OnAfterAssigned(TaskUnit,Task)',
    'Fsm:onafterSelectAction(TaskUnit,Task)',
    'Fsm:OnLeaveWaitingForCommand(TaskUnit,Task)',
    'Fsm:MenuBoardCargo(Cargo)',
    'Fsm:MenuLoadCargo(Cargo)',
    'Fsm:MenuUnboardCargo(Cargo,DeployZone)',
    'Fsm:MenuUnloadCargo(Cargo,DeployZone)',
    'Fsm:MenuRouteToPickup(Cargo)',
    'Fsm:MenuRouteToDeploy(DeployZone)',
    'Fsm:onafterRouteToPickup(TaskUnit,Task,From,Event,To,Cargo)',
    'Fsm:onafterArriveAtPickup(TaskUnit,Task)',
    'Fsm:onafterCancelRouteToPickup(TaskUnit,Task)',
    'Fsm:onafterRouteToDeploy(TaskUnit,Task,From,Event,To,DeployZone)',
    'Fsm:onafterArriveAtDeploy(TaskUnit,Task)',
    'Fsm:onafterCancelRouteToDeploy(TaskUnit,Task)',
    'Fsm:onafterLand(TaskUnit,Task,From,Event,To,Action)',
    'Fsm:onafterLanded(TaskUnit,Task,From,Event,To,Action)',
    'Fsm:onafterPrepareBoarding(TaskUnit,Task,From,Event,To,Cargo)',
    'Fsm:onafterBoard(TaskUnit,Task,From,Event,To,Cargo)',
    'Cargo:OnEnterLoaded(From,Event,To,TaskUnit,TaskProcess)',
    'Fsm:onafterBoarded(TaskUnit,Task,From,Event,To,Cargo)',
    'Fsm:onafterLoad(TaskUnit,Task,From,Event,To,Cargo)',
    'Fsm:onafterPrepareUnBoarding(TaskUnit,Task,From,Event,To,Cargo)',
    'Fsm:onafterUnBoard(TaskUnit,Task,From,Event,To,Cargo,DeployZone)',
    'Fsm:onafterUnBoarded(TaskUnit,Task)',
    'Fsm:onafterUnload(TaskUnit,Task,From,Event,To,Cargo,DeployZone)',
    'TASK_CARGO:SetCargoLimit(CargoLimit)',
    'TASK_CARGO:SetSmokeColor(SmokeColor)',
    'TASK_CARGO:GetSmokeColor()',
    'TASK_CARGO:GetPlannedMenuText()',
    'TASK_CARGO:GetCargoSet()',
    'TASK_CARGO:GetDeployZones()',
    'TASK_CARGO:SetCargoPickup(Cargo,TaskUnit)',
    'TASK_CARGO:SetDeployZone(DeployZone,TaskUnit)',
    'TASK_CARGO:AddDeployZone(DeployZone,TaskUnit)',
    'TASK_CARGO:RemoveDeployZone(DeployZone,TaskUnit)',
    'TASK_CARGO:SetDeployZones(DeployZones,TaskUnit)',
    'TASK_CARGO:GetTargetZone(TaskUnit)',
    'TASK_CARGO:SetScoreOnProgress(Text,Score,TaskUnit)',
    'TASK_CARGO:SetScoreOnSuccess(Text,Score,TaskUnit)',
    'TASK_CARGO:SetScoreOnFail(Text,Penalty,TaskUnit)',
    'TASK_CARGO:SetGoalTotal()',
    'TASK_CARGO:GetGoalTotal()',
    'TASK_CARGO:UpdateTaskInfo()',
    'TASK_CARGO:ReportOrder(ReportGroup)',
    'TASK_CARGO:GetAutoAssignPriority(AutoAssignMethod,TaskGroup)',
    'TASK_CARGO_TRANSPORT:New(Mission,SetGroup,TaskName,SetCargo,TaskBriefing)',
    'TASK_CARGO_TRANSPORT:ReportOrder(ReportGroup)',
    'TASK_CARGO_TRANSPORT:IsAllCargoTransported()',
    'TASK_CARGO_TRANSPORT:onafterGoal(TaskUnit,From,Event,To)',
    'TASK_CARGO_CSAR:New(Mission,SetGroup,TaskName,SetCargo,TaskBriefing)',
    'TASK_CARGO_CSAR:ReportOrder(ReportGroup)',
    'TASK_CARGO_CSAR:IsAllCargoTransported()',
    'TASK_CARGO_CSAR:onafterGoal(TaskUnit,From,Event,To)',
    'TASK_CARGO_DISPATCHER:New(Mission,SetGroup)',
    'TASK_CARGO_DISPATCHER:SetCSARZones(SetZonesCSAR)',
    'TASK_CARGO_DISPATCHER:SetMaxCSAR(MaxCSAR)',
    'TASK_CARGO_DISPATCHER:OnEventEjection(EventData)',
    'TASK_CARGO_DISPATCHER:SetDefaultDeployZone(DefaultDeployZone)',
    'TASK_CARGO_DISPATCHER:SetDefaultDeployZones(DefaultDeployZones)',
    'TASK_CARGO_DISPATCHER:StartCSARTasks(CSARTaskName,CSARDeployZones,CSARBriefing)',
    'TASK_CARGO_DISPATCHER:StopCSARTasks()',
    'TASK_CARGO_DISPATCHER:AddCSARTask(CSARTaskPrefix,CSARCoordinate,CSARHeading,CSARCountry,CSARBriefing)',
    'TASK_CARGO_DISPATCHER:SetCSARRadius(CSARRadius)',
    'TASK_CARGO_DISPATCHER:SetCSARDeployZone(CSARTaskName,CSARDeployZone)',
    'TASK_CARGO_DISPATCHER:SetCSARDeployZones(CSARTaskName,CSARDeployZones)',
    'TASK_CARGO_DISPATCHER:AddTransportTask(TaskPrefix,SetCargo,Briefing,Silent)',
    'TASK_CARGO_DISPATCHER:SetTransportDeployZone(Task,TransportDeployZone)',
    'TASK_CARGO_DISPATCHER:SetTransportDeployZones(Task,TransportDeployZones)',
    'TASK_CARGO_DISPATCHER:EvaluateCSAR(CSARUnit)',
    'TASK_CARGO_DISPATCHER:ManageTasks(Silent)',
    'TASK_ZONE_GOAL:New(Mission,SetGroup,TaskName,ZoneGoal,TaskType,TaskBriefing)',
    'Fsm:OnAfterAssigned(TaskUnit,Task)',
    'Fsm:onafterStartMonitoring(TaskUnit,Task)',
    'Fsm:onafterMonitor(TaskUnit,Task)',
    'Fsm:onafterRouteTo(TaskUnit,Task)',
    'TASK_ZONE_GOAL:SetProtect(ZoneGoal)',
    'TASK_ZONE_GOAL:GetPlannedMenuText()',
    'TASK_ZONE_GOAL:SetTargetZone(TargetZone,TaskUnit)',
    'TASK_ZONE_GOAL:GetTargetZone(TaskUnit)',
    'TASK_ZONE_GOAL:SetGoalTotal(GoalTotal)',
    'TASK_ZONE_GOAL:GetGoalTotal()',
    'TASK_CAPTURE_ZONE:New(Mission,SetGroup,TaskName,ZoneGoalCoalition,TaskBriefing)',
    'TASK_CAPTURE_ZONE:UpdateTaskInfo(Persist)',
    'TASK_CAPTURE_ZONE:ReportOrder(ReportGroup)',
    'TASK_CAPTURE_ZONE:OnAfterGoal(From,Event,To,PlayerUnit,PlayerName)',
    'TASK_CAPTURE_ZONE:GetAutoAssignPriority(AutoAssignMethod,CommandCenter,TaskGroup,AutoAssignReference)',
    'TASK_CAPTURE_DISPATCHER:New(Mission,SetGroup)',
    'TASK_CAPTURE_DISPATCHER:SetDefenseTaskCaptureDispatcher(DefenseTaskCaptureDispatcher)',
    'TASK_CAPTURE_DISPATCHER:GetDefenseTaskCaptureDispatcher()',
    'TASK_CAPTURE_DISPATCHER:SetDefenseAIA2GDispatcher(DefenseAIA2GDispatcher)',
    'TASK_CAPTURE_DISPATCHER:GetDefenseAIA2GDispatcher()',
    'TASK_CAPTURE_DISPATCHER:AddCaptureZoneTask(TaskPrefix,CaptureZone,Briefing)',
    'TASK_CAPTURE_DISPATCHER:Link_AI_A2G_Dispatcher(AI_A2G_Dispatcher)',
    'TASK_CAPTURE_DISPATCHER:ManageTasks()']

        # d = {
        #     "GROUP": ["New()", "Find()"],
        #     "SPAWN": ["FromVec2()", "Init()"],
        #     "g": [],
        # }

        self.previous_keywords = keywords

        self.completer = CustomCompleter(self.previous_keywords)
        self.completer.activated.connect(self.insert_completion)
        self.completer.setWidget(self)
        self.completer.setCompletionMode(QCompleter.CompletionMode.PopupCompletion)
        self.completer.setCaseSensitivity(Qt.CaseSensitivity.CaseInsensitive)
        self.completer.popup().setItemDelegate(PopupItemDelegate())
        self.completer.popup().setStyleSheet("""
                                                QListView::item {
                                                    min-height: 18px;
                                                    max-height: 18px;
                                                    font: 'Courier New'
                                                },
                                            """)
        self.textChanged.connect(self.complete)
        # self.textChanged.connect(self.update_keywords)

    def insert_completion(self, completion):
        """
        Inserts the autocompletion text into the document at the cursor's position.

        Parameters:
        completion (str): The autocompletion text to be inserted.
        """

        tc = self.textCursor()
        tc.select(QTextCursor.WordUnderCursor)
        if self.get_word_before_cursor() == completion:
            return

        char_to_right = None
        pos = self.textCursor().position()
        text = self.toPlainText()
        if pos < len(text):
            char_to_right = text[pos]


        if char_to_right in [")", "\"", "'", "]", "}"]:
            tc.movePosition(QTextCursor.MoveOperation.EndOfWord)
            tc.movePosition(QTextCursor.MoveOperation.Left)
        else:
            tc.movePosition(QTextCursor.MoveOperation.Left)
            tc.movePosition(QTextCursor.MoveOperation.EndOfWord)

        extra = len(completion) - len(self.completer.completionPrefix())
        tc.insertText(completion[-extra:])
        self.setTextCursor(tc)

    def text_under_cursor(self):
        """
        Returns the word under the cursor.

        The cursor is moved one position to the left before selecting the word under the cursor.

        Returns:
        str: The word under the cursor.
        """

        tc = self.textCursor()
        tc.select(QTextCursor.WordUnderCursor)
        return tc.selectedText()

    def get_word_before_cursor(self):
        """
        Returns the word before the cursor.
        The word is determined by moving the cursor backwards until a whitespace, newline, or the start of the document is encountered.
        """

        cursor_pos = self.textCursor().position()  # get current cursor position
        text_up_to_cursor = self.toPlainText()[:cursor_pos]  # get text up to cursor

        # split the text into words by spaces or newline characters
        words = text_up_to_cursor.split()

        # the last word in the list will be the word you want
        if words:
            selected_word = words[-1]
        else:
            selected_word = ""


        return selected_word


    def complete(self):
        """
        Performs autocompletion based on the current word under the cursor.

        If the word under the cursor is in the completer's list, it does nothing.
        Otherwise, it sets the completion prefix to the word under the cursor and opens the completer's popup
        at the current cursor's rectangle. If the completion prefix length is greater than 1, it also adjusts
        the width of the completer's popup based on the size hint of the first column and the vertical scrollbar.
        """

        prefix = self.get_word_before_cursor()
        if prefix in self.completer.model().stringList():
            return
        self.completer.setCompletionPrefix(prefix)
        self.completer.popup().hide()
        popup = self.completer.popup()
        rect: QRect = self.cursorRect()
        rect.setX(rect.x() + 55)
        self.completer.complete(rect)

        if len(prefix) > 1:
            popup.setCurrentIndex(self.completer.completionModel().index(0, 0))
            rect.setWidth(
                self.completer.popup().sizeHintForColumn(0)
                + self.completer.popup().verticalScrollBar().sizeHint().width()
            )
            self.completer.complete(rect)
        else:
            self.completer.popup().hide()

    def get_line_number_area_width(self):
        """
        Returns the space needed for the line number area based number of lines
        :return: int
        """
        digits = 1
        max_value = max(1, self.blockCount())
        while max_value >= 10:
            max_value /= 10
            digits += 1

        space = 3 + self.fontMetrics().horizontalAdvance('9') * digits + self.line_numbers_padding
        return space

    def update_line_number_area_width(self):
        """
        Update the viewport margins based on the space needed by the line number widget

        :return:
        """
        self.setViewportMargins(self.get_line_number_area_width(), 0, 0, 0)

    def update_line_number_area(self, rect, dy):
        """

        :param rect:
        :param dy:
        :return:
        """
        if dy:
            self.line_number_area.scroll(0, dy)
        else:
            self.line_number_area.update(0, rect.y(), self.line_number_area.width(), rect.height())

        if rect.contains(self.viewport().rect()):
            self.update_line_number_area_width()

    def line_number_area_paint_event(self, event):
        """
        Paint the numbers widget

        :param event: The QPaintEvent that triggered this function
        :return: None
        """
        # grab the painter of the line number area widget
        painter = QPainter(self.line_number_area)
        painter.fillRect(event.rect(), QColor(49, 54, 59))

        block = self.firstVisibleBlock()
        block_number = block.blockNumber()

        # Get the top and bottom y-coordinates of the first visible block
        top = self.blockBoundingGeometry(block).translated(self.contentOffset()).top()
        bottom = top + self.blockBoundingRect(block).height()

        # Loop through all visible blocks
        while block.isValid() and (top <= event.rect().bottom()):
            if block.isVisible() and (bottom >= event.rect().top()):
                number = str(block_number + 1)

                # If this block is the current line, set the pen color to the highlight color
                if block_number == self.textCursor().blockNumber():
                    painter.setPen(self.highlight_color)
                else:
                    # Otherwise, set the pen color to a darker color
                    painter.setPen(self.highlight_color.darker(150))

                # Draw the line number text at the correct position
                painter.drawText(0, top, self.line_number_area.width() - self.line_numbers_padding,
                                 self.fontMetrics().height(),
                                 Qt.AlignRight, number)

            # Move to the next block and update the top and bottom y-coordinates
            block = block.next()
            top = bottom
            bottom = top + self.blockBoundingRect(block).height()
            block_number += 1

        # Draw a vertical line to separate line numbers and code
        painter.setPen(self.highlight_color)
        painter.drawLine(self.line_number_area.width() - 1, event.rect().top(),
                         self.line_number_area.width() - 1, event.rect().bottom())

    def highlight_current_line(self):
        """
        Does what it says on the box

        :return:
        """
        extra_selections = []

        if not self.isReadOnly():
            selection = QTextEdit.ExtraSelection()

            lineColor = QColor(49, 54, 59).lighter(110)

            selection.format.setBackground(lineColor)
            selection.format.setProperty(QTextFormat.FullWidthSelection, True)
            selection.cursor = self.textCursor()
            selection.cursor.clearSelection()
            extra_selections.append(selection)

        self.setExtraSelections(extra_selections)

    def update_document_size(self):
        """
        Updates the document size based on the font size.
        """

        self.setStyleSheet(f"font: {self.font_size}pt 'Courier New';")

    def get_selected_text(self):
        """
        Returns the selected text in the text edit.

        :return: <str> the selected text
        """

        return self.textCursor().selectedText()

    def update_keywords(self):
        text = self.toPlainText()
        matches = re.findall(r'\b([a-zA-Z_][a-zA-Z_0-9]*)\s*=', text)
        for variable_name in matches:
            if variable_name not in self.completer.model().stringList():
                self.completer.model().setStringList(list(set(self.completer.model().stringList() + [variable_name])))


    def __insert_code(self, text, move_back_pos):
        """
        Inserts the given text at the current cursor position.

        :param text: <str> the text to be inserted
        :param move_back_pos: <int> the number of positions to move the cursor back after inserting the text
        """

        cursor = self.textCursor()
        selected_text = cursor.selection().toPlainText()
        self.insertPlainText(text)
        pos = cursor.position() + move_back_pos
        cursor.setPosition(pos)
        self.setTextCursor(cursor)
        self.insertPlainText(selected_text)

    def keyPressEvent(self, event: QKeyEvent) -> None:
        """
        Handles key press events.

        :param event: <QKeyEvent> the key press event
        """
        if self.completer.popup().isVisible() and event.key() in [
            Qt.Key.Key_Enter,
            Qt.Key.Key_Return,
            Qt.Key.Key_Up,
            Qt.Key.Key_Down,
            Qt.Key.Key_Tab,
            Qt.Key.Key_Backtab,
        ]:
            self.completer.popup().close()
            event.ignore()
            return

        if event.key() == Qt.Key_Slash and event.modifiers() == Qt.ControlModifier:
            cursor = self.textCursor()
            selected_text = cursor.selection().toPlainText()
            lines = selected_text.split("\n")
            commented_lines = []
            for line in lines:
                if line.startswith("-- "):
                    line = line.replace("-- ", "")
                else:
                    line = "-- " + line
                commented_lines.append(line)

            self.insertPlainText("\n".join(commented_lines))
        if event.key() == Qt.Key_Up and event.modifiers() == Qt.ControlModifier:
            self.font_size += 1
            self.update_document_size()
        if event.key() == Qt.Key_Down and event.modifiers() == Qt.ControlModifier:
            self.font_size -= 1
            self.update_document_size()
        if event.key() == Qt.Key_P and event.modifiers() == Qt.ControlModifier:
            self.__insert_code("BASE:I()", -1)
        if event.key() == Qt.Key_M and event.modifiers() == Qt.ControlModifier:
            self.__insert_code("MessageToAll()", -1)
        if event.key() in [
            Qt.Key.Key_QuoteDbl,
            Qt.Key.Key_Apostrophe,
            Qt.Key.Key_BraceLeft,
            Qt.Key.Key_BraceRight,
            Qt.Key.Key_BracketLeft,
            Qt.Key.Key_BracketRight,
            Qt.Key.Key_ParenLeft,
            Qt.Key.Key_ParenRight,
        ]:
            cursor = self.textCursor()
            cursor.movePosition(QTextCursor.MoveOperation.Right, QTextCursor.KeepAnchor)
            if cursor.selectedText() == event.text():
                cursor.movePosition(QTextCursor.MoveOperation.Right)
                self.setTextCursor(cursor)
                return

        if event.key() == Qt.Key_QuoteDbl:
            self.__insert_code('"', -1)
        if event.key() == Qt.Key_Apostrophe:
            self.__insert_code("'", -1)
        if event.key() == Qt.Key_BraceLeft:
            self.__insert_code("}", -1)
        if event.key() == Qt.Key_BracketLeft:
            self.__insert_code("]", -1)
        if event.key() == Qt.Key_ParenLeft:
            self.__insert_code(")", -1)


        self.update_keywords()

        super().keyPressEvent(event)

    def resizeEvent(self, event):
        super().resizeEvent(event)

        content_rect = self.contentsRect()
        self.line_number_area.setGeometry(QRect(content_rect.left(), content_rect.top(), self.get_line_number_area_width(), content_rect.height()))


class LineNumberArea(QWidget):
    """
    A custom QWidget that displays line numbers for a CodeTextEdit.
    """
    def __init__(self, editor):
        super().__init__(editor)
        self.codeEditor = editor

    def paintEvent(self, event):
        """
        Handles the paint event for the line number area. Draws line numbers and highlights the current line.

        Parameters:
        event (QPaintEvent): The paint event.
        """
        self.codeEditor.line_number_area_paint_event(event)


class PopupItemDelegate(QStyledItemDelegate):
    """
    A custom QStyledItemDelegate that provides custom size hint for QCompleter popup items.
    """
    def paint(self, painter, option, index):
        font = QFont("Courier New")
        font.setPointSize(10)
        option.font = font

        super().paint(painter, option, index)

    def sizeHint(self, option, index):
        """
        Returns the size hint for the given index and style option.

        Parameters:
        option (QStyleOptionViewItem): The style option for the item.
        index (QModelIndex): The model index for the item.

        Returns:
        QSize: The size hint for the item.
        """

        base_size = super().sizeHint(option, index)
        return QSize(base_size.width() * 2, base_size.height())


class CustomCompleter(QCompleter):
    def splitPath(self, path):
        return [path]